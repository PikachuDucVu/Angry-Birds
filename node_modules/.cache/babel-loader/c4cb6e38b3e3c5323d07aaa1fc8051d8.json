{"ast":null,"code":"'use strict';\n\nvar ndarray = require('ndarray');\n\nvar ops = require('ndarray-ops');\n\nvar pool = require('typedarray-pool');\n\nmodule.exports = createTexture2D;\nvar linearTypes = null;\nvar filterTypes = null;\nvar wrapTypes = null;\n\nfunction lazyInitLinearTypes(gl) {\n  linearTypes = [gl.LINEAR, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_NEAREST];\n  filterTypes = [gl.NEAREST, gl.LINEAR, gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_LINEAR];\n  wrapTypes = [gl.REPEAT, gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT];\n}\n\nfunction acceptTextureDOM(obj) {\n  return 'undefined' != typeof HTMLCanvasElement && obj instanceof HTMLCanvasElement || 'undefined' != typeof HTMLImageElement && obj instanceof HTMLImageElement || 'undefined' != typeof HTMLVideoElement && obj instanceof HTMLVideoElement || 'undefined' != typeof ImageData && obj instanceof ImageData;\n}\n\nvar convertFloatToUint8 = function (out, inp) {\n  ops.muls(out, inp, 255.0);\n};\n\nfunction reshapeTexture(tex, w, h) {\n  var gl = tex.gl;\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n  if (w < 0 || w > maxSize || h < 0 || h > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size');\n  }\n\n  tex._shape = [w, h];\n  tex.bind();\n  gl.texImage2D(gl.TEXTURE_2D, 0, tex.format, w, h, 0, tex.format, tex.type, null);\n  tex._mipLevels = [0];\n  return tex;\n}\n\nfunction Texture2D(gl, handle, width, height, format, type) {\n  this.gl = gl;\n  this.handle = handle;\n  this.format = format;\n  this.type = type;\n  this._shape = [width, height];\n  this._mipLevels = [0];\n  this._magFilter = gl.NEAREST;\n  this._minFilter = gl.NEAREST;\n  this._wrapS = gl.CLAMP_TO_EDGE;\n  this._wrapT = gl.CLAMP_TO_EDGE;\n  this._anisoSamples = 1;\n  var parent = this;\n  var wrapVector = [this._wrapS, this._wrapT];\n  Object.defineProperties(wrapVector, [{\n    get: function () {\n      return parent._wrapS;\n    },\n    set: function (v) {\n      return parent.wrapS = v;\n    }\n  }, {\n    get: function () {\n      return parent._wrapT;\n    },\n    set: function (v) {\n      return parent.wrapT = v;\n    }\n  }]);\n  this._wrapVector = wrapVector;\n  var shapeVector = [this._shape[0], this._shape[1]];\n  Object.defineProperties(shapeVector, [{\n    get: function () {\n      return parent._shape[0];\n    },\n    set: function (v) {\n      return parent.width = v;\n    }\n  }, {\n    get: function () {\n      return parent._shape[1];\n    },\n    set: function (v) {\n      return parent.height = v;\n    }\n  }]);\n  this._shapeVector = shapeVector;\n}\n\nvar proto = Texture2D.prototype;\nObject.defineProperties(proto, {\n  minFilter: {\n    get: function () {\n      return this._minFilter;\n    },\n    set: function (v) {\n      this.bind();\n      var gl = this.gl;\n\n      if (this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if (!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST;\n        }\n      }\n\n      if (filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v);\n      }\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, v);\n      return this._minFilter = v;\n    }\n  },\n  magFilter: {\n    get: function () {\n      return this._magFilter;\n    },\n    set: function (v) {\n      this.bind();\n      var gl = this.gl;\n\n      if (this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if (!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST;\n        }\n      }\n\n      if (filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v);\n      }\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, v);\n      return this._magFilter = v;\n    }\n  },\n  mipSamples: {\n    get: function () {\n      return this._anisoSamples;\n    },\n    set: function (i) {\n      var psamples = this._anisoSamples;\n      this._anisoSamples = Math.max(i, 1) | 0;\n\n      if (psamples !== this._anisoSamples) {\n        var ext = this.gl.getExtension('EXT_texture_filter_anisotropic');\n\n        if (ext) {\n          this.gl.texParameterf(this.gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisoSamples);\n        }\n      }\n\n      return this._anisoSamples;\n    }\n  },\n  wrapS: {\n    get: function () {\n      return this._wrapS;\n    },\n    set: function (v) {\n      this.bind();\n\n      if (wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v);\n      }\n\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, v);\n      return this._wrapS = v;\n    }\n  },\n  wrapT: {\n    get: function () {\n      return this._wrapT;\n    },\n    set: function (v) {\n      this.bind();\n\n      if (wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v);\n      }\n\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, v);\n      return this._wrapT = v;\n    }\n  },\n  wrap: {\n    get: function () {\n      return this._wrapVector;\n    },\n    set: function (v) {\n      if (!Array.isArray(v)) {\n        v = [v, v];\n      }\n\n      if (v.length !== 2) {\n        throw new Error('gl-texture2d: Must specify wrap mode for rows and columns');\n      }\n\n      for (var i = 0; i < 2; ++i) {\n        if (wrapTypes.indexOf(v[i]) < 0) {\n          throw new Error('gl-texture2d: Unknown wrap mode ' + v);\n        }\n      }\n\n      this._wrapS = v[0];\n      this._wrapT = v[1];\n      var gl = this.gl;\n      this.bind();\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT);\n      return v;\n    }\n  },\n  shape: {\n    get: function () {\n      return this._shapeVector;\n    },\n    set: function (x) {\n      if (!Array.isArray(x)) {\n        x = [x | 0, x | 0];\n      } else {\n        if (x.length !== 2) {\n          throw new Error('gl-texture2d: Invalid texture shape');\n        }\n      }\n\n      reshapeTexture(this, x[0] | 0, x[1] | 0);\n      return [x[0] | 0, x[1] | 0];\n    }\n  },\n  width: {\n    get: function () {\n      return this._shape[0];\n    },\n    set: function (w) {\n      w = w | 0;\n      reshapeTexture(this, w, this._shape[1]);\n      return w;\n    }\n  },\n  height: {\n    get: function () {\n      return this._shape[1];\n    },\n    set: function (h) {\n      h = h | 0;\n      reshapeTexture(this, this._shape[0], h);\n      return h;\n    }\n  }\n});\n\nproto.bind = function (unit) {\n  var gl = this.gl;\n\n  if (unit !== undefined) {\n    gl.activeTexture(gl.TEXTURE0 + (unit | 0));\n  }\n\n  gl.bindTexture(gl.TEXTURE_2D, this.handle);\n\n  if (unit !== undefined) {\n    return unit | 0;\n  }\n\n  return gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0;\n};\n\nproto.dispose = function () {\n  this.gl.deleteTexture(this.handle);\n};\n\nproto.generateMipmap = function () {\n  this.bind();\n  this.gl.generateMipmap(this.gl.TEXTURE_2D); //Update mip levels\n\n  var l = Math.min(this._shape[0], this._shape[1]);\n\n  for (var i = 0; l > 0; ++i, l >>>= 1) {\n    if (this._mipLevels.indexOf(i) < 0) {\n      this._mipLevels.push(i);\n    }\n  }\n};\n\nproto.setPixels = function (data, x_off, y_off, mip_level) {\n  var gl = this.gl;\n  this.bind();\n\n  if (Array.isArray(x_off)) {\n    mip_level = y_off;\n    y_off = x_off[1] | 0;\n    x_off = x_off[0] | 0;\n  } else {\n    x_off = x_off || 0;\n    y_off = y_off || 0;\n  }\n\n  mip_level = mip_level || 0;\n  var directData = acceptTextureDOM(data) ? data : data.raw;\n\n  if (directData) {\n    var needsMip = this._mipLevels.indexOf(mip_level) < 0;\n\n    if (needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, directData);\n\n      this._mipLevels.push(mip_level);\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, this.format, this.type, directData);\n    }\n  } else if (data.shape && data.stride && data.data) {\n    if (data.shape.length < 2 || x_off + data.shape[1] > this._shape[1] >>> mip_level || y_off + data.shape[0] > this._shape[0] >>> mip_level || x_off < 0 || y_off < 0) {\n      throw new Error('gl-texture2d: Texture dimensions are out of bounds');\n    }\n\n    texSubImageArray(gl, x_off, y_off, mip_level, this.format, this.type, this._mipLevels, data);\n  } else {\n    throw new Error('gl-texture2d: Unsupported data type');\n  }\n};\n\nfunction isPacked(shape, stride) {\n  if (shape.length === 3) {\n    return stride[2] === 1 && stride[1] === shape[0] * shape[2] && stride[0] === shape[2];\n  }\n\n  return stride[0] === 1 && stride[1] === shape[0];\n}\n\nfunction texSubImageArray(gl, x_off, y_off, mip_level, cformat, ctype, mipLevels, array) {\n  var dtype = array.dtype;\n  var shape = array.shape.slice();\n\n  if (shape.length < 2 || shape.length > 3) {\n    throw new Error('gl-texture2d: Invalid ndarray, must be 2d or 3d');\n  }\n\n  var type = 0,\n      format = 0;\n  var packed = isPacked(shape, array.stride.slice());\n\n  if (dtype === 'float32') {\n    type = gl.FLOAT;\n  } else if (dtype === 'float64') {\n    type = gl.FLOAT;\n    packed = false;\n    dtype = 'float32';\n  } else if (dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE;\n  } else {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n    dtype = 'uint8';\n  }\n\n  var channels = 1;\n\n  if (shape.length === 2) {\n    format = gl.LUMINANCE;\n    shape = [shape[0], shape[1], 1];\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset);\n  } else if (shape.length === 3) {\n    if (shape[2] === 1) {\n      format = gl.ALPHA;\n    } else if (shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA;\n    } else if (shape[2] === 3) {\n      format = gl.RGB;\n    } else if (shape[2] === 4) {\n      format = gl.RGBA;\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords');\n    }\n\n    channels = shape[2];\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture');\n  } //For 1-channel textures allow conversion between formats\n\n\n  if ((format === gl.LUMINANCE || format === gl.ALPHA) && (cformat === gl.LUMINANCE || cformat === gl.ALPHA)) {\n    format = cformat;\n  }\n\n  if (format !== cformat) {\n    throw new Error('gl-texture2d: Incompatible texture format for setPixels');\n  }\n\n  var size = array.size;\n  var needsMip = mipLevels.indexOf(mip_level) < 0;\n\n  if (needsMip) {\n    mipLevels.push(mip_level);\n  }\n\n  if (type === ctype && packed) {\n    //Array data types are compatible, can directly copy into texture\n    if (array.offset === 0 && array.data.length === size) {\n      if (needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data);\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data);\n      }\n    } else {\n      if (needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data.subarray(array.offset, array.offset + size));\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data.subarray(array.offset, array.offset + size));\n      }\n    }\n  } else {\n    //Need to do type conversion to pack data into buffer\n    var pack_buffer;\n\n    if (ctype === gl.FLOAT) {\n      pack_buffer = pool.mallocFloat32(size);\n    } else {\n      pack_buffer = pool.mallocUint8(size);\n    }\n\n    var pack_view = ndarray(pack_buffer, shape, [shape[2], shape[2] * shape[0], 1]);\n\n    if (type === gl.FLOAT && ctype === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(pack_view, array);\n    } else {\n      ops.assign(pack_view, array);\n    }\n\n    if (needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, pack_buffer.subarray(0, size));\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, pack_buffer.subarray(0, size));\n    }\n\n    if (ctype === gl.FLOAT) {\n      pool.freeFloat32(pack_buffer);\n    } else {\n      pool.freeUint8(pack_buffer);\n    }\n  }\n}\n\nfunction initTexture(gl) {\n  var tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  return tex;\n}\n\nfunction createTextureShape(gl, width, height, format, type) {\n  var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n  if (width < 0 || width > maxTextureSize || height < 0 || height > maxTextureSize) {\n    throw new Error('gl-texture2d: Invalid texture shape');\n  }\n\n  if (type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    throw new Error('gl-texture2d: Floating point textures not supported on this platform');\n  }\n\n  var tex = initTexture(gl);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null);\n  return new Texture2D(gl, tex, width, height, format, type);\n}\n\nfunction createTextureDOM(gl, directData, width, height, format, type) {\n  var tex = initTexture(gl);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, format, type, directData);\n  return new Texture2D(gl, tex, width, height, format, type);\n} //Creates a texture from an ndarray\n\n\nfunction createTextureArray(gl, array) {\n  var dtype = array.dtype;\n  var shape = array.shape.slice();\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n  if (shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size');\n  }\n\n  var packed = isPacked(shape, array.stride.slice());\n  var type = 0;\n\n  if (dtype === 'float32') {\n    type = gl.FLOAT;\n  } else if (dtype === 'float64') {\n    type = gl.FLOAT;\n    packed = false;\n    dtype = 'float32';\n  } else if (dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE;\n  } else {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n    dtype = 'uint8';\n  }\n\n  var format = 0;\n\n  if (shape.length === 2) {\n    format = gl.LUMINANCE;\n    shape = [shape[0], shape[1], 1];\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset);\n  } else if (shape.length === 3) {\n    if (shape[2] === 1) {\n      format = gl.ALPHA;\n    } else if (shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA;\n    } else if (shape[2] === 3) {\n      format = gl.RGB;\n    } else if (shape[2] === 4) {\n      format = gl.RGBA;\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords');\n    }\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture');\n  }\n\n  if (type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n  }\n\n  var buffer, buf_store;\n  var size = array.size;\n\n  if (!packed) {\n    var stride = [shape[2], shape[2] * shape[0], 1];\n    buf_store = pool.malloc(size, dtype);\n    var buf_array = ndarray(buf_store, shape, stride, 0);\n\n    if ((dtype === 'float32' || dtype === 'float64') && type === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(buf_array, array);\n    } else {\n      ops.assign(buf_array, array);\n    }\n\n    buffer = buf_store.subarray(0, size);\n  } else if (array.offset === 0 && array.data.length === size) {\n    buffer = array.data;\n  } else {\n    buffer = array.data.subarray(array.offset, array.offset + size);\n  }\n\n  var tex = initTexture(gl);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[0], shape[1], 0, format, type, buffer);\n\n  if (!packed) {\n    pool.free(buf_store);\n  }\n\n  return new Texture2D(gl, tex, shape[0], shape[1], format, type);\n}\n\nfunction createTexture2D(gl) {\n  if (arguments.length <= 1) {\n    throw new Error('gl-texture2d: Missing arguments for texture2d constructor');\n  }\n\n  if (!linearTypes) {\n    lazyInitLinearTypes(gl);\n  }\n\n  if (typeof arguments[1] === 'number') {\n    return createTextureShape(gl, arguments[1], arguments[2], arguments[3] || gl.RGBA, arguments[4] || gl.UNSIGNED_BYTE);\n  }\n\n  if (Array.isArray(arguments[1])) {\n    return createTextureShape(gl, arguments[1][0] | 0, arguments[1][1] | 0, arguments[2] || gl.RGBA, arguments[3] || gl.UNSIGNED_BYTE);\n  }\n\n  if (typeof arguments[1] === 'object') {\n    var obj = arguments[1];\n    var directData = acceptTextureDOM(obj) ? obj : obj.raw;\n\n    if (directData) {\n      return createTextureDOM(gl, directData, obj.width | 0, obj.height | 0, arguments[2] || gl.RGBA, arguments[3] || gl.UNSIGNED_BYTE);\n    } else if (obj.shape && obj.data && obj.stride) {\n      return createTextureArray(gl, obj);\n    }\n  }\n\n  throw new Error('gl-texture2d: Invalid arguments for texture2d constructor');\n}","map":{"version":3,"names":["ndarray","require","ops","pool","module","exports","createTexture2D","linearTypes","filterTypes","wrapTypes","lazyInitLinearTypes","gl","LINEAR","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","NEAREST","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","acceptTextureDOM","obj","HTMLCanvasElement","HTMLImageElement","HTMLVideoElement","ImageData","convertFloatToUint8","out","inp","muls","reshapeTexture","tex","w","h","maxSize","getParameter","MAX_TEXTURE_SIZE","Error","_shape","bind","texImage2D","TEXTURE_2D","format","type","_mipLevels","Texture2D","handle","width","height","_magFilter","_minFilter","_wrapS","_wrapT","_anisoSamples","parent","wrapVector","Object","defineProperties","get","set","v","wrapS","wrapT","_wrapVector","shapeVector","_shapeVector","proto","prototype","minFilter","FLOAT","indexOf","getExtension","texParameteri","TEXTURE_MIN_FILTER","magFilter","TEXTURE_MAG_FILTER","mipSamples","i","psamples","Math","max","ext","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_WRAP_S","TEXTURE_WRAP_T","wrap","Array","isArray","length","shape","x","unit","undefined","activeTexture","TEXTURE0","bindTexture","ACTIVE_TEXTURE","dispose","deleteTexture","generateMipmap","l","min","push","setPixels","data","x_off","y_off","mip_level","directData","raw","needsMip","texSubImage2D","stride","texSubImageArray","isPacked","cformat","ctype","mipLevels","array","dtype","slice","packed","UNSIGNED_BYTE","channels","LUMINANCE","offset","ALPHA","LUMINANCE_ALPHA","RGB","RGBA","size","subarray","pack_buffer","mallocFloat32","mallocUint8","pack_view","assign","freeFloat32","freeUint8","initTexture","createTexture","createTextureShape","maxTextureSize","createTextureDOM","createTextureArray","buffer","buf_store","malloc","buf_array","free","arguments"],"sources":["D:/projects/test-game/node_modules/gl-texture2d/texture.js"],"sourcesContent":["'use strict'\n\nvar ndarray = require('ndarray')\nvar ops     = require('ndarray-ops')\nvar pool    = require('typedarray-pool')\n\nmodule.exports = createTexture2D\n\nvar linearTypes = null\nvar filterTypes = null\nvar wrapTypes   = null\n\nfunction lazyInitLinearTypes(gl) {\n  linearTypes = [\n    gl.LINEAR,\n    gl.NEAREST_MIPMAP_LINEAR,\n    gl.LINEAR_MIPMAP_NEAREST,\n    gl.LINEAR_MIPMAP_NEAREST\n  ]\n  filterTypes = [\n    gl.NEAREST,\n    gl.LINEAR,\n    gl.NEAREST_MIPMAP_NEAREST,\n    gl.NEAREST_MIPMAP_LINEAR,\n    gl.LINEAR_MIPMAP_NEAREST,\n    gl.LINEAR_MIPMAP_LINEAR\n  ]\n  wrapTypes = [\n    gl.REPEAT,\n    gl.CLAMP_TO_EDGE,\n    gl.MIRRORED_REPEAT\n  ]\n}\n\nfunction acceptTextureDOM (obj) {\n  return (\n    ('undefined' != typeof HTMLCanvasElement && obj instanceof HTMLCanvasElement) ||\n    ('undefined' != typeof HTMLImageElement && obj instanceof HTMLImageElement) ||\n    ('undefined' != typeof HTMLVideoElement && obj instanceof HTMLVideoElement) ||\n    ('undefined' != typeof ImageData && obj instanceof ImageData))\n}\n\nvar convertFloatToUint8 = function(out, inp) {\n  ops.muls(out, inp, 255.0)\n}\n\nfunction reshapeTexture(tex, w, h) {\n  var gl = tex.gl\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n  if(w < 0 || w > maxSize || h < 0 || h > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size')\n  }\n  tex._shape = [w, h]\n  tex.bind()\n  gl.texImage2D(gl.TEXTURE_2D, 0, tex.format, w, h, 0, tex.format, tex.type, null)\n  tex._mipLevels = [0]\n  return tex\n}\n\nfunction Texture2D(gl, handle, width, height, format, type) {\n  this.gl = gl\n  this.handle = handle\n  this.format = format\n  this.type = type\n  this._shape = [width, height]\n  this._mipLevels = [0]\n  this._magFilter = gl.NEAREST\n  this._minFilter = gl.NEAREST\n  this._wrapS = gl.CLAMP_TO_EDGE\n  this._wrapT = gl.CLAMP_TO_EDGE\n  this._anisoSamples = 1\n\n  var parent = this\n  var wrapVector = [this._wrapS, this._wrapT]\n  Object.defineProperties(wrapVector, [\n    {\n      get: function() {\n        return parent._wrapS\n      },\n      set: function(v) {\n        return parent.wrapS = v\n      }\n    },\n    {\n      get: function() {\n        return parent._wrapT\n      },\n      set: function(v) {\n        return parent.wrapT = v\n      }\n    }\n  ])\n  this._wrapVector = wrapVector\n\n  var shapeVector = [this._shape[0], this._shape[1]]\n  Object.defineProperties(shapeVector, [\n    {\n      get: function() {\n        return parent._shape[0]\n      },\n      set: function(v) {\n        return parent.width = v\n      }\n    },\n    {\n      get: function() {\n        return parent._shape[1]\n      },\n      set: function(v) {\n        return parent.height = v\n      }\n    }\n  ])\n  this._shapeVector = shapeVector\n}\n\nvar proto = Texture2D.prototype\n\nObject.defineProperties(proto, {\n  minFilter: {\n    get: function() {\n      return this._minFilter\n    },\n    set: function(v) {\n      this.bind()\n      var gl = this.gl\n      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if(!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST\n        }\n      }\n      if(filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v)\n      }\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, v)\n      return this._minFilter = v\n    }\n  },\n  magFilter: {\n    get: function() {\n      return this._magFilter\n    },\n    set: function(v) {\n      this.bind()\n      var gl = this.gl\n      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if(!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST\n        }\n      }\n      if(filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v)\n      }\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, v)\n      return this._magFilter = v\n    }\n  },\n  mipSamples: {\n    get: function() {\n      return this._anisoSamples\n    },\n    set: function(i) {\n      var psamples = this._anisoSamples\n      this._anisoSamples = Math.max(i, 1)|0\n      if(psamples !== this._anisoSamples) {\n        var ext = this.gl.getExtension('EXT_texture_filter_anisotropic')\n        if(ext) {\n          this.gl.texParameterf(this.gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisoSamples)\n        }\n      }\n      return this._anisoSamples\n    }\n  },\n  wrapS: {\n    get: function() {\n      return this._wrapS\n    },\n    set: function(v) {\n      this.bind()\n      if(wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v)\n      }\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, v)\n      return this._wrapS = v\n    }\n  },\n  wrapT: {\n    get: function() {\n      return this._wrapT\n    },\n    set: function(v) {\n      this.bind()\n      if(wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v)\n      }\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, v)\n      return this._wrapT = v\n    }\n  },\n  wrap: {\n    get: function() {\n      return this._wrapVector\n    },\n    set: function(v) {\n      if(!Array.isArray(v)) {\n        v = [v,v]\n      }\n      if(v.length !== 2) {\n        throw new Error('gl-texture2d: Must specify wrap mode for rows and columns')\n      }\n      for(var i=0; i<2; ++i) {\n        if(wrapTypes.indexOf(v[i]) < 0) {\n          throw new Error('gl-texture2d: Unknown wrap mode ' + v)\n        }\n      }\n      this._wrapS = v[0]\n      this._wrapT = v[1]\n\n      var gl = this.gl\n      this.bind()\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS)\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT)\n\n      return v\n    }\n  },\n  shape: {\n    get: function() {\n      return this._shapeVector\n    },\n    set: function(x) {\n      if(!Array.isArray(x)) {\n        x = [x|0,x|0]\n      } else {\n        if(x.length !== 2) {\n          throw new Error('gl-texture2d: Invalid texture shape')\n        }\n      }\n      reshapeTexture(this, x[0]|0, x[1]|0)\n      return [x[0]|0, x[1]|0]\n    }\n  },\n  width: {\n    get: function() {\n      return this._shape[0]\n    },\n    set: function(w) {\n      w = w|0\n      reshapeTexture(this, w, this._shape[1])\n      return w\n    }\n  },\n  height: {\n    get: function() {\n      return this._shape[1]\n    },\n    set: function(h) {\n      h = h|0\n      reshapeTexture(this, this._shape[0], h)\n      return h\n    }\n  }\n})\n\nproto.bind = function(unit) {\n  var gl = this.gl\n  if(unit !== undefined) {\n    gl.activeTexture(gl.TEXTURE0 + (unit|0))\n  }\n  gl.bindTexture(gl.TEXTURE_2D, this.handle)\n  if(unit !== undefined) {\n    return (unit|0)\n  }\n  return gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0\n}\n\nproto.dispose = function() {\n  this.gl.deleteTexture(this.handle)\n}\n\nproto.generateMipmap = function() {\n  this.bind()\n  this.gl.generateMipmap(this.gl.TEXTURE_2D)\n\n  //Update mip levels\n  var l = Math.min(this._shape[0], this._shape[1])\n  for(var i=0; l>0; ++i, l>>>=1) {\n    if(this._mipLevels.indexOf(i) < 0) {\n      this._mipLevels.push(i)\n    }\n  }\n}\n\nproto.setPixels = function(data, x_off, y_off, mip_level) {\n  var gl = this.gl\n  this.bind()\n  if(Array.isArray(x_off)) {\n    mip_level = y_off\n    y_off = x_off[1]|0\n    x_off = x_off[0]|0\n  } else {\n    x_off = x_off || 0\n    y_off = y_off || 0\n  }\n  mip_level = mip_level || 0\n  var directData = acceptTextureDOM(data) ? data : data.raw\n  if(directData) {\n    var needsMip = this._mipLevels.indexOf(mip_level) < 0\n    if(needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, directData)\n      this._mipLevels.push(mip_level)\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, this.format, this.type, directData)\n    }\n  } else if(data.shape && data.stride && data.data) {\n    if(data.shape.length < 2 ||\n       x_off + data.shape[1] > this._shape[1]>>>mip_level ||\n       y_off + data.shape[0] > this._shape[0]>>>mip_level ||\n       x_off < 0 ||\n       y_off < 0) {\n      throw new Error('gl-texture2d: Texture dimensions are out of bounds')\n    }\n    texSubImageArray(gl, x_off, y_off, mip_level, this.format, this.type, this._mipLevels, data)\n  } else {\n    throw new Error('gl-texture2d: Unsupported data type')\n  }\n}\n\n\nfunction isPacked(shape, stride) {\n  if(shape.length === 3) {\n    return  (stride[2] === 1) &&\n            (stride[1] === shape[0]*shape[2]) &&\n            (stride[0] === shape[2])\n  }\n  return  (stride[0] === 1) &&\n          (stride[1] === shape[0])\n}\n\nfunction texSubImageArray(gl, x_off, y_off, mip_level, cformat, ctype, mipLevels, array) {\n  var dtype = array.dtype\n  var shape = array.shape.slice()\n  if(shape.length < 2 || shape.length > 3) {\n    throw new Error('gl-texture2d: Invalid ndarray, must be 2d or 3d')\n  }\n  var type = 0, format = 0\n  var packed = isPacked(shape, array.stride.slice())\n  if(dtype === 'float32') {\n    type = gl.FLOAT\n  } else if(dtype === 'float64') {\n    type = gl.FLOAT\n    packed = false\n    dtype = 'float32'\n  } else if(dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE\n  } else {\n    type = gl.UNSIGNED_BYTE\n    packed = false\n    dtype = 'uint8'\n  }\n  var channels = 1\n  if(shape.length === 2) {\n    format = gl.LUMINANCE\n    shape = [shape[0], shape[1], 1]\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)\n  } else if(shape.length === 3) {\n    if(shape[2] === 1) {\n      format = gl.ALPHA\n    } else if(shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA\n    } else if(shape[2] === 3) {\n      format = gl.RGB\n    } else if(shape[2] === 4) {\n      format = gl.RGBA\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords')\n    }\n    channels = shape[2]\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture')\n  }\n  //For 1-channel textures allow conversion between formats\n  if((format  === gl.LUMINANCE || format  === gl.ALPHA) &&\n     (cformat === gl.LUMINANCE || cformat === gl.ALPHA)) {\n    format = cformat\n  }\n  if(format !== cformat) {\n    throw new Error('gl-texture2d: Incompatible texture format for setPixels')\n  }\n  var size = array.size\n  var needsMip = mipLevels.indexOf(mip_level) < 0\n  if(needsMip) {\n    mipLevels.push(mip_level)\n  }\n  if(type === ctype && packed) {\n    //Array data types are compatible, can directly copy into texture\n    if(array.offset === 0 && array.data.length === size) {\n      if(needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data)\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data)\n      }\n    } else {\n      if(needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data.subarray(array.offset, array.offset+size))\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data.subarray(array.offset, array.offset+size))\n      }\n    }\n  } else {\n    //Need to do type conversion to pack data into buffer\n    var pack_buffer\n    if(ctype === gl.FLOAT) {\n      pack_buffer = pool.mallocFloat32(size)\n    } else {\n      pack_buffer = pool.mallocUint8(size)\n    }\n    var pack_view = ndarray(pack_buffer, shape, [shape[2], shape[2]*shape[0], 1])\n    if(type === gl.FLOAT && ctype === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(pack_view, array)\n    } else {\n      ops.assign(pack_view, array)\n    }\n    if(needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, pack_buffer.subarray(0, size))\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, pack_buffer.subarray(0, size))\n    }\n    if(ctype === gl.FLOAT) {\n      pool.freeFloat32(pack_buffer)\n    } else {\n      pool.freeUint8(pack_buffer)\n    }\n  }\n}\n\nfunction initTexture(gl) {\n  var tex = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, tex)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  return tex\n}\n\nfunction createTextureShape(gl, width, height, format, type) {\n  var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n  if(width < 0 || width > maxTextureSize || height < 0 || height  > maxTextureSize) {\n    throw new Error('gl-texture2d: Invalid texture shape')\n  }\n  if(type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    throw new Error('gl-texture2d: Floating point textures not supported on this platform')\n  }\n  var tex = initTexture(gl)\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null)\n  return new Texture2D(gl, tex, width, height, format, type)\n}\n\nfunction createTextureDOM(gl, directData, width, height, format, type) {\n  var tex = initTexture(gl)\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, format, type, directData)\n  return new Texture2D(gl, tex, width, height, format, type)\n}\n\n//Creates a texture from an ndarray\nfunction createTextureArray(gl, array) {\n  var dtype = array.dtype\n  var shape = array.shape.slice()\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n  if(shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size')\n  }\n  var packed = isPacked(shape, array.stride.slice())\n  var type = 0\n  if(dtype === 'float32') {\n    type = gl.FLOAT\n  } else if(dtype === 'float64') {\n    type = gl.FLOAT\n    packed = false\n    dtype = 'float32'\n  } else if(dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE\n  } else {\n    type = gl.UNSIGNED_BYTE\n    packed = false\n    dtype = 'uint8'\n  }\n  var format = 0\n  if(shape.length === 2) {\n    format = gl.LUMINANCE\n    shape = [shape[0], shape[1], 1]\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)\n  } else if(shape.length === 3) {\n    if(shape[2] === 1) {\n      format = gl.ALPHA\n    } else if(shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA\n    } else if(shape[2] === 3) {\n      format = gl.RGB\n    } else if(shape[2] === 4) {\n      format = gl.RGBA\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords')\n    }\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture')\n  }\n  if(type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    type = gl.UNSIGNED_BYTE\n    packed = false\n  }\n  var buffer, buf_store\n  var size = array.size\n  if(!packed) {\n    var stride = [shape[2], shape[2]*shape[0], 1]\n    buf_store = pool.malloc(size, dtype)\n    var buf_array = ndarray(buf_store, shape, stride, 0)\n    if((dtype === 'float32' || dtype === 'float64') && type === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(buf_array, array)\n    } else {\n      ops.assign(buf_array, array)\n    }\n    buffer = buf_store.subarray(0, size)\n  } else if (array.offset === 0 && array.data.length === size) {\n    buffer = array.data\n  } else {\n    buffer = array.data.subarray(array.offset, array.offset + size)\n  }\n  var tex = initTexture(gl)\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[0], shape[1], 0, format, type, buffer)\n  if(!packed) {\n    pool.free(buf_store)\n  }\n  return new Texture2D(gl, tex, shape[0], shape[1], format, type)\n}\n\nfunction createTexture2D(gl) {\n  if(arguments.length <= 1) {\n    throw new Error('gl-texture2d: Missing arguments for texture2d constructor')\n  }\n  if(!linearTypes) {\n    lazyInitLinearTypes(gl)\n  }\n  if(typeof arguments[1] === 'number') {\n    return createTextureShape(gl, arguments[1], arguments[2], arguments[3]||gl.RGBA, arguments[4]||gl.UNSIGNED_BYTE)\n  }\n  if(Array.isArray(arguments[1])) {\n    return createTextureShape(gl, arguments[1][0]|0, arguments[1][1]|0, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)\n  }\n  if(typeof arguments[1] === 'object') {\n    var obj = arguments[1]\n    var directData = acceptTextureDOM(obj) ? obj : obj.raw\n    if (directData) {\n      return createTextureDOM(gl, directData, obj.width|0, obj.height|0, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)\n    } else if(obj.shape && obj.data && obj.stride) {\n      return createTextureArray(gl, obj)\n    }\n  }\n  throw new Error('gl-texture2d: Invalid arguments for texture2d constructor')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}