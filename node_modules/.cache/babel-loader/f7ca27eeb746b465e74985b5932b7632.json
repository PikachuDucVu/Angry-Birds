{"ast":null,"code":"import _initializerDefineProperty from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;\n\nimport { b2BodyType } from \"box2d.ts\";\nimport { System, Inject } from \"flat-ecs\";\nimport { InputEvent } from \"gdxts\";\nimport { Constants } from \"../Constants\";\nexport let SlingshotRenderSystem = (_dec = Inject(\"inputHandler\"), _dec2 = Inject(\"assetManager\"), _dec3 = Inject(\"batch\"), _dec4 = Inject(\"slingPos\"), _dec5 = Inject(\"originPosition\"), _dec6 = Inject(\"bird\"), (_class = class SlingshotRenderSystem extends System {\n  constructor() {\n    super(...arguments);\n    this.slingShot = void 0;\n\n    _initializerDefineProperty(this, \"inputHandler\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"assetManager\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"batch\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"slingPos\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"originPosition\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"bird\", _descriptor6, this);\n  }\n\n  initialized() {\n    this.slingShot = this.assetManager.getTexture(\"slingShot\");\n    this.inputHandler.addEventListener(InputEvent.TouchMove, () => {\n      if (this.inputHandler.isTouched()) {\n        this.slingPos = this.inputHandler.getTouchedWorldCoord();\n      }\n    });\n    this.inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n      this.bird.SetType(b2BodyType.b2_dynamicBody);\n      this.bird.ApplyLinearImpulseToCenter({\n        x: 7 * (this.originPosition.x - this.slingPos.x) / Constants.METER_TO_WORLD,\n        y: 7 * (this.originPosition.y - this.slingPos.y) / Constants.METER_TO_WORLD\n      }, true);\n    });\n  }\n\n  process() {\n    this.batch.begin();\n    this.batch.draw(this.slingShot, 2 * Constants.METER_TO_WORLD, 3.5 * Constants.METER_TO_WORLD, 0.25 * Constants.METER_TO_WORLD, 0.7 * Constants.METER_TO_WORLD);\n    this.batch.end();\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"inputHandler\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"assetManager\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"batch\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"slingPos\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"originPosition\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"bird\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));","map":{"version":3,"names":["b2BodyType","System","Inject","InputEvent","Constants","SlingshotRenderSystem","slingShot","initialized","assetManager","getTexture","inputHandler","addEventListener","TouchMove","isTouched","slingPos","getTouchedWorldCoord","TouchEnd","bird","SetType","b2_dynamicBody","ApplyLinearImpulseToCenter","x","originPosition","METER_TO_WORLD","y","process","batch","begin","draw","end"],"sources":["D:/projects/test-game/src/system/SlingshotRenderSystem.ts"],"sourcesContent":["import { b2Body, b2BodyType } from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  InputEvent,\r\n  PolygonBatch,\r\n  Texture,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class SlingshotRenderSystem extends System {\r\n  slingShot: Texture;\r\n\r\n  @Inject(\"inputHandler\") inputHandler: ViewportInputHandler;\r\n  @Inject(\"assetManager\") assetManager: AssetManager;\r\n  @Inject(\"batch\") batch: PolygonBatch;\r\n  @Inject(\"slingPos\") slingPos: Vector2;\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"bird\") bird: b2Body;\r\n  initialized() {\r\n    this.slingShot = this.assetManager.getTexture(\"slingShot\") as Texture;\r\n    this.inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n      if (this.inputHandler.isTouched()) {\r\n        this.slingPos = this.inputHandler.getTouchedWorldCoord();\r\n      }\r\n    });\r\n    this.inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n      this.bird.SetType(b2BodyType.b2_dynamicBody);\r\n      this.bird.ApplyLinearImpulseToCenter(\r\n        {\r\n          x:\r\n            (7 * (this.originPosition.x - this.slingPos.x)) /\r\n            Constants.METER_TO_WORLD,\r\n          y:\r\n            (7 * (this.originPosition.y - this.slingPos.y)) /\r\n            Constants.METER_TO_WORLD,\r\n        },\r\n        true\r\n      );\r\n    });\r\n  }\r\n\r\n  process(): void {\r\n    this.batch.begin();\r\n    this.batch.draw(\r\n      this.slingShot,\r\n      2 * Constants.METER_TO_WORLD,\r\n      3.5 * Constants.METER_TO_WORLD,\r\n      0.25 * Constants.METER_TO_WORLD,\r\n      0.7 * Constants.METER_TO_WORLD\r\n    );\r\n    this.batch.end();\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,SAAiBA,UAAjB,QAAmC,UAAnC;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,UAA/B;AACA,SAEEC,UAFF,QAOO,OAPP;AAQA,SAASC,SAAT,QAA0B,cAA1B;AAEA,WAAaC,qBAAb,WAGGH,MAAM,CAAC,cAAD,CAHT,UAIGA,MAAM,CAAC,cAAD,CAJT,UAKGA,MAAM,CAAC,OAAD,CALT,UAMGA,MAAM,CAAC,UAAD,CANT,UAOGA,MAAM,CAAC,gBAAD,CAPT,UAQGA,MAAM,CAAC,MAAD,CART,YAAO,MAAMG,qBAAN,SAAoCJ,MAApC,CAA2C;EAAA;IAAA;IAAA,KAChDK,SADgD;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;EAAA;;EAShDC,WAAW,GAAG;IACZ,KAAKD,SAAL,GAAiB,KAAKE,YAAL,CAAkBC,UAAlB,CAA6B,WAA7B,CAAjB;IACA,KAAKC,YAAL,CAAkBC,gBAAlB,CAAmCR,UAAU,CAACS,SAA9C,EAAyD,MAAM;MAC7D,IAAI,KAAKF,YAAL,CAAkBG,SAAlB,EAAJ,EAAmC;QACjC,KAAKC,QAAL,GAAgB,KAAKJ,YAAL,CAAkBK,oBAAlB,EAAhB;MACD;IACF,CAJD;IAKA,KAAKL,YAAL,CAAkBC,gBAAlB,CAAmCR,UAAU,CAACa,QAA9C,EAAwD,MAAM;MAC5D,KAAKC,IAAL,CAAUC,OAAV,CAAkBlB,UAAU,CAACmB,cAA7B;MACA,KAAKF,IAAL,CAAUG,0BAAV,CACE;QACEC,CAAC,EACE,KAAK,KAAKC,cAAL,CAAoBD,CAApB,GAAwB,KAAKP,QAAL,CAAcO,CAA3C,CAAD,GACAjB,SAAS,CAACmB,cAHd;QAIEC,CAAC,EACE,KAAK,KAAKF,cAAL,CAAoBE,CAApB,GAAwB,KAAKV,QAAL,CAAcU,CAA3C,CAAD,GACApB,SAAS,CAACmB;MANd,CADF,EASE,IATF;IAWD,CAbD;EAcD;;EAEDE,OAAO,GAAS;IACd,KAAKC,KAAL,CAAWC,KAAX;IACA,KAAKD,KAAL,CAAWE,IAAX,CACE,KAAKtB,SADP,EAEE,IAAIF,SAAS,CAACmB,cAFhB,EAGE,MAAMnB,SAAS,CAACmB,cAHlB,EAIE,OAAOnB,SAAS,CAACmB,cAJnB,EAKE,MAAMnB,SAAS,CAACmB,cALlB;IAOA,KAAKG,KAAL,CAAWG,GAAX;EACD;;AA1C+C,CAAlD;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}