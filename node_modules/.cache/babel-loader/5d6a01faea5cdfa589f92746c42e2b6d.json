{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, ViewportInputHandler } from \"gdxts\";\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1000, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport);\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000);\n    shapeRenderer.end(); //draw background\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background, 0, 0, 1000, 2000);\n    batch.end();\n  });\n};","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","ViewportInputHandler","init","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","inputHandler","background","load","getRandomInt","min","max","Math","floor","random","delta","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end","draw"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\n  createGameLoop,\n  createStage,\n  createViewport,\n  InputEvent,\n  PolygonBatch,\n  ShapeRenderer,\n  Texture,\n  Vector2,\n  ViewportInputHandler,\n  BitmapFont,\n  TextureRegion,\n  Animation,\n  PlayMode,\n} from \"gdxts\";\n\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1000, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport);\n\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n\n  function getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  createGameLoop((delta: number) => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000);\n    shapeRenderer.end();\n    //draw background\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background, 0, 0, 1000, 2000);\n    batch.end();\n  });\n};\n"],"mappings":"AAAA,SACEA,cADF,EAEEC,WAFF,EAGEC,cAHF,EAKEC,YALF,EAMEC,aANF,EAOEC,OAPF,EASEC,oBATF,QAcO,OAdP;AAgBA,OAAO,MAAMC,IAAI,GAAG,YAAY;EAC9B,MAAMC,KAAK,GAAGP,WAAW,EAAzB;EACA,MAAMQ,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;EACA,MAAMC,QAAQ,GAAGT,cAAc,CAACO,MAAD,EAAS,IAAT,EAAe,IAAf,CAA/B;EACA,MAAMG,EAAE,GAAGD,QAAQ,CAACE,UAAT,EAAX;EACA,MAAMC,aAAa,GAAG,IAAIV,aAAJ,CAAkBQ,EAAlB,CAAtB;EACA,MAAMG,KAAK,GAAG,IAAIZ,YAAJ,CAAiBS,EAAjB,CAAd;EACA,MAAMI,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;EACA,MAAMC,YAAY,GAAG,IAAIZ,oBAAJ,CAAyBK,QAAzB,CAArB;EAEA,MAAMQ,UAAU,GAAG,MAAMd,OAAO,CAACe,IAAR,CAAaR,EAAb,EAAiB,gBAAjB,CAAzB;;EAEA,SAASS,YAAT,CAAsBC,GAAtB,EAAmCC,GAAnC,EAAgD;IAC9C,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;EACD;;EAEDtB,cAAc,CAAE2B,KAAD,IAAmB;IAChCf,EAAE,CAACgB,KAAH,CAAShB,EAAE,CAACiB,gBAAZ;IACAf,aAAa,CAACgB,aAAd,CAA4Bd,MAAM,CAACe,cAAP,CAAsBC,MAAlD;IACAlB,aAAa,CAACmB,KAAd;IACAnB,aAAa,CAACoB,IAAd,CAAmB,IAAnB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,IAA/B,EAAqC,IAArC;IACApB,aAAa,CAACqB,GAAd,GALgC,CAMhC;;IACApB,KAAK,CAACe,aAAN,CAAoBd,MAAM,CAACe,cAAP,CAAsBC,MAA1C;IACAjB,KAAK,CAACkB,KAAN;IACAlB,KAAK,CAACqB,IAAN,CAAWjB,UAAX,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,IAA7B,EAAmC,IAAnC;IACAJ,KAAK,CAACoB,GAAN;EACD,CAXa,CAAd;AAYD,CA5BM"},"metadata":{},"sourceType":"module"}