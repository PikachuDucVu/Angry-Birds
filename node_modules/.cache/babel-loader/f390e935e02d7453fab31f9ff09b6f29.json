{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BoundingBox = void 0;\n\nconst Vector3_1 = require(\"./Vector3\");\n\nclass BoundingBox {\n  /** Constructs a new bounding box with the minimum and maximum vector set to zeros. */\n  constructor() {\n    this.min = new Vector3_1.Vector3();\n    this.max = new Vector3_1.Vector3();\n    this.cnt = new Vector3_1.Vector3();\n    this.dim = new Vector3_1.Vector3();\n    this.clr();\n  }\n\n  getCenter(out) {\n    return out.setFrom(this.cnt);\n  }\n\n  getCenterX() {\n    return this.cnt.x;\n  }\n\n  getCenterY() {\n    return this.cnt.y;\n  }\n\n  getCenterZ() {\n    return this.cnt.z;\n  }\n\n  getCorner000(out) {\n    return out.set(this.min.x, this.min.y, this.min.z);\n  }\n\n  getCorner001(out) {\n    return out.set(this.min.x, this.min.y, this.max.z);\n  }\n\n  getCorner010(out) {\n    return out.set(this.min.x, this.max.y, this.min.z);\n  }\n\n  getCorner011(out) {\n    return out.set(this.min.x, this.max.y, this.max.z);\n  }\n\n  getCorner100(out) {\n    return out.set(this.max.x, this.min.y, this.min.z);\n  }\n\n  getCorner101(out) {\n    return out.set(this.max.x, this.min.y, this.max.z);\n  }\n\n  getCorner110(out) {\n    return out.set(this.max.x, this.max.y, this.min.z);\n  }\n\n  getCorner111(out) {\n    return out.set(this.max.x, this.max.y, this.max.z);\n  }\n  /** @param out The {@link Vector3} to receive the dimensions of this bounding box on all three axis.\r\n   * @return The vector specified with the out argument */\n\n\n  getDimensions(out) {\n    return out.setFrom(this.dim);\n  }\n\n  getWidth() {\n    return this.dim.x;\n  }\n\n  getHeight() {\n    return this.dim.y;\n  }\n\n  getDepth() {\n    return this.dim.z;\n  }\n  /** @param out The {@link Vector3} to receive the minimum values.\r\n   * @return The vector specified with the out argument */\n\n\n  getMin(out) {\n    return out.setFrom(this.min);\n  }\n  /** @param out The {@link Vector3} to receive the maximum values.\r\n   * @return The vector specified with the out argument */\n\n\n  getMax(out) {\n    return out.setFrom(this.max);\n  }\n  /** Sets the given bounding box.\r\n   *\r\n   * @param bounds The bounds.\r\n   * @return This bounding box for chaining. */\n\n\n  setFromBounds(bounds) {\n    return this.set(bounds.min, bounds.max);\n  }\n  /** Sets the given minimum and maximum vector.\r\n   *\r\n   * @param minimum The minimum vector\r\n   * @param maximum The maximum vector\r\n   * @return This bounding box for chaining. */\n\n\n  set(minimum, maximum) {\n    this.min.set(minimum.x < maximum.x ? minimum.x : maximum.x, minimum.y < maximum.y ? minimum.y : maximum.y, minimum.z < maximum.z ? minimum.z : maximum.z);\n    this.max.set(minimum.x > maximum.x ? minimum.x : maximum.x, minimum.y > maximum.y ? minimum.y : maximum.y, minimum.z > maximum.z ? minimum.z : maximum.z);\n    this.update();\n    return this;\n  }\n\n  update() {\n    this.cnt.setFrom(this.min).add(this.max).scale(0.5);\n    this.dim.setFrom(this.max).sub(this.min);\n  }\n  /** Sets the bounding box minimum and maximum vector from the given points.\r\n   *\r\n   * @param points The points.\r\n   * @return This bounding box for chaining. */\n\n\n  setFromPoints(points) {\n    this.inf();\n\n    for (let l_point of points) this.extPoint(l_point);\n\n    return this;\n  }\n  /** Sets the minimum and maximum vector to positive and negative infinity.\r\n   *\r\n   * @return This bounding box for chaining. */\n\n\n  inf() {\n    this.min.set(Infinity, Infinity, Infinity);\n    this.max.set(-Infinity, -Infinity, -Infinity);\n    this.cnt.set(0, 0, 0);\n    this.dim.set(0, 0, 0);\n    return this;\n  }\n  /** Extends the bounding box to incorporate the given {@link Vector3}.\r\n   * @param point The vector\r\n   * @return This bounding box for chaining. */\n\n\n  extPoint(point) {\n    return this.set(this.min.set(Math.min(this.min.x, point.x), Math.min(this.min.y, point.y), Math.min(this.min.z, point.z)), this.max.set(Math.max(this.max.x, point.x), Math.max(this.max.y, point.y), Math.max(this.max.z, point.z)));\n  }\n  /** Sets the minimum and maximum vector to zeros.\r\n   * @return This bounding box for chaining. */\n\n\n  clr() {\n    return this.set(this.min.set(0, 0, 0), this.max.set(0, 0, 0));\n  }\n  /** Returns whether this bounding box is valid. This means that {@link #max} is greater than or equal to {@link #min}.\r\n   * @return True in case the bounding box is valid, false otherwise */\n\n\n  isValid() {\n    return this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z;\n  }\n  /** Extends this bounding box by the given bounding box.\r\n   *\r\n   * @param a_bounds The bounding box\r\n   * @return This bounding box for chaining. */\n\n\n  extBounds(a_bounds) {\n    return this.set(this.min.set(Math.min(this.min.x, a_bounds.min.x), Math.min(this.min.y, a_bounds.min.y), Math.min(this.min.z, a_bounds.min.z)), this.max.set(Math.max(this.max.x, a_bounds.max.x), Math.max(this.max.y, a_bounds.max.y), Math.max(this.max.z, a_bounds.max.z)));\n  }\n  /** Extends this bounding box by the given sphere.\r\n   *\r\n   * @param center Sphere center\r\n   * @param radius Sphere radius\r\n   * @return This bounding box for chaining. */\n\n\n  extSphere(center, radius) {\n    return this.set(this.min.set(Math.min(this.min.x, center.x - radius), Math.min(this.min.y, center.y - radius), Math.min(this.min.z, center.z - radius)), this.max.set(Math.max(this.max.x, center.x + radius), Math.max(this.max.y, center.y + radius), Math.max(this.max.z, center.z + radius)));\n  }\n  /** Extends this bounding box by the given transformed bounding box.\r\n   *\r\n   * @param bounds The bounding box\r\n   * @param transform The transformation matrix to apply to bounds, before using it to extend this bounding box.\r\n   * @return This bounding box for chaining. */\n\n\n  extTransformedBox(bounds, transform) {\n    this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.min.y, bounds.min.z).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.min.y, bounds.max.z).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.max.y, bounds.min.z).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.max.y, bounds.max.z).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.min.y, bounds.min.z).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.min.y, bounds.max.z).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.max.y, bounds.min.z).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.max.y, bounds.max.z).multiply(transform));\n    return this;\n  }\n  /** Multiplies the bounding box by the given matrix. This is achieved by multiplying the 8 corner points and then calculating\r\n   * the minimum and maximum vectors from the transformed points.\r\n   *\r\n   * @param transform The matrix\r\n   * @return This bounding box for chaining. */\n\n\n  mul(transform) {\n    let x0 = this.min.x,\n        y0 = this.min.y,\n        z0 = this.min.z,\n        x1 = this.max.x,\n        y1 = this.max.y,\n        z1 = this.max.z;\n    this.inf();\n    this.extPoint(BoundingBox.tmpVector.set(x0, y0, z0).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(x0, y0, z1).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(x0, y1, z0).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(x0, y1, z1).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(x1, y0, z0).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(x1, y0, z1).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(x1, y1, z0).multiply(transform));\n    this.extPoint(BoundingBox.tmpVector.set(x1, y1, z1).multiply(transform));\n    return this;\n  }\n  /** Returns whether the given bounding box is contained in this bounding box.\r\n   * @param b The bounding box\r\n   * @return Whether the given bounding box is contained */\n\n\n  containsBounds(b) {\n    return !this.isValid() || this.min.x <= b.min.x && this.min.y <= b.min.y && this.min.z <= b.min.z && this.max.x >= b.max.x && this.max.y >= b.max.y && this.max.z >= b.max.z;\n  }\n  /** Returns whether the given bounding box is intersecting this bounding box (at least one point in).\r\n   * @param b The bounding box\r\n   * @return Whether the given bounding box is intersected */\n\n\n  intersects(b) {\n    if (!this.isValid()) return false; // test using SAT (separating axis theorem)\n\n    const lx = Math.abs(this.cnt.x - b.cnt.x);\n    const sumx = this.dim.x / 2.0 + b.dim.x / 2.0;\n    const ly = Math.abs(this.cnt.y - b.cnt.y);\n    const sumy = this.dim.y / 2.0 + b.dim.y / 2.0;\n    const lz = Math.abs(this.cnt.z - b.cnt.z);\n    const sumz = this.dim.z / 2.0 + b.dim.z / 2.0;\n    return lx <= sumx && ly <= sumy && lz <= sumz;\n  }\n  /** Returns whether the given vector is contained in this bounding box.\r\n   * @param v The vector\r\n   * @return Whether the vector is contained or not. */\n\n\n  containsPoint(v) {\n    return this.min.x <= v.x && this.max.x >= v.x && this.min.y <= v.y && this.max.y >= v.y && this.min.z <= v.z && this.max.z >= v.z;\n  }\n  /** Extends the bounding box by the given vector.\r\n   *\r\n   * @param x The x-coordinate\r\n   * @param y The y-coordinate\r\n   * @param z The z-coordinate\r\n   * @return This bounding box for chaining. */\n\n\n  ext(x, y, z) {\n    return this.set(this.min.set(Math.min(this.min.x, x), Math.min(this.min.y, y), Math.min(this.min.z, z)), this.max.set(Math.max(this.max.x, x), Math.max(this.max.y, y), Math.max(this.max.z, z)));\n  }\n\n}\n\nexports.BoundingBox = BoundingBox;\nBoundingBox.tmpVector = new Vector3_1.Vector3();","map":{"version":3,"names":["Object","defineProperty","exports","value","BoundingBox","Vector3_1","require","constructor","min","Vector3","max","cnt","dim","clr","getCenter","out","setFrom","getCenterX","x","getCenterY","y","getCenterZ","z","getCorner000","set","getCorner001","getCorner010","getCorner011","getCorner100","getCorner101","getCorner110","getCorner111","getDimensions","getWidth","getHeight","getDepth","getMin","getMax","setFromBounds","bounds","minimum","maximum","update","add","scale","sub","setFromPoints","points","inf","l_point","extPoint","Infinity","point","Math","isValid","extBounds","a_bounds","extSphere","center","radius","extTransformedBox","transform","tmpVector","multiply","mul","x0","y0","z0","x1","y1","z1","containsBounds","b","intersects","lx","abs","sumx","ly","sumy","lz","sumz","containsPoint","v","ext"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/BoundingBox.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BoundingBox = void 0;\r\nconst Vector3_1 = require(\"./Vector3\");\r\nclass BoundingBox {\r\n    /** Constructs a new bounding box with the minimum and maximum vector set to zeros. */\r\n    constructor() {\r\n        this.min = new Vector3_1.Vector3();\r\n        this.max = new Vector3_1.Vector3();\r\n        this.cnt = new Vector3_1.Vector3();\r\n        this.dim = new Vector3_1.Vector3();\r\n        this.clr();\r\n    }\r\n    getCenter(out) {\r\n        return out.setFrom(this.cnt);\r\n    }\r\n    getCenterX() {\r\n        return this.cnt.x;\r\n    }\r\n    getCenterY() {\r\n        return this.cnt.y;\r\n    }\r\n    getCenterZ() {\r\n        return this.cnt.z;\r\n    }\r\n    getCorner000(out) {\r\n        return out.set(this.min.x, this.min.y, this.min.z);\r\n    }\r\n    getCorner001(out) {\r\n        return out.set(this.min.x, this.min.y, this.max.z);\r\n    }\r\n    getCorner010(out) {\r\n        return out.set(this.min.x, this.max.y, this.min.z);\r\n    }\r\n    getCorner011(out) {\r\n        return out.set(this.min.x, this.max.y, this.max.z);\r\n    }\r\n    getCorner100(out) {\r\n        return out.set(this.max.x, this.min.y, this.min.z);\r\n    }\r\n    getCorner101(out) {\r\n        return out.set(this.max.x, this.min.y, this.max.z);\r\n    }\r\n    getCorner110(out) {\r\n        return out.set(this.max.x, this.max.y, this.min.z);\r\n    }\r\n    getCorner111(out) {\r\n        return out.set(this.max.x, this.max.y, this.max.z);\r\n    }\r\n    /** @param out The {@link Vector3} to receive the dimensions of this bounding box on all three axis.\r\n     * @return The vector specified with the out argument */\r\n    getDimensions(out) {\r\n        return out.setFrom(this.dim);\r\n    }\r\n    getWidth() {\r\n        return this.dim.x;\r\n    }\r\n    getHeight() {\r\n        return this.dim.y;\r\n    }\r\n    getDepth() {\r\n        return this.dim.z;\r\n    }\r\n    /** @param out The {@link Vector3} to receive the minimum values.\r\n     * @return The vector specified with the out argument */\r\n    getMin(out) {\r\n        return out.setFrom(this.min);\r\n    }\r\n    /** @param out The {@link Vector3} to receive the maximum values.\r\n     * @return The vector specified with the out argument */\r\n    getMax(out) {\r\n        return out.setFrom(this.max);\r\n    }\r\n    /** Sets the given bounding box.\r\n     *\r\n     * @param bounds The bounds.\r\n     * @return This bounding box for chaining. */\r\n    setFromBounds(bounds) {\r\n        return this.set(bounds.min, bounds.max);\r\n    }\r\n    /** Sets the given minimum and maximum vector.\r\n     *\r\n     * @param minimum The minimum vector\r\n     * @param maximum The maximum vector\r\n     * @return This bounding box for chaining. */\r\n    set(minimum, maximum) {\r\n        this.min.set(minimum.x < maximum.x ? minimum.x : maximum.x, minimum.y < maximum.y ? minimum.y : maximum.y, minimum.z < maximum.z ? minimum.z : maximum.z);\r\n        this.max.set(minimum.x > maximum.x ? minimum.x : maximum.x, minimum.y > maximum.y ? minimum.y : maximum.y, minimum.z > maximum.z ? minimum.z : maximum.z);\r\n        this.update();\r\n        return this;\r\n    }\r\n    update() {\r\n        this.cnt.setFrom(this.min).add(this.max).scale(0.5);\r\n        this.dim.setFrom(this.max).sub(this.min);\r\n    }\r\n    /** Sets the bounding box minimum and maximum vector from the given points.\r\n     *\r\n     * @param points The points.\r\n     * @return This bounding box for chaining. */\r\n    setFromPoints(points) {\r\n        this.inf();\r\n        for (let l_point of points)\r\n            this.extPoint(l_point);\r\n        return this;\r\n    }\r\n    /** Sets the minimum and maximum vector to positive and negative infinity.\r\n     *\r\n     * @return This bounding box for chaining. */\r\n    inf() {\r\n        this.min.set(Infinity, Infinity, Infinity);\r\n        this.max.set(-Infinity, -Infinity, -Infinity);\r\n        this.cnt.set(0, 0, 0);\r\n        this.dim.set(0, 0, 0);\r\n        return this;\r\n    }\r\n    /** Extends the bounding box to incorporate the given {@link Vector3}.\r\n     * @param point The vector\r\n     * @return This bounding box for chaining. */\r\n    extPoint(point) {\r\n        return this.set(this.min.set(Math.min(this.min.x, point.x), Math.min(this.min.y, point.y), Math.min(this.min.z, point.z)), this.max.set(Math.max(this.max.x, point.x), Math.max(this.max.y, point.y), Math.max(this.max.z, point.z)));\r\n    }\r\n    /** Sets the minimum and maximum vector to zeros.\r\n     * @return This bounding box for chaining. */\r\n    clr() {\r\n        return this.set(this.min.set(0, 0, 0), this.max.set(0, 0, 0));\r\n    }\r\n    /** Returns whether this bounding box is valid. This means that {@link #max} is greater than or equal to {@link #min}.\r\n     * @return True in case the bounding box is valid, false otherwise */\r\n    isValid() {\r\n        return this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z;\r\n    }\r\n    /** Extends this bounding box by the given bounding box.\r\n     *\r\n     * @param a_bounds The bounding box\r\n     * @return This bounding box for chaining. */\r\n    extBounds(a_bounds) {\r\n        return this.set(this.min.set(Math.min(this.min.x, a_bounds.min.x), Math.min(this.min.y, a_bounds.min.y), Math.min(this.min.z, a_bounds.min.z)), this.max.set(Math.max(this.max.x, a_bounds.max.x), Math.max(this.max.y, a_bounds.max.y), Math.max(this.max.z, a_bounds.max.z)));\r\n    }\r\n    /** Extends this bounding box by the given sphere.\r\n     *\r\n     * @param center Sphere center\r\n     * @param radius Sphere radius\r\n     * @return This bounding box for chaining. */\r\n    extSphere(center, radius) {\r\n        return this.set(this.min.set(Math.min(this.min.x, center.x - radius), Math.min(this.min.y, center.y - radius), Math.min(this.min.z, center.z - radius)), this.max.set(Math.max(this.max.x, center.x + radius), Math.max(this.max.y, center.y + radius), Math.max(this.max.z, center.z + radius)));\r\n    }\r\n    /** Extends this bounding box by the given transformed bounding box.\r\n     *\r\n     * @param bounds The bounding box\r\n     * @param transform The transformation matrix to apply to bounds, before using it to extend this bounding box.\r\n     * @return This bounding box for chaining. */\r\n    extTransformedBox(bounds, transform) {\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.min.y, bounds.min.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.min.y, bounds.max.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.max.y, bounds.min.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.max.y, bounds.max.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.min.y, bounds.min.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.min.y, bounds.max.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.max.y, bounds.min.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.max.y, bounds.max.z).multiply(transform));\r\n        return this;\r\n    }\r\n    /** Multiplies the bounding box by the given matrix. This is achieved by multiplying the 8 corner points and then calculating\r\n     * the minimum and maximum vectors from the transformed points.\r\n     *\r\n     * @param transform The matrix\r\n     * @return This bounding box for chaining. */\r\n    mul(transform) {\r\n        let x0 = this.min.x, y0 = this.min.y, z0 = this.min.z, x1 = this.max.x, y1 = this.max.y, z1 = this.max.z;\r\n        this.inf();\r\n        this.extPoint(BoundingBox.tmpVector.set(x0, y0, z0).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x0, y0, z1).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x0, y1, z0).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x0, y1, z1).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x1, y0, z0).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x1, y0, z1).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x1, y1, z0).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x1, y1, z1).multiply(transform));\r\n        return this;\r\n    }\r\n    /** Returns whether the given bounding box is contained in this bounding box.\r\n     * @param b The bounding box\r\n     * @return Whether the given bounding box is contained */\r\n    containsBounds(b) {\r\n        return (!this.isValid() ||\r\n            (this.min.x <= b.min.x &&\r\n                this.min.y <= b.min.y &&\r\n                this.min.z <= b.min.z &&\r\n                this.max.x >= b.max.x &&\r\n                this.max.y >= b.max.y &&\r\n                this.max.z >= b.max.z));\r\n    }\r\n    /** Returns whether the given bounding box is intersecting this bounding box (at least one point in).\r\n     * @param b The bounding box\r\n     * @return Whether the given bounding box is intersected */\r\n    intersects(b) {\r\n        if (!this.isValid())\r\n            return false;\r\n        // test using SAT (separating axis theorem)\r\n        const lx = Math.abs(this.cnt.x - b.cnt.x);\r\n        const sumx = this.dim.x / 2.0 + b.dim.x / 2.0;\r\n        const ly = Math.abs(this.cnt.y - b.cnt.y);\r\n        const sumy = this.dim.y / 2.0 + b.dim.y / 2.0;\r\n        const lz = Math.abs(this.cnt.z - b.cnt.z);\r\n        const sumz = this.dim.z / 2.0 + b.dim.z / 2.0;\r\n        return lx <= sumx && ly <= sumy && lz <= sumz;\r\n    }\r\n    /** Returns whether the given vector is contained in this bounding box.\r\n     * @param v The vector\r\n     * @return Whether the vector is contained or not. */\r\n    containsPoint(v) {\r\n        return (this.min.x <= v.x &&\r\n            this.max.x >= v.x &&\r\n            this.min.y <= v.y &&\r\n            this.max.y >= v.y &&\r\n            this.min.z <= v.z &&\r\n            this.max.z >= v.z);\r\n    }\r\n    /** Extends the bounding box by the given vector.\r\n     *\r\n     * @param x The x-coordinate\r\n     * @param y The y-coordinate\r\n     * @param z The z-coordinate\r\n     * @return This bounding box for chaining. */\r\n    ext(x, y, z) {\r\n        return this.set(this.min.set(Math.min(this.min.x, x), Math.min(this.min.y, y), Math.min(this.min.z, z)), this.max.set(Math.max(this.max.x, x), Math.max(this.max.y, y), Math.max(this.max.z, z)));\r\n    }\r\n}\r\nexports.BoundingBox = BoundingBox;\r\nBoundingBox.tmpVector = new Vector3_1.Vector3();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}