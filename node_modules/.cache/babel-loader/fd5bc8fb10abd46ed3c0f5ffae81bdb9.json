{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2ContactListener, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { PolygonBatch, ShapeRenderer, Vector2, ViewportInputHandler } from \"gdxts\";\nimport { Constants } from \"../Constants\";\nimport { BackgroundRenderSystem } from \"../system/BackgroundRenderSystem\";\nimport { BirdRenderSystem } from \"../system/BirdRenderSystem\";\nimport { BoxesAndPigsRenderSystem } from \"../system/BoxesAndPigsRenderSystem\";\nimport { ContactListenerSystem } from \"../system/ContactListenerSystem\";\nimport { inputHandlerSystem } from \"../system/inputHandleSystem\";\nimport { NextLevelSystem } from \"../system/NextLevelSystem\";\nimport { ShapeRendererSystem } from \"../system/ShapeRendererSystem\";\nimport { SlingshotRenderSystem } from \"../system/SlingshotRenderSystem\";\nconst levelState = {\n  birdCount: 0,\n  conditionWin: false,\n  currentLevel: 1\n};\nexport const createGameScreen = async (assetManager, viewport) => {\n  const createWall = (world, x, y, width, height) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x + width / 2, y + height / 2);\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width / 2, height / 2);\n    body.SetUserData(\"ground\");\n    body.CreateFixture(shape);\n  };\n\n  const createBall = (world, x, y, radius, userData) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_staticBody;\n    bodyDef.position.Set(x + radius / 2, y + radius / 2);\n    const circle = new b2CircleShape();\n    circle.m_radius = radius;\n    const fixtureDef = new b2FixtureDef();\n    fixtureDef.shape = circle;\n    fixtureDef.restitution = 0.5; // bounce bird\n\n    fixtureDef.friction = 1;\n    fixtureDef.shape = circle;\n    const body = world.CreateBody(bodyDef);\n    body.CreateFixture(fixtureDef);\n    body.SetUserData(userData);\n    return body;\n  };\n\n  const createBox = (world, x, y, width, height, userData) => {\n    const bodyDef = new b2BodyDef();\n    bodyDef.type = b2BodyType.b2_dynamicBody;\n    bodyDef.position.Set(x + width / 2, y + height / 2);\n    const body = world.CreateBody(bodyDef);\n    const shape = new b2PolygonShape();\n    shape.SetAsBox(width * 0.5, height * 0.5);\n    body.SetUserData({\n      name: userData.name,\n      durability: 0\n    });\n    body.CreateFixture(shape);\n    return body;\n  };\n\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const inputHandler = new ViewportInputHandler(viewport);\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const physicWorld = new b2World({\n    x: 0,\n    y: 10\n  });\n  const BALL_RADIUS = 0.2;\n  let offset = 0.5;\n  let birdNumber = 1;\n  let bird = [createBall(physicWorld, 2, 3.45, BALL_RADIUS, \"bird\" + birdNumber++)];\n\n  for (let i = 0; i < 2; i++) {\n    bird.push(createBall(physicWorld, 1.5 - offset * i, 3.85, BALL_RADIUS, \"bird\" + birdNumber++));\n  }\n\n  let delayTime = 0;\n  const BOX_SIZE = 0.5;\n  const PIG_SIZE = 0.3;\n  let pigs = [];\n  let boxes = [];\n  let birdOnSlingShot = true;\n  let mapData;\n\n  switch (levelState.currentLevel) {\n    case 1:\n      mapData = await fetch(\"./level1.tmj\").then(res => res.json());\n      break;\n\n    case 2:\n      mapData = await fetch(\"./level2.tmj\").then(res => res.json());\n      break;\n\n    case 3:\n      mapData = await fetch(\"level3.tmj\").then(res => res.json);\n      break;\n\n    default:\n      break;\n  }\n\n  let wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  let boxData = mapData.layers.find(b => b.name === \"boxes\").objects;\n  let pigsData = mapData.layers.find(p => p.name === \"pigs\").objects;\n\n  for (let wall of wallData) {\n    createWall(physicWorld, wall.x / Constants.METER_TO_WORLD, wall.y / Constants.METER_TO_WORLD, wall.width / Constants.METER_TO_WORLD, wall.height / Constants.METER_TO_WORLD);\n  }\n\n  for (let box of boxData) {\n    boxes.push(createBox(physicWorld, box.x / Constants.METER_TO_WORLD, box.y / Constants.METER_TO_WORLD, BOX_SIZE, BOX_SIZE, {\n      name: `box`\n    }));\n  }\n\n  for (let pig of pigsData) {\n    pigs.push(createBox(physicWorld, pig.x / Constants.METER_TO_WORLD, pig.y / Constants.METER_TO_WORLD, PIG_SIZE, PIG_SIZE, {\n      name: `pig`\n    }));\n  }\n\n  const originPosition = new Vector2(bird[0].GetPosition().x * Constants.METER_TO_WORLD, bird[0].GetPosition().y * Constants.METER_TO_WORLD);\n  let slingPos = new Vector2(bird[0].GetPosition().x * Constants.METER_TO_WORLD, bird[0].GetPosition().y * Constants.METER_TO_WORLD);\n  const world = new World();\n  const contactListener = new b2ContactListener();\n  gl.clearColor(0, 0, 0, 1);\n  physicWorld.SetContactListener(contactListener);\n  world.register(\"inputHandler\", inputHandler);\n  world.register(\"contactListener\", contactListener);\n  world.register(\"delayTime\", delayTime);\n  world.register(\"gl\", gl);\n  world.register(\"shapeRenderer\", shapeRenderer);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"viewport\", viewport);\n  world.register(\"batch\", batch);\n  world.register(\"bird\", bird);\n  world.register(\"levelState\", levelState);\n  world.register(\"boxes\", boxes);\n  world.register(\"pigs\", pigs);\n  world.register(\"originPosition\", originPosition);\n  world.register(\"slingPos\", slingPos);\n  world.register(\"physicWorld\", physicWorld);\n  world.register(\"birdOnSlingShot\", birdOnSlingShot);\n  world.register(\"birdNumber\", birdNumber);\n  world.register(\"createBall\", createBall);\n  world.addSystem(new BackgroundRenderSystem(), false);\n  world.addSystem(new ShapeRendererSystem(), false);\n  world.addSystem(new inputHandlerSystem(), false);\n  world.addSystem(new BirdRenderSystem(), false);\n  world.addSystem(new BoxesAndPigsRenderSystem(), false);\n  world.addSystem(new SlingshotRenderSystem(), false);\n  world.addSystem(new ContactListenerSystem(), false);\n  world.addSystem(new NextLevelSystem(), false);\n  return {\n    update(delta) {\n      console.log(levelState.currentLevel);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      batch.setProjection(camera.combined);\n      shapeRenderer.setProjection(camera.combined);\n      world.setDelta(delta);\n      world.processActiveSystem();\n      world.processPassiveSystem();\n      physicWorld.Step(delta, 8, 3);\n    },\n\n    dispose() {\n      batch.dispose();\n      inputHandler.cleanup();\n    }\n\n  };\n};","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2ContactListener","b2FixtureDef","b2PolygonShape","b2World","World","PolygonBatch","ShapeRenderer","Vector2","ViewportInputHandler","Constants","BackgroundRenderSystem","BirdRenderSystem","BoxesAndPigsRenderSystem","ContactListenerSystem","inputHandlerSystem","NextLevelSystem","ShapeRendererSystem","SlingshotRenderSystem","levelState","birdCount","conditionWin","currentLevel","createGameScreen","assetManager","viewport","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createBall","radius","userData","circle","m_radius","fixtureDef","restitution","friction","createBox","b2_dynamicBody","name","durability","gl","getContext","shapeRenderer","inputHandler","camera","getCamera","batch","setYDown","physicWorld","BALL_RADIUS","offset","birdNumber","bird","i","push","delayTime","BOX_SIZE","PIG_SIZE","pigs","boxes","birdOnSlingShot","mapData","fetch","then","res","json","wallData","layers","find","l","objects","boxData","b","pigsData","p","wall","METER_TO_WORLD","box","pig","originPosition","GetPosition","slingPos","contactListener","clearColor","SetContactListener","register","addSystem","update","delta","console","log","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step","dispose","cleanup"],"sources":["D:/projects/test-game/src/screen/GameScreen.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2ContactListener,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  PolygonBatch,\r\n  Screen,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { Constants } from \"../Constants\";\r\nimport { LevelState } from \"../data/LevelState\";\r\nimport { BackgroundRenderSystem } from \"../system/BackgroundRenderSystem\";\r\nimport { BirdRenderSystem } from \"../system/BirdRenderSystem\";\r\nimport { BoxesAndPigsRenderSystem } from \"../system/BoxesAndPigsRenderSystem\";\r\nimport { ContactListenerSystem } from \"../system/ContactListenerSystem\";\r\nimport { inputHandlerSystem } from \"../system/inputHandleSystem\";\r\nimport { NextLevelSystem } from \"../system/NextLevelSystem\";\r\nimport { ShapeRendererSystem } from \"../system/ShapeRendererSystem\";\r\nimport { SlingshotRenderSystem } from \"../system/SlingshotRenderSystem\";\r\n\r\nconst levelState: LevelState = {\r\n  birdCount: 0,\r\n  conditionWin: false,\r\n  currentLevel: 1,\r\n};\r\n\r\nexport const createGameScreen = async (\r\n  assetManager: AssetManager,\r\n  viewport: Viewport\r\n): Promise<Screen> => {\r\n  const createWall = (\r\n    world: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ) => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x + width / 2, y + height / 2);\r\n    const body = world.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width / 2, height / 2);\r\n    body.SetUserData(\"ground\");\r\n    body.CreateFixture(shape);\r\n  };\r\n\r\n  const createBall = (\r\n    world: b2World,\r\n    x: number,\r\n    y: number,\r\n    radius: number,\r\n    userData: string\r\n  ): b2Body => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_staticBody;\r\n    bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n    const circle = new b2CircleShape();\r\n    circle.m_radius = radius;\r\n    const fixtureDef = new b2FixtureDef();\r\n    fixtureDef.shape = circle;\r\n    fixtureDef.restitution = 0.5; // bounce bird\r\n    fixtureDef.friction = 1;\r\n    fixtureDef.shape = circle;\r\n\r\n    const body = world.CreateBody(bodyDef);\r\n    body.CreateFixture(fixtureDef);\r\n    body.SetUserData(userData);\r\n    return body;\r\n  };\r\n\r\n  const createBox = (\r\n    world: b2World,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n    userData: {\r\n      name: string;\r\n    }\r\n  ): b2Body => {\r\n    const bodyDef = new b2BodyDef();\r\n    bodyDef.type = b2BodyType.b2_dynamicBody;\r\n    bodyDef.position.Set(x + width / 2, y + height / 2);\r\n    const body = world.CreateBody(bodyDef);\r\n    const shape = new b2PolygonShape();\r\n    shape.SetAsBox(width * 0.5, height * 0.5);\r\n    body.SetUserData({\r\n      name: userData.name,\r\n      durability: 0,\r\n    });\r\n    body.CreateFixture(shape);\r\n    return body;\r\n  };\r\n\r\n  const gl = viewport.getContext();\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n  const BALL_RADIUS = 0.2;\r\n\r\n  let offset = 0.5;\r\n  let birdNumber = 1;\r\n  let bird: b2Body[] = [\r\n    createBall(physicWorld, 2, 3.45, BALL_RADIUS, \"bird\" + birdNumber++),\r\n  ];\r\n\r\n  for (let i = 0; i < 2; i++) {\r\n    bird.push(\r\n      createBall(\r\n        physicWorld,\r\n        1.5 - offset * i,\r\n        3.85,\r\n        BALL_RADIUS,\r\n        \"bird\" + birdNumber++\r\n      )\r\n    );\r\n  }\r\n  let delayTime = 0;\r\n  const BOX_SIZE = 0.5;\r\n  const PIG_SIZE = 0.3;\r\n  let pigs: b2Body[] = [];\r\n  let boxes: b2Body[] = [];\r\n  let birdOnSlingShot = true;\r\n  let mapData: any;\r\n  switch (levelState.currentLevel) {\r\n    case 1:\r\n      mapData = await fetch(\"./level1.tmj\").then((res) => res.json());\r\n      break;\r\n    case 2:\r\n      mapData = await fetch(\"./level2.tmj\").then((res) => res.json());\r\n      break;\r\n    case 3:\r\n      mapData = await fetch(\"level3.tmj\").then((res) => res.json);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  let wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n  let boxData = mapData.layers.find((b: any) => b.name === \"boxes\").objects;\r\n  let pigsData = mapData.layers.find((p: any) => p.name === \"pigs\").objects;\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      physicWorld,\r\n      wall.x / Constants.METER_TO_WORLD,\r\n      wall.y / Constants.METER_TO_WORLD,\r\n      wall.width / Constants.METER_TO_WORLD,\r\n      wall.height / Constants.METER_TO_WORLD\r\n    );\r\n  }\r\n  for (let box of boxData) {\r\n    boxes.push(\r\n      createBox(\r\n        physicWorld,\r\n        box.x / Constants.METER_TO_WORLD,\r\n        box.y / Constants.METER_TO_WORLD,\r\n        BOX_SIZE,\r\n        BOX_SIZE,\r\n        {\r\n          name: `box`,\r\n        }\r\n      )\r\n    );\r\n  }\r\n  for (let pig of pigsData) {\r\n    pigs.push(\r\n      createBox(\r\n        physicWorld,\r\n        pig.x / Constants.METER_TO_WORLD,\r\n        pig.y / Constants.METER_TO_WORLD,\r\n        PIG_SIZE,\r\n        PIG_SIZE,\r\n        {\r\n          name: `pig`,\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  const originPosition = new Vector2(\r\n    bird[0].GetPosition().x * Constants.METER_TO_WORLD,\r\n    bird[0].GetPosition().y * Constants.METER_TO_WORLD\r\n  );\r\n  let slingPos = new Vector2(\r\n    bird[0].GetPosition().x * Constants.METER_TO_WORLD,\r\n    bird[0].GetPosition().y * Constants.METER_TO_WORLD\r\n  );\r\n\r\n  const world = new World();\r\n  const contactListener = new b2ContactListener();\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  physicWorld.SetContactListener(contactListener);\r\n\r\n  world.register(\"inputHandler\", inputHandler);\r\n  world.register(\"contactListener\", contactListener);\r\n  world.register(\"delayTime\", delayTime);\r\n  world.register(\"gl\", gl);\r\n  world.register(\"shapeRenderer\", shapeRenderer);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"viewport\", viewport);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"bird\", bird);\r\n  world.register(\"levelState\", levelState);\r\n  world.register(\"boxes\", boxes);\r\n  world.register(\"pigs\", pigs);\r\n  world.register(\"originPosition\", originPosition);\r\n  world.register(\"slingPos\", slingPos);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  world.register(\"birdOnSlingShot\", birdOnSlingShot);\r\n  world.register(\"birdNumber\", birdNumber);\r\n  world.register(\"createBall\", createBall);\r\n\r\n  world.addSystem(new BackgroundRenderSystem(), false);\r\n  world.addSystem(new ShapeRendererSystem(), false);\r\n  world.addSystem(new inputHandlerSystem(), false);\r\n  world.addSystem(new BirdRenderSystem(), false);\r\n  world.addSystem(new BoxesAndPigsRenderSystem(), false);\r\n  world.addSystem(new SlingshotRenderSystem(), false);\r\n  world.addSystem(new ContactListenerSystem(), false);\r\n  world.addSystem(new NextLevelSystem(), false);\r\n\r\n  return {\r\n    update(delta: number) {\r\n      console.log(levelState.currentLevel);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      batch.setProjection(camera.combined);\r\n      shapeRenderer.setProjection(camera.combined);\r\n      world.setDelta(delta);\r\n      world.processActiveSystem();\r\n      world.processPassiveSystem();\r\n      physicWorld.Step(delta, 8, 3);\r\n    },\r\n    dispose(): void {\r\n      batch.dispose();\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}