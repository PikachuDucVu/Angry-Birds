{"ast":null,"code":"import _initializerDefineProperty from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;\n\nimport { System, Inject } from \"flat-ecs\";\nimport { Game } from \"gdxts\";\nimport { createGameScreen } from \"../screen/GameScreen\";\nexport let NextLevelSystem = (_dec = Inject(\"physicWorld\"), _dec2 = Inject(\"levelState\"), _dec3 = Inject(\"bird\"), _dec4 = Inject(\"pigs\"), _dec5 = Inject(\"assetManager\"), _dec6 = Inject(\"viewport\"), (_class = class NextLevelSystem extends System {\n  constructor() {\n    super(...arguments);\n\n    _initializerDefineProperty(this, \"physicWorld\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"levelState\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"bird\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"pigs\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"assetManager\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"viewport\", _descriptor6, this);\n  }\n\n  process() {\n    if (this.pigs.length === 0 && this.levelState.transition === false) {\n      this.levelState.conditionWin = true;\n      this.levelState.transition = true;\n      this.levelState.currentLevel++;\n      setTimeout(() => {\n        const screen = createGameScreen(this.assetManager, this.viewport);\n        screen.then(screen => {\n          Game.shared.setScreen(screen);\n        });\n      }, 1500);\n    }\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"physicWorld\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"levelState\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"bird\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"pigs\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"assetManager\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"viewport\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));","map":{"version":3,"names":["System","Inject","Game","createGameScreen","NextLevelSystem","process","pigs","length","levelState","transition","conditionWin","currentLevel","setTimeout","screen","assetManager","viewport","then","shared","setScreen"],"sources":["D:/projects/test-game/src/system/NextLevelSystem.ts"],"sourcesContent":["import { b2Body, b2World } from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  Game,\r\n  ShapeRenderer,\r\n  Viewport,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { LevelState } from \"../data/LevelState\";\r\nimport { createGameScreen } from \"../screen/GameScreen\";\r\n\r\nexport class NextLevelSystem extends System {\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"levelState\") levelState: LevelState;\r\n  @Inject(\"bird\") bird: b2Body[];\r\n  @Inject(\"pigs\") pigs: b2Body[];\r\n  @Inject(\"assetManager\") assetManager: AssetManager;\r\n  @Inject(\"viewport\") viewport: Viewport;\r\n\r\n  process(): void {\r\n    if (this.pigs.length === 0 && this.levelState.transition === false) {\r\n      this.levelState.conditionWin = true;\r\n      this.levelState.transition = true;\r\n      this.levelState.currentLevel++;\r\n\r\n      setTimeout(() => {\r\n        const screen = createGameScreen(this.assetManager, this.viewport);\r\n        screen.then((screen) => {\r\n          Game.shared.setScreen(screen);\r\n        });\r\n      }, 1500);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;AACA,SAASA,MAAT,EAAiBC,MAAjB,QAA+B,UAA/B;AACA,SAEEC,IAFF,QAMO,OANP;AAQA,SAASC,gBAAT,QAAiC,sBAAjC;AAEA,WAAaC,eAAb,WACGH,MAAM,CAAC,aAAD,CADT,UAEGA,MAAM,CAAC,YAAD,CAFT,UAGGA,MAAM,CAAC,MAAD,CAHT,UAIGA,MAAM,CAAC,MAAD,CAJT,UAKGA,MAAM,CAAC,cAAD,CALT,UAMGA,MAAM,CAAC,UAAD,CANT,YAAO,MAAMG,eAAN,SAA8BJ,MAA9B,CAAqC;EAAA;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;EAAA;;EAQ1CK,OAAO,GAAS;IACd,IAAI,KAAKC,IAAL,CAAUC,MAAV,KAAqB,CAArB,IAA0B,KAAKC,UAAL,CAAgBC,UAAhB,KAA+B,KAA7D,EAAoE;MAClE,KAAKD,UAAL,CAAgBE,YAAhB,GAA+B,IAA/B;MACA,KAAKF,UAAL,CAAgBC,UAAhB,GAA6B,IAA7B;MACA,KAAKD,UAAL,CAAgBG,YAAhB;MAEAC,UAAU,CAAC,MAAM;QACf,MAAMC,MAAM,GAAGV,gBAAgB,CAAC,KAAKW,YAAN,EAAoB,KAAKC,QAAzB,CAA/B;QACAF,MAAM,CAACG,IAAP,CAAaH,MAAD,IAAY;UACtBX,IAAI,CAACe,MAAL,CAAYC,SAAZ,CAAsBL,MAAtB;QACD,CAFD;MAGD,CALS,EAKP,IALO,CAAV;IAMD;EACF;;AArByC,CAA5C;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}