{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonBatch = void 0;\n\nconst Utils_1 = require(\"./Utils\");\n\nconst Mesh_1 = require(\"./Mesh\");\n\nconst Shader_1 = require(\"./Shader\");\n\nconst WebGL_1 = require(\"./WebGL\"); // prettier-ignore\n\n\nconst quad = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];\nconst QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];\nconst WHITE = new Utils_1.Color(1, 1, 1, 1);\n\nclass PolygonBatch {\n  constructor(context) {\n    let twoColorTint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let maxVertices = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10920;\n    this.isDrawing = false;\n    this.shader = null;\n    this.lastTexture = null;\n    this.verticesLength = 0;\n    this.indicesLength = 0;\n    this.projectionValues = new Float32Array(16);\n    this.color = WHITE;\n    this.twoColorTint = true;\n    if (maxVertices > 10920) throw new Error(\"Can't have more than 10920 triangles per batch: \" + maxVertices);\n    this.context = context instanceof WebGL_1.ManagedWebGLRenderingContext ? context : new WebGL_1.ManagedWebGLRenderingContext(context);\n    let attributes = twoColorTint ? [new Mesh_1.Position2Attribute(), new Mesh_1.ColorAttribute(), new Mesh_1.TexCoordAttribute(), new Mesh_1.Color2Attribute()] : [new Mesh_1.Position2Attribute(), new Mesh_1.ColorAttribute(), new Mesh_1.TexCoordAttribute()];\n    this.mesh = new Mesh_1.Mesh(context, attributes, maxVertices, maxVertices * 3);\n    this.shader = Shader_1.Shader.newTwoColoredTextured(context);\n    let gl = this.context.gl;\n    this.srcColorBlend = gl.SRC_ALPHA;\n    this.srcAlphaBlend = gl.ONE;\n    this.dstBlend = gl.ONE_MINUS_SRC_ALPHA;\n    this.twoColorTint = twoColorTint;\n  }\n\n  setColor(color) {\n    this.color = color;\n  }\n\n  setShader(shader) {\n    this.shader = shader;\n  }\n\n  setProjection(projectionValues) {\n    this.projectionValues = projectionValues;\n  }\n\n  begin() {\n    if (this.isDrawing) throw new Error(\"PolygonBatch is already drawing. Call PolygonBatch.end() before calling PolygonBatch.begin()\");\n    this.drawCalls = 0;\n    const shader = this.shader;\n    this.lastTexture = null;\n    this.isDrawing = true;\n    shader.bind();\n    shader.setUniform4x4f(Shader_1.Shader.MVP_MATRIX, this.projectionValues);\n    shader.setUniformi(\"u_texture\", 0);\n    let gl = this.context.gl;\n    gl.enable(gl.BLEND);\n    gl.blendFuncSeparate(this.srcColorBlend, this.dstBlend, this.srcAlphaBlend, this.dstBlend);\n  }\n\n  setBlendMode(srcColorBlend, srcAlphaBlend, dstBlend) {\n    if (this.srcColorBlend === srcColorBlend && this.srcAlphaBlend === srcAlphaBlend && this.dstBlend === dstBlend) return;\n    this.srcColorBlend = srcColorBlend;\n    this.srcAlphaBlend = srcAlphaBlend;\n    this.dstBlend = dstBlend;\n\n    if (this.isDrawing) {\n      this.flush();\n      let gl = this.context.gl;\n      gl.blendFuncSeparate(srcColorBlend, dstBlend, srcAlphaBlend, dstBlend);\n    }\n  }\n\n  drawVertices(texture, vertices, indices) {\n    if (texture !== this.lastTexture) {\n      this.flush();\n      this.lastTexture = texture;\n    } else if (this.verticesLength + vertices.length > this.mesh.getVertices().length || this.indicesLength + indices.length > this.mesh.getIndices().length) {\n      this.flush();\n    }\n\n    let indexStart = this.mesh.numVertices();\n    this.mesh.getVertices().set(vertices, this.verticesLength);\n    this.verticesLength += vertices.length;\n    this.mesh.setVerticesLength(this.verticesLength);\n    let indicesArray = this.mesh.getIndices();\n\n    for (let i = this.indicesLength, j = 0; j < indices.length; i++, j++) indicesArray[i] = indices[j] + indexStart;\n\n    this.indicesLength += indices.length;\n    this.mesh.setIndicesLength(this.indicesLength);\n  }\n\n  flush() {\n    if (this.verticesLength === 0) return;\n    this.lastTexture.bind();\n    this.mesh.draw(this.shader, this.context.gl.TRIANGLES);\n    this.verticesLength = 0;\n    this.indicesLength = 0;\n    this.mesh.setVerticesLength(0);\n    this.mesh.setIndicesLength(0);\n    this.drawCalls++;\n  }\n\n  end() {\n    if (!this.isDrawing) throw new Error(\"PolygonBatch is not drawing. Call PolygonBatch.begin() before calling PolygonBatch.end()\");\n    if (this.verticesLength > 0 || this.indicesLength > 0) this.flush();\n    this.shader.unbind();\n    this.lastTexture = null;\n    this.isDrawing = false;\n    let gl = this.context.gl;\n    gl.disable(gl.BLEND);\n  }\n\n  getDrawCalls() {\n    return this.drawCalls;\n  }\n\n  dispose() {\n    this.mesh.dispose();\n  }\n\n  draw(texture, x, y, width, height) {\n    let originX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let originY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let rotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    let scaleX = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n    let scaleY = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n    let u1 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;\n    let v1 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 1;\n    let u2 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 1;\n    let v2 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;\n    const color = this.color;\n    width = width === 0 ? width : width || texture.width;\n    height = height === 0 ? height : height || texture.height;\n    x = x || 0;\n    y = y || 0;\n    let x1 = -originX;\n    let x2 = width - originX;\n    let x3 = width - originX;\n    let x4 = -originX;\n    let y1 = -originY;\n    let y2 = -originY;\n    let y3 = height - originY;\n    let y4 = height - originY;\n\n    if (scaleX !== 1) {\n      x1 = x1 * scaleX;\n      x2 = x2 * scaleX;\n      x3 = x3 * scaleX;\n      x4 = x4 * scaleX;\n    }\n\n    if (scaleY !== 1) {\n      y1 = y1 * scaleY;\n      y2 = y2 * scaleY;\n      y3 = y3 * scaleY;\n      y4 = y4 * scaleY;\n    }\n\n    if (rotation !== 0) {\n      var cos = Math.cos(rotation);\n      var sin = Math.sin(rotation);\n      var rotatedX1 = cos * x1 - sin * y1;\n      var rotatedY1 = sin * x1 + cos * y1;\n      var rotatedX2 = cos * x2 - sin * y2;\n      var rotatedY2 = sin * x2 + cos * y2;\n      var rotatedX3 = cos * x3 - sin * y3;\n      var rotatedY3 = sin * x3 + cos * y3;\n      var rotatedX4 = cos * x4 - sin * y4;\n      var rotatedY4 = sin * x4 + cos * y4;\n      x1 = rotatedX1;\n      x2 = rotatedX2;\n      x3 = rotatedX3;\n      x4 = rotatedX4;\n      y1 = rotatedY1;\n      y2 = rotatedY2;\n      y3 = rotatedY3;\n      y4 = rotatedY4;\n    }\n\n    x1 += x + originX;\n    x2 += x + originX;\n    x3 += x + originX;\n    x4 += x + originX;\n    y1 += y + originY;\n    y2 += y + originY;\n    y3 += y + originY;\n    y4 += y + originY;\n    var i = 0;\n    quad[i++] = x1;\n    quad[i++] = y1;\n    quad[i++] = color.r;\n    quad[i++] = color.g;\n    quad[i++] = color.b;\n    quad[i++] = color.a;\n    quad[i++] = u1;\n    quad[i++] = v1;\n\n    if (this.twoColorTint) {\n      quad[i++] = 0;\n      quad[i++] = 0;\n      quad[i++] = 0;\n      quad[i++] = 0;\n    }\n\n    quad[i++] = x2;\n    quad[i++] = y2;\n    quad[i++] = color.r;\n    quad[i++] = color.g;\n    quad[i++] = color.b;\n    quad[i++] = color.a;\n    quad[i++] = u2;\n    quad[i++] = v1;\n\n    if (this.twoColorTint) {\n      quad[i++] = 0;\n      quad[i++] = 0;\n      quad[i++] = 0;\n      quad[i++] = 0;\n    }\n\n    quad[i++] = x3;\n    quad[i++] = y3;\n    quad[i++] = color.r;\n    quad[i++] = color.g;\n    quad[i++] = color.b;\n    quad[i++] = color.a;\n    quad[i++] = u2;\n    quad[i++] = v2;\n\n    if (this.twoColorTint) {\n      quad[i++] = 0;\n      quad[i++] = 0;\n      quad[i++] = 0;\n      quad[i++] = 0;\n    }\n\n    quad[i++] = x4;\n    quad[i++] = y4;\n    quad[i++] = color.r;\n    quad[i++] = color.g;\n    quad[i++] = color.b;\n    quad[i++] = color.a;\n    quad[i++] = u1;\n    quad[i++] = v2;\n\n    if (this.twoColorTint) {\n      quad[i++] = 0;\n      quad[i++] = 0;\n      quad[i++] = 0;\n      quad[i] = 0;\n    }\n\n    this.drawVertices(texture, quad, QUAD_TRIANGLES);\n  }\n\n}\n\nexports.PolygonBatch = PolygonBatch;","map":{"version":3,"names":["Object","defineProperty","exports","value","PolygonBatch","Utils_1","require","Mesh_1","Shader_1","WebGL_1","quad","QUAD_TRIANGLES","WHITE","Color","constructor","context","twoColorTint","maxVertices","isDrawing","shader","lastTexture","verticesLength","indicesLength","projectionValues","Float32Array","color","Error","ManagedWebGLRenderingContext","attributes","Position2Attribute","ColorAttribute","TexCoordAttribute","Color2Attribute","mesh","Mesh","Shader","newTwoColoredTextured","gl","srcColorBlend","SRC_ALPHA","srcAlphaBlend","ONE","dstBlend","ONE_MINUS_SRC_ALPHA","setColor","setShader","setProjection","begin","drawCalls","bind","setUniform4x4f","MVP_MATRIX","setUniformi","enable","BLEND","blendFuncSeparate","setBlendMode","flush","drawVertices","texture","vertices","indices","length","getVertices","getIndices","indexStart","numVertices","set","setVerticesLength","indicesArray","i","j","setIndicesLength","draw","TRIANGLES","end","unbind","disable","getDrawCalls","dispose","x","y","width","height","originX","originY","rotation","scaleX","scaleY","u1","v1","u2","v2","x1","x2","x3","x4","y1","y2","y3","y4","cos","Math","sin","rotatedX1","rotatedY1","rotatedX2","rotatedY2","rotatedX3","rotatedY3","rotatedX4","rotatedY4","r","g","b","a"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/PolygonBatcher.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonBatch = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Mesh_1 = require(\"./Mesh\");\nconst Shader_1 = require(\"./Shader\");\nconst WebGL_1 = require(\"./WebGL\");\n// prettier-ignore\nconst quad = [\n    0, 0, 1, 1, 1, 1, 0, 0,\n    0, 0, 1, 1, 1, 1, 0, 0,\n    0, 0, 1, 1, 1, 1, 0, 0,\n    0, 0, 1, 1, 1, 1, 0, 0,\n];\nconst QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];\nconst WHITE = new Utils_1.Color(1, 1, 1, 1);\nclass PolygonBatch {\n    constructor(context, twoColorTint = true, maxVertices = 10920) {\n        this.isDrawing = false;\n        this.shader = null;\n        this.lastTexture = null;\n        this.verticesLength = 0;\n        this.indicesLength = 0;\n        this.projectionValues = new Float32Array(16);\n        this.color = WHITE;\n        this.twoColorTint = true;\n        if (maxVertices > 10920)\n            throw new Error(\"Can't have more than 10920 triangles per batch: \" + maxVertices);\n        this.context =\n            context instanceof WebGL_1.ManagedWebGLRenderingContext\n                ? context\n                : new WebGL_1.ManagedWebGLRenderingContext(context);\n        let attributes = twoColorTint\n            ? [\n                new Mesh_1.Position2Attribute(),\n                new Mesh_1.ColorAttribute(),\n                new Mesh_1.TexCoordAttribute(),\n                new Mesh_1.Color2Attribute(),\n            ]\n            : [\n                new Mesh_1.Position2Attribute(),\n                new Mesh_1.ColorAttribute(),\n                new Mesh_1.TexCoordAttribute(),\n            ];\n        this.mesh = new Mesh_1.Mesh(context, attributes, maxVertices, maxVertices * 3);\n        this.shader = Shader_1.Shader.newTwoColoredTextured(context);\n        let gl = this.context.gl;\n        this.srcColorBlend = gl.SRC_ALPHA;\n        this.srcAlphaBlend = gl.ONE;\n        this.dstBlend = gl.ONE_MINUS_SRC_ALPHA;\n        this.twoColorTint = twoColorTint;\n    }\n    setColor(color) {\n        this.color = color;\n    }\n    setShader(shader) {\n        this.shader = shader;\n    }\n    setProjection(projectionValues) {\n        this.projectionValues = projectionValues;\n    }\n    begin() {\n        if (this.isDrawing)\n            throw new Error(\"PolygonBatch is already drawing. Call PolygonBatch.end() before calling PolygonBatch.begin()\");\n        this.drawCalls = 0;\n        const shader = this.shader;\n        this.lastTexture = null;\n        this.isDrawing = true;\n        shader.bind();\n        shader.setUniform4x4f(Shader_1.Shader.MVP_MATRIX, this.projectionValues);\n        shader.setUniformi(\"u_texture\", 0);\n        let gl = this.context.gl;\n        gl.enable(gl.BLEND);\n        gl.blendFuncSeparate(this.srcColorBlend, this.dstBlend, this.srcAlphaBlend, this.dstBlend);\n    }\n    setBlendMode(srcColorBlend, srcAlphaBlend, dstBlend) {\n        if (this.srcColorBlend === srcColorBlend &&\n            this.srcAlphaBlend === srcAlphaBlend &&\n            this.dstBlend === dstBlend)\n            return;\n        this.srcColorBlend = srcColorBlend;\n        this.srcAlphaBlend = srcAlphaBlend;\n        this.dstBlend = dstBlend;\n        if (this.isDrawing) {\n            this.flush();\n            let gl = this.context.gl;\n            gl.blendFuncSeparate(srcColorBlend, dstBlend, srcAlphaBlend, dstBlend);\n        }\n    }\n    drawVertices(texture, vertices, indices) {\n        if (texture !== this.lastTexture) {\n            this.flush();\n            this.lastTexture = texture;\n        }\n        else if (this.verticesLength + vertices.length > this.mesh.getVertices().length ||\n            this.indicesLength + indices.length > this.mesh.getIndices().length) {\n            this.flush();\n        }\n        let indexStart = this.mesh.numVertices();\n        this.mesh.getVertices().set(vertices, this.verticesLength);\n        this.verticesLength += vertices.length;\n        this.mesh.setVerticesLength(this.verticesLength);\n        let indicesArray = this.mesh.getIndices();\n        for (let i = this.indicesLength, j = 0; j < indices.length; i++, j++)\n            indicesArray[i] = indices[j] + indexStart;\n        this.indicesLength += indices.length;\n        this.mesh.setIndicesLength(this.indicesLength);\n    }\n    flush() {\n        if (this.verticesLength === 0)\n            return;\n        this.lastTexture.bind();\n        this.mesh.draw(this.shader, this.context.gl.TRIANGLES);\n        this.verticesLength = 0;\n        this.indicesLength = 0;\n        this.mesh.setVerticesLength(0);\n        this.mesh.setIndicesLength(0);\n        this.drawCalls++;\n    }\n    end() {\n        if (!this.isDrawing)\n            throw new Error(\"PolygonBatch is not drawing. Call PolygonBatch.begin() before calling PolygonBatch.end()\");\n        if (this.verticesLength > 0 || this.indicesLength > 0)\n            this.flush();\n        this.shader.unbind();\n        this.lastTexture = null;\n        this.isDrawing = false;\n        let gl = this.context.gl;\n        gl.disable(gl.BLEND);\n    }\n    getDrawCalls() {\n        return this.drawCalls;\n    }\n    dispose() {\n        this.mesh.dispose();\n    }\n    draw(texture, x, y, width, height, originX = 0, originY = 0, rotation = 0, scaleX = 1, scaleY = 1, u1 = 0, v1 = 1, u2 = 1, v2 = 0) {\n        const color = this.color;\n        width = width === 0 ? width : width || texture.width;\n        height = height === 0 ? height : height || texture.height;\n        x = x || 0;\n        y = y || 0;\n        let x1 = -originX;\n        let x2 = width - originX;\n        let x3 = width - originX;\n        let x4 = -originX;\n        let y1 = -originY;\n        let y2 = -originY;\n        let y3 = height - originY;\n        let y4 = height - originY;\n        if (scaleX !== 1) {\n            x1 = x1 * scaleX;\n            x2 = x2 * scaleX;\n            x3 = x3 * scaleX;\n            x4 = x4 * scaleX;\n        }\n        if (scaleY !== 1) {\n            y1 = y1 * scaleY;\n            y2 = y2 * scaleY;\n            y3 = y3 * scaleY;\n            y4 = y4 * scaleY;\n        }\n        if (rotation !== 0) {\n            var cos = Math.cos(rotation);\n            var sin = Math.sin(rotation);\n            var rotatedX1 = cos * x1 - sin * y1;\n            var rotatedY1 = sin * x1 + cos * y1;\n            var rotatedX2 = cos * x2 - sin * y2;\n            var rotatedY2 = sin * x2 + cos * y2;\n            var rotatedX3 = cos * x3 - sin * y3;\n            var rotatedY3 = sin * x3 + cos * y3;\n            var rotatedX4 = cos * x4 - sin * y4;\n            var rotatedY4 = sin * x4 + cos * y4;\n            x1 = rotatedX1;\n            x2 = rotatedX2;\n            x3 = rotatedX3;\n            x4 = rotatedX4;\n            y1 = rotatedY1;\n            y2 = rotatedY2;\n            y3 = rotatedY3;\n            y4 = rotatedY4;\n        }\n        x1 += x + originX;\n        x2 += x + originX;\n        x3 += x + originX;\n        x4 += x + originX;\n        y1 += y + originY;\n        y2 += y + originY;\n        y3 += y + originY;\n        y4 += y + originY;\n        var i = 0;\n        quad[i++] = x1;\n        quad[i++] = y1;\n        quad[i++] = color.r;\n        quad[i++] = color.g;\n        quad[i++] = color.b;\n        quad[i++] = color.a;\n        quad[i++] = u1;\n        quad[i++] = v1;\n        if (this.twoColorTint) {\n            quad[i++] = 0;\n            quad[i++] = 0;\n            quad[i++] = 0;\n            quad[i++] = 0;\n        }\n        quad[i++] = x2;\n        quad[i++] = y2;\n        quad[i++] = color.r;\n        quad[i++] = color.g;\n        quad[i++] = color.b;\n        quad[i++] = color.a;\n        quad[i++] = u2;\n        quad[i++] = v1;\n        if (this.twoColorTint) {\n            quad[i++] = 0;\n            quad[i++] = 0;\n            quad[i++] = 0;\n            quad[i++] = 0;\n        }\n        quad[i++] = x3;\n        quad[i++] = y3;\n        quad[i++] = color.r;\n        quad[i++] = color.g;\n        quad[i++] = color.b;\n        quad[i++] = color.a;\n        quad[i++] = u2;\n        quad[i++] = v2;\n        if (this.twoColorTint) {\n            quad[i++] = 0;\n            quad[i++] = 0;\n            quad[i++] = 0;\n            quad[i++] = 0;\n        }\n        quad[i++] = x4;\n        quad[i++] = y4;\n        quad[i++] = color.r;\n        quad[i++] = color.g;\n        quad[i++] = color.b;\n        quad[i++] = color.a;\n        quad[i++] = u1;\n        quad[i++] = v2;\n        if (this.twoColorTint) {\n            quad[i++] = 0;\n            quad[i++] = 0;\n            quad[i++] = 0;\n            quad[i] = 0;\n        }\n        this.drawVertices(texture, quad, QUAD_TRIANGLES);\n    }\n}\nexports.PolygonBatch = PolygonBatch;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}