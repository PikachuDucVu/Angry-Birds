{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2ContactListener, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { AssetManager, createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Vector2, ViewportInputHandler } from \"gdxts\";\nimport { ContactListenerSystem } from \"./system/ContactListenerSystem\";\nimport { BackgroundRenderSystem } from \"./system/BackgroundRenderSystem\";\nimport { BirdRenderSystem } from \"./system/BirdRenderSystem\";\nimport { BoxesAndPigsRenderSystem } from \"./system/BoxesAndPigsRenderSystem\";\nimport { inputHandlerSystem } from \"./system/inputHandleSystem\";\nimport { ShapeRendererSystem } from \"./system/ShapeRendererSystem\";\nimport { SlingshotRenderSystem } from \"./system/SlingshotRenderSystem\";\nconst WORLD_WIDTH = 1300;\nconst WORLD_HEIGHT = 500;\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.SetUserData(\"ground\");\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius, userData) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\n  const circle = new b2CircleShape();\n  circle.m_radius = radius;\n  const fixtureDef = new b2FixtureDef();\n  fixtureDef.shape = circle;\n  fixtureDef.restitution = 0.5; // bounce bird\n\n  fixtureDef.friction = 1;\n  fixtureDef.shape = circle;\n  const body = world.CreateBody(bodyDef);\n  body.CreateFixture(fixtureDef);\n  body.SetUserData(userData);\n  return body;\n};\n\nconst createBox = (world, x, y, width, height, userData) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.5, height * 0.5);\n  body.SetUserData({\n    name: userData.name,\n    durability: 0\n  });\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  const inputHandler = new ViewportInputHandler(viewport);\n  const assetManager = new AssetManager(gl);\n  const contactListener = new b2ContactListener();\n  await assetManager.loadTexture(\"./background.png\", \"bg\");\n  await assetManager.loadTexture(\"./bird.png\", \"birdAsset\");\n  await assetManager.loadTexture(\"./pigAsset.png\", \"pigAsset\");\n  await assetManager.loadTexture(\"./testAnimation1.png\", \"boxAsset\");\n  await assetManager.loadTexture(\"./slingshot.png\", \"slingShot\");\n  await assetManager.loadTexture(\"./testAnimation1.png\", \"boxTexture\");\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const physicWorld = new b2World({\n    x: 0,\n    y: 10\n  });\n  const BALL_RADIUS = 0.2;\n  let birdNumber = 1;\n  let bird = [createBall(physicWorld, 2, 3.45, BALL_RADIUS, \"bird\" + birdNumber++)];\n\n  for (let i = 0; i < 2; i++) {\n    bird.push(createBall(physicWorld, 2.2, 3.4, BALL_RADIUS, \"bird\" + birdNumber++));\n  }\n\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  console.log(bird);\n\n  for (let wall of wallData) {\n    createWall(physicWorld, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  let delayTime = 0;\n  const BOX_SIZE = 0.5;\n  const PIG_SIZE = 0.3;\n  const pigs = [];\n  const boxes = [];\n  let pigNumber = 0;\n  let boxNumber = 0;\n  let positionBoxX = 6;\n  let positionBoxY = 4.3;\n  let birdOnSlingShot = true;\n  const originPosition = new Vector2(bird[0].GetPosition().x * METER_TO_WORLD, bird[0].GetPosition().y * METER_TO_WORLD);\n  let slingPos = new Vector2(bird[0].GetPosition().x * METER_TO_WORLD, bird[0].GetPosition().y * METER_TO_WORLD);\n\n  for (let i = 0; i < 3; i++) {\n    positionBoxX = 6 + i * 0.4;\n\n    for (let j = 0; j <= i; j++) {\n      boxes.push(createBox(physicWorld, positionBoxX += 0.51, positionBoxY -= 0.55, BOX_SIZE, BOX_SIZE, {\n        name: `box ${boxNumber++}`\n      }));\n    }\n\n    if (i < 2) {\n      pigs.push(createBox(physicWorld, positionBoxX + 0.5, positionBoxY - 0.25, PIG_SIZE, PIG_SIZE, {\n        name: `pig ${pigNumber++}`\n      }));\n    }\n  }\n\n  const world = new World();\n  world.register(\"inputHandler\", inputHandler);\n  world.register(\"contactListener\", contactListener);\n  world.register(\"delayTime\", delayTime);\n  world.register(\"gl\", gl);\n  world.register(\"shapeRenderer\", shapeRenderer);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"batch\", batch);\n  world.register(\"bird\", bird);\n  world.register(\"boxes\", boxes);\n  world.register(\"pigs\", pigs);\n  world.register(\"originPosition\", originPosition);\n  world.register(\"slingPos\", slingPos);\n  world.register(\"physicWorld\", physicWorld);\n  world.register(\"birdOnSlingShot\", birdOnSlingShot);\n  world.register(\"createBall\", createBall);\n  world.register(\"birdNumber\", birdNumber);\n  world.addSystem(new BackgroundRenderSystem(), false);\n  world.addSystem(new ShapeRendererSystem(), false);\n  world.addSystem(new inputHandlerSystem(), false);\n  world.addSystem(new BirdRenderSystem(), false);\n  world.addSystem(new BoxesAndPigsRenderSystem(), false);\n  world.addSystem(new SlingshotRenderSystem(), false);\n  world.addSystem(new ContactListenerSystem(), false);\n  gl.clearColor(0, 0, 0, 1);\n  physicWorld.SetContactListener(contactListener);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    batch.setProjection(camera.combined);\n    shapeRenderer.setProjection(camera.combined);\n    world.setDelta(delta);\n    world.processActiveSystem();\n    world.processPassiveSystem();\n    physicWorld.Step(delta, 8, 3);\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2ContactListener","b2FixtureDef","b2PolygonShape","b2World","World","AssetManager","createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Vector2","ViewportInputHandler","ContactListenerSystem","BackgroundRenderSystem","BirdRenderSystem","BoxesAndPigsRenderSystem","inputHandlerSystem","ShapeRendererSystem","SlingshotRenderSystem","WORLD_WIDTH","WORLD_HEIGHT","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createBall","radius","userData","circle","m_radius","fixtureDef","restitution","friction","createBox","b2_dynamicBody","name","durability","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","batch","shapeRenderer","inputHandler","assetManager","contactListener","loadTexture","setYDown","physicWorld","BALL_RADIUS","birdNumber","bird","i","push","mapData","fetch","then","res","json","wallData","layers","find","l","objects","console","log","wall","delayTime","BOX_SIZE","PIG_SIZE","pigs","boxes","pigNumber","boxNumber","positionBoxX","positionBoxY","birdOnSlingShot","originPosition","GetPosition","slingPos","j","register","addSystem","clearColor","SetContactListener","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2ContactListener,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  AssetManager,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { ContactListenerSystem } from \"./system/ContactListenerSystem\";\r\nimport { BackgroundRenderSystem } from \"./system/BackgroundRenderSystem\";\r\nimport { BirdRenderSystem } from \"./system/BirdRenderSystem\";\r\nimport { BoxesAndPigsRenderSystem } from \"./system/BoxesAndPigsRenderSystem\";\r\nimport { inputHandlerSystem } from \"./system/inputHandleSystem\";\r\nimport { ShapeRendererSystem } from \"./system/ShapeRendererSystem\";\r\nimport { SlingshotRenderSystem } from \"./system/SlingshotRenderSystem\";\r\n\r\nconst WORLD_WIDTH = 1300;\r\nconst WORLD_HEIGHT = 500;\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.SetUserData(\"ground\");\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number,\r\n  userData: string\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n  fixtureDef.restitution = 0.5; // bounce bird\r\n  fixtureDef.friction = 1;\r\n  fixtureDef.shape = circle;\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.SetUserData(userData);\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  userData: {\r\n    name: string;\r\n  }\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.5, height * 0.5);\r\n  body.SetUserData({\r\n    name: userData.name,\r\n    durability: 0,\r\n  });\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n  const assetManager = new AssetManager(gl);\r\n  const contactListener = new b2ContactListener();\r\n\r\n  await assetManager.loadTexture(\"./background.png\", \"bg\");\r\n  await assetManager.loadTexture(\"./bird.png\", \"birdAsset\");\r\n  await assetManager.loadTexture(\"./pigAsset.png\", \"pigAsset\");\r\n  await assetManager.loadTexture(\"./testAnimation1.png\", \"boxAsset\");\r\n  await assetManager.loadTexture(\"./slingshot.png\", \"slingShot\");\r\n  await assetManager.loadTexture(\"./testAnimation1.png\", \"boxTexture\");\r\n\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n  const BALL_RADIUS = 0.2;\r\n  let birdNumber = 1;\r\n  let bird: b2Body[] = [\r\n    createBall(physicWorld, 2, 3.45, BALL_RADIUS, \"bird\" + birdNumber++),\r\n  ];\r\n  for (let i = 0; i < 2; i++) {\r\n    bird.push(\r\n      createBall(physicWorld, 2.2, 3.4, BALL_RADIUS, \"bird\" + birdNumber++)\r\n    );\r\n  }\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n  console.log(bird);\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      physicWorld,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n\r\n  let delayTime = 0;\r\n  const BOX_SIZE = 0.5;\r\n  const PIG_SIZE = 0.3;\r\n  const pigs: b2Body[] = [];\r\n  const boxes: b2Body[] = [];\r\n  let pigNumber = 0;\r\n  let boxNumber = 0;\r\n  let positionBoxX = 6;\r\n  let positionBoxY = 4.3;\r\n  let birdOnSlingShot = true;\r\n\r\n  const originPosition = new Vector2(\r\n    bird[0].GetPosition().x * METER_TO_WORLD,\r\n    bird[0].GetPosition().y * METER_TO_WORLD\r\n  );\r\n  let slingPos = new Vector2(\r\n    bird[0].GetPosition().x * METER_TO_WORLD,\r\n    bird[0].GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    positionBoxX = 6 + i * 0.4;\r\n    for (let j = 0; j <= i; j++) {\r\n      boxes.push(\r\n        createBox(\r\n          physicWorld,\r\n          (positionBoxX += 0.51),\r\n          (positionBoxY -= 0.55),\r\n          BOX_SIZE,\r\n          BOX_SIZE,\r\n          {\r\n            name: `box ${boxNumber++}`,\r\n          }\r\n        )\r\n      );\r\n    }\r\n    if (i < 2) {\r\n      pigs.push(\r\n        createBox(\r\n          physicWorld,\r\n          positionBoxX + 0.5,\r\n          positionBoxY - 0.25,\r\n          PIG_SIZE,\r\n          PIG_SIZE,\r\n          {\r\n            name: `pig ${pigNumber++}`,\r\n          }\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  const world = new World();\r\n  world.register(\"inputHandler\", inputHandler);\r\n  world.register(\"contactListener\", contactListener);\r\n  world.register(\"delayTime\", delayTime);\r\n  world.register(\"gl\", gl);\r\n  world.register(\"shapeRenderer\", shapeRenderer);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"bird\", bird);\r\n  world.register(\"boxes\", boxes);\r\n  world.register(\"pigs\", pigs);\r\n  world.register(\"originPosition\", originPosition);\r\n  world.register(\"slingPos\", slingPos);\r\n  world.register(\"physicWorld\", physicWorld);\r\n  world.register(\"birdOnSlingShot\", birdOnSlingShot);\r\n  world.register(\"createBall\", createBall);\r\n  world.register(\"birdNumber\", birdNumber);\r\n  world.addSystem(new BackgroundRenderSystem(), false);\r\n  world.addSystem(new ShapeRendererSystem(), false);\r\n  world.addSystem(new inputHandlerSystem(), false);\r\n  world.addSystem(new BirdRenderSystem(), false);\r\n  world.addSystem(new BoxesAndPigsRenderSystem(), false);\r\n  world.addSystem(new SlingshotRenderSystem(), false);\r\n  world.addSystem(new ContactListenerSystem(), false);\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  physicWorld.SetContactListener(contactListener);\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    batch.setProjection(camera.combined);\r\n    shapeRenderer.setProjection(camera.combined);\r\n    world.setDelta(delta);\r\n    world.processActiveSystem();\r\n    world.processPassiveSystem();\r\n    physicWorld.Step(delta, 8, 3);\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}