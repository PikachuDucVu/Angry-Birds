{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Vector2 } from \"gdxts\";\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./7251.png\");\n  const redBlock = await Texture.load(gl, \"./RedBlock.png\");\n  const purpleBlock = await Texture.load(gl, \"./PurpleBlock.png\");\n  const orangeBlock = await Texture.load(gl, \"./OrangeBlock.png\");\n  const yellowBlock = await Texture.load(gl, \"./YellowBlock.png\");\n  const blueBlock = await Texture.load(gl, \"./BlueBlock.png\");\n  const blueSkyBlock = await Texture.load(gl, \"./BlueSkyBlock.png\");\n  const greenBlock = await Texture.load(gl, \"./GreenBlock.png\");\n  let map = [];\n\n  for (let i = 0; i < 10; i++) {\n    for (let j = 0; j < 20; i++) {}\n  } //tetromino\n\n\n  const tetrominos = {\n    I: [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\n    J: [[1, 0, 0], [1, 1, 1], [0, 0, 0]],\n    L: [[0, 0, 1], [1, 1, 1], [0, 0, 0]],\n    O: [[1, 1], [1, 1]],\n    S: [[0, 1, 1], [1, 1, 0], [0, 0, 0]],\n    Z: [[1, 1, 0], [0, 1, 1], [0, 0, 0]],\n    T: [[0, 1, 0], [1, 1, 1], [0, 0, 0]]\n  }; //config game\n\n  let blockPosition = new Vector2(417, 1833);\n  let currentBlock = tetrominos.O;\n  let timeDelay = 0;\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // draw the map\n\n\n  for (let row = 0; row < 20; row++) {\n    for (let col = 0; col < 20; col++) {}\n  }\n\n  createGameLoop(delta => {\n    timeDelay += delta;\n    console.log(timeDelay);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000);\n    shapeRenderer.end();\n\n    if (timeDelay >= 1.5) {\n      if (blockPosition.y >= 83) {\n        blockPosition.y -= 83;\n      }\n\n      timeDelay = 0;\n    }\n\n    window.addEventListener(\"keydown\", function (e) {\n      if (e) {}\n    }); //draw background\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background, 0, 0, 1000, 2000);\n    batch.draw(yellowBlock, blockPosition.x, blockPosition.y, 83, 83);\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Vector2","init","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","background","load","bgRight","block","redBlock","purpleBlock","orangeBlock","yellowBlock","blueBlock","blueSkyBlock","greenBlock","map","i","j","tetrominos","I","J","L","O","S","Z","T","blockPosition","currentBlock","timeDelay","getRandomInt","min","max","Math","floor","random","row","col","delta","console","log","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end","y","window","addEventListener","e","draw","x"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\n  createGameLoop,\n  createStage,\n  createViewport,\n  PolygonBatch,\n  ShapeRenderer,\n  Texture,\n  Vector2,\n  BitmapFont,\n  TextureRegion,\n  Color,\n} from \"gdxts\";\n\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./7251.png\");\n  const redBlock = await Texture.load(gl, \"./RedBlock.png\");\n  const purpleBlock = await Texture.load(gl, \"./PurpleBlock.png\");\n  const orangeBlock = await Texture.load(gl, \"./OrangeBlock.png\");\n  const yellowBlock = await Texture.load(gl, \"./YellowBlock.png\");\n  const blueBlock = await Texture.load(gl, \"./BlueBlock.png\");\n  const blueSkyBlock = await Texture.load(gl, \"./BlueSkyBlock.png\");\n  const greenBlock = await Texture.load(gl, \"./GreenBlock.png\");\n\n  let map = [];\n\n  for (let i = 0; i < 10; i++) {\n    for (let j = 0; j < 20; i++) {}\n  }\n\n  //tetromino\n  const tetrominos = {\n    I: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    J: [\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    L: [\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    O: [\n      [1, 1],\n      [1, 1],\n    ],\n    S: [\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 0],\n    ],\n    Z: [\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0],\n    ],\n    T: [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n  };\n\n  //config game\n\n  let blockPosition = new Vector2(417, 1833);\n  let currentBlock = tetrominos.O;\n  let timeDelay = 0;\n\n  function getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  // draw the map\n  for (let row = 0; row < 20; row++) {\n    for (let col = 0; col < 20; col++) {}\n  }\n\n  createGameLoop((delta: number) => {\n    timeDelay += delta;\n    console.log(timeDelay);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000);\n    shapeRenderer.end();\n    if (timeDelay >= 1.5) {\n      if (blockPosition.y >= 83) {\n        blockPosition.y -= 83;\n      }\n      timeDelay = 0;\n    }\n\n    window.addEventListener(\"keydown\", function (e) {\n      if (e) {\n      }\n    });\n\n    //draw background\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background, 0, 0, 1000, 2000);\n\n    batch.draw(yellowBlock, blockPosition.x, blockPosition.y, 83, 83);\n\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\n\ninit();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}