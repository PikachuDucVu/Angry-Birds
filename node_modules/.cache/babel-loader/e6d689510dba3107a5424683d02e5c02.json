{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _slicedToArray = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextureAtlas = void 0;\n\nvar Texture_1 = require(\"./Texture\");\n\nvar TextureRegion_1 = require(\"./TextureRegion\");\n\nfunction concatAndResolveUrl(url, concat) {\n  var url1 = url.split('/');\n  var url2 = concat.split('/');\n  var url3 = [];\n\n  for (var i = 0, l = url1.length; i < l; i++) {\n    if (url1[i] === '..') {\n      url3.pop();\n    } else if (url1[i] === '.') {\n      continue;\n    } else {\n      url3.push(url1[i]);\n    }\n  }\n\n  for (var _i = 0, _l = url2.length; _i < _l; _i++) {\n    if (url2[_i] === '..') {\n      url3.pop();\n    } else if (url2[_i] === '.') {\n      continue;\n    } else {\n      url3.push(url2[_i]);\n    }\n  }\n\n  return url3.join('/');\n}\n\nvar TextureAtlas = /*#__PURE__*/function () {\n  function TextureAtlas(pages, regions) {\n    _classCallCheck(this, TextureAtlas);\n\n    this.pages = pages;\n    this.regions = regions;\n  }\n\n  _createClass(TextureAtlas, [{\n    key: \"dispose\",\n    value: function dispose() {\n      var _iterator = _createForOfIteratorHelper(this.pages),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var page = _step.value;\n          page.dispose();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"getPages\",\n    value: function getPages() {\n      return this.pages;\n    }\n  }, {\n    key: \"getRegions\",\n    value: function getRegions() {\n      return this.regions;\n    }\n  }, {\n    key: \"findRegion\",\n    value: function findRegion(name, index) {\n      for (var i = 0; i < this.regions.length; i++) {\n        var region = this.regions[i];\n        if (region.name !== name) continue;\n        if (index !== undefined && region.index !== index) continue;\n        return region;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findRegions\",\n    value: function findRegions(name) {\n      return this.regions.filter(function (region) {\n        return region.name === name;\n      }).sort(function (a, b) {\n        return a.index - b.index;\n      });\n    }\n  }], [{\n    key: \"load\",\n    value: function load(gl, packFileUrl, textureOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var packFileContent, pageData, pages, regionsData, pageImage, lines, i, tuple, line, file, width, height, format, _tuple, _tuple2, min, max, direction, repeatX, repeatY, mipMaps, name, rotate, left, top, _width, _height, region, _i2, _pageData, page, regions, _i3, _regionsData, regionData, x, y, _width2, _height2, _regionData$page, texture, invTexWidth, invTexHeight;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(packFileUrl).then(function (res) {\n                  return res.text();\n                });\n\n              case 2:\n                packFileContent = _context.sent;\n                pageData = [];\n                pages = [];\n                regionsData = [];\n                lines = packFileContent.split('\\n');\n                i = 0;\n\n              case 8:\n                if (!true) {\n                  _context.next = 16;\n                  break;\n                }\n\n                line = lines[i];\n\n                if (!(line === undefined)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"break\", 16);\n\n              case 12:\n                if (line.trim().length === 0) {\n                  pageImage = null;\n                } else if (pageImage === null) {\n                  file = concatAndResolveUrl(packFileUrl, \"../\".concat(line));\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n                  width = parseInt(tuple[0], 10);\n                  height = parseInt(tuple[1], 10);\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n                  format = tuple[0];\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n                  _tuple = tuple, _tuple2 = _slicedToArray(_tuple, 2), min = _tuple2[0], max = _tuple2[1];\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n                  direction = tuple[0];\n                  repeatX = Texture_1.TextureWrap.ClampToEdge;\n                  repeatY = Texture_1.TextureWrap.ClampToEdge;\n\n                  if (direction === 'x') {\n                    repeatX = Texture_1.TextureWrap.Repeat;\n                  } else if (direction === 'y') {\n                    repeatY = Texture_1.TextureWrap.Repeat;\n                  } else if (direction === 'xy') {\n                    repeatX = Texture_1.TextureWrap.Repeat;\n                    repeatY = Texture_1.TextureWrap.Repeat;\n                  }\n\n                  mipMaps = min !== 'Nearest' && min !== 'Linear';\n                  pageImage = {\n                    file: file,\n                    width: width,\n                    height: height,\n                    format: format,\n                    mipMaps: mipMaps,\n                    min: min,\n                    max: max,\n                    direction: direction,\n                    repeatX: repeatX,\n                    repeatY: repeatY\n                  };\n                  pageData.push(pageImage);\n                } else {\n                  name = line;\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n                  rotate = tuple[0] === 'true';\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n                  left = parseInt(tuple[0], 10);\n                  top = parseInt(tuple[1], 10);\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n                  _width = parseInt(tuple[0], 10);\n                  _height = parseInt(tuple[1], 10);\n                  region = {\n                    name: name,\n                    rotate: rotate,\n                    left: left,\n                    top: top,\n                    width: _width,\n                    height: _height,\n                    page: pageImage\n                  };\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n\n                  if (tuple.length === 4) {\n                    region.splits = tuple.map(function (i) {\n                      return parseInt(i, 10);\n                    });\n                    i++;\n                    line = lines[i];\n                    tuple = line.split(':')[1].split(',').map(function (s) {\n                      return s.trim();\n                    });\n\n                    if (tuple.length === 4) {\n                      region.pads = tuple.map(function (i) {\n                        return parseInt(i, 10);\n                      });\n                      i++;\n                      line = lines[i];\n                      tuple = line.split(':')[1].split(',').map(function (s) {\n                        return s.trim();\n                      });\n                    }\n                  }\n\n                  region.originalWidth = parseInt(tuple[0], 10);\n                  region.originalHeight = parseInt(tuple[1], 10);\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n                  region.offsetX = parseInt(tuple[0], 10);\n                  region.offsetY = parseInt(tuple[1], 10);\n                  i++;\n                  line = lines[i];\n                  tuple = line.split(':')[1].split(',').map(function (s) {\n                    return s.trim();\n                  });\n                  region.index = parseInt(tuple[0], 10);\n                  regionsData.push(region);\n                }\n\n                i++;\n                _context.next = 8;\n                break;\n\n              case 16:\n                _i2 = 0, _pageData = pageData;\n\n              case 17:\n                if (!(_i2 < _pageData.length)) {\n                  _context.next = 27;\n                  break;\n                }\n\n                page = _pageData[_i2];\n                _context.next = 21;\n                return Texture_1.Texture.load(gl, page.file, textureOptions);\n\n              case 21:\n                page.texture = _context.sent;\n                page.invTexWidth = 1 / page.texture.width;\n                page.invTexHeight = 1 / page.texture.height;\n\n              case 24:\n                _i2++;\n                _context.next = 17;\n                break;\n\n              case 27:\n                regions = [];\n\n                for (_i3 = 0, _regionsData = regionsData; _i3 < _regionsData.length; _i3++) {\n                  regionData = _regionsData[_i3];\n                  x = regionData.left, y = regionData.top;\n                  _width2 = regionData.rotate ? regionData.height : regionData.width;\n                  _height2 = regionData.rotate ? regionData.width : regionData.height;\n                  _regionData$page = regionData.page, texture = _regionData$page.texture, invTexWidth = _regionData$page.invTexWidth, invTexHeight = _regionData$page.invTexHeight;\n                  regions.push(new TextureRegion_1.TextureRegion(texture, x, y, _width2, _height2, regionData, invTexWidth, invTexHeight, regionData.rotate));\n                }\n\n                return _context.abrupt(\"return\", new TextureAtlas(pages, regions));\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }]);\n\n  return TextureAtlas;\n}();\n\nexports.TextureAtlas = TextureAtlas;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","TextureAtlas","Texture_1","require","TextureRegion_1","concatAndResolveUrl","url","concat","url1","split","url2","url3","i","l","length","pop","push","join","pages","regions","page","dispose","name","index","region","undefined","filter","sort","a","b","gl","packFileUrl","textureOptions","fetch","res","text","packFileContent","pageData","regionsData","lines","line","trim","pageImage","file","tuple","map","s","width","parseInt","height","format","min","max","direction","repeatX","TextureWrap","ClampToEdge","repeatY","Repeat","mipMaps","rotate","left","top","splits","pads","originalWidth","originalHeight","offsetX","offsetY","Texture","load","texture","invTexWidth","invTexHeight","regionData","x","y","TextureRegion"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/TextureAtlas.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextureAtlas = void 0;\nconst Texture_1 = require(\"./Texture\");\nconst TextureRegion_1 = require(\"./TextureRegion\");\nfunction concatAndResolveUrl(url, concat) {\n    let url1 = url.split('/');\n    let url2 = concat.split('/');\n    let url3 = [];\n    for (let i = 0, l = url1.length; i < l; i++) {\n        if (url1[i] === '..') {\n            url3.pop();\n        }\n        else if (url1[i] === '.') {\n            continue;\n        }\n        else {\n            url3.push(url1[i]);\n        }\n    }\n    for (let i = 0, l = url2.length; i < l; i++) {\n        if (url2[i] === '..') {\n            url3.pop();\n        }\n        else if (url2[i] === '.') {\n            continue;\n        }\n        else {\n            url3.push(url2[i]);\n        }\n    }\n    return url3.join('/');\n}\nclass TextureAtlas {\n    constructor(pages, regions) {\n        this.pages = pages;\n        this.regions = regions;\n    }\n    dispose() {\n        for (let page of this.pages) {\n            page.dispose();\n        }\n    }\n    getPages() {\n        return this.pages;\n    }\n    getRegions() {\n        return this.regions;\n    }\n    findRegion(name, index) {\n        for (let i = 0; i < this.regions.length; i++) {\n            let region = this.regions[i];\n            if (region.name !== name)\n                continue;\n            if (index !== undefined && region.index !== index)\n                continue;\n            return region;\n        }\n        return null;\n    }\n    findRegions(name) {\n        return this.regions.filter(region => region.name === name).sort((a, b) => a.index - b.index);\n    }\n    static load(gl, packFileUrl, textureOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const packFileContent = yield fetch(packFileUrl).then(res => res.text());\n            const pageData = [];\n            const pages = [];\n            const regionsData = [];\n            let pageImage;\n            const lines = packFileContent.split('\\n');\n            let i = 0;\n            let tuple;\n            while (true) {\n                let line = lines[i];\n                if (line === undefined) {\n                    break;\n                }\n                if (line.trim().length === 0) {\n                    pageImage = null;\n                }\n                else if (pageImage === null) {\n                    const file = concatAndResolveUrl(packFileUrl, `../${line}`);\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    const width = parseInt(tuple[0], 10);\n                    const height = parseInt(tuple[1], 10);\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    const format = tuple[0];\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    const [min, max] = tuple;\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    const direction = tuple[0];\n                    let repeatX = Texture_1.TextureWrap.ClampToEdge;\n                    let repeatY = Texture_1.TextureWrap.ClampToEdge;\n                    if (direction === 'x') {\n                        repeatX = Texture_1.TextureWrap.Repeat;\n                    }\n                    else if (direction === 'y') {\n                        repeatY = Texture_1.TextureWrap.Repeat;\n                    }\n                    else if (direction === 'xy') {\n                        repeatX = Texture_1.TextureWrap.Repeat;\n                        repeatY = Texture_1.TextureWrap.Repeat;\n                    }\n                    const mipMaps = min !== 'Nearest' && min !== 'Linear';\n                    pageImage = {\n                        file,\n                        width,\n                        height,\n                        format,\n                        mipMaps,\n                        min,\n                        max,\n                        direction,\n                        repeatX,\n                        repeatY\n                    };\n                    pageData.push(pageImage);\n                }\n                else {\n                    const name = line;\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    const rotate = tuple[0] === 'true';\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    const left = parseInt(tuple[0], 10);\n                    const top = parseInt(tuple[1], 10);\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    const width = parseInt(tuple[0], 10);\n                    const height = parseInt(tuple[1], 10);\n                    const region = {\n                        name,\n                        rotate,\n                        left,\n                        top,\n                        width,\n                        height,\n                        page: pageImage\n                    };\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    if (tuple.length === 4) {\n                        region.splits = tuple.map(i => parseInt(i, 10));\n                        i++;\n                        line = lines[i];\n                        tuple = line\n                            .split(':')[1]\n                            .split(',')\n                            .map(s => s.trim());\n                        if (tuple.length === 4) {\n                            region.pads = tuple.map(i => parseInt(i, 10));\n                            i++;\n                            line = lines[i];\n                            tuple = line\n                                .split(':')[1]\n                                .split(',')\n                                .map(s => s.trim());\n                        }\n                    }\n                    region.originalWidth = parseInt(tuple[0], 10);\n                    region.originalHeight = parseInt(tuple[1], 10);\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    region.offsetX = parseInt(tuple[0], 10);\n                    region.offsetY = parseInt(tuple[1], 10);\n                    i++;\n                    line = lines[i];\n                    tuple = line\n                        .split(':')[1]\n                        .split(',')\n                        .map(s => s.trim());\n                    region.index = parseInt(tuple[0], 10);\n                    regionsData.push(region);\n                }\n                i++;\n            }\n            for (let page of pageData) {\n                page.texture = yield Texture_1.Texture.load(gl, page.file, textureOptions);\n                page.invTexWidth = 1 / page.texture.width;\n                page.invTexHeight = 1 / page.texture.height;\n            }\n            const regions = [];\n            for (let regionData of regionsData) {\n                const { left: x, top: y } = regionData;\n                const width = regionData.rotate ? regionData.height : regionData.width;\n                const height = regionData.rotate ? regionData.width : regionData.height;\n                const { texture, invTexWidth, invTexHeight } = regionData.page;\n                regions.push(new TextureRegion_1.TextureRegion(texture, x, y, width, height, regionData, invTexWidth, invTexHeight, regionData.rotate));\n            }\n            return new TextureAtlas(pages, regions);\n        });\n    }\n}\nexports.TextureAtlas = TextureAtlas;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}