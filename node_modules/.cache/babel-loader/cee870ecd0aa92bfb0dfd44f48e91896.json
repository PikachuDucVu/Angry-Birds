{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2ContactListener, b2PolygonShape, b2World, b2_pi } from \"box2d.ts\";\nimport { Color, createGameLoop, createStage, createViewport, InputEvent, PolygonBatch, ShapeRenderer, Texture, Vector2, ViewportInputHandler } from \"gdxts\";\nconst WORLD_WIDTH = 1000;\nconst WORLD_HEIGHT = 500;\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x, y);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2CircleShape(radius);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst createBox = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x, y);\n  bodyDef.awake = false;\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.5, height * 0.5);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const pig = await Texture.load(gl, \"./pig.png\");\n  const bird = await Texture.load(gl, \"./bird.png\");\n  const background = await Texture.load(gl, \"./background.png\");\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const shapeRenderer = new ShapeRenderer(gl);\n  const listener = new b2ContactListener();\n  const birdOffset = new Vector2(-15, -15);\n  let firstCheck = false;\n\n  listener.BeginContact = contactPtr => {\n    // var contact = Box2D.wrapPointer(contactPtr, b2Contact);\n    const fixtureA = contactPtr.GetFixtureA();\n    const fixtureB = contactPtr.GetFixtureB();\n    console.log(contactPtr);\n\n    if (!firstCheck) {\n      firstCheck = true;\n      console.log(fixtureA.m_userData);\n      console.log(\"Dcm\");\n    }\n  };\n\n  const world = new b2World({\n    x: 0,\n    y: 10\n  });\n  world.SetContactListener(listener);\n\n  for (let wall of wallData) {\n    createWall(world, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  let spaceOfEachBoxes = 0;\n  const BOX_SIZE = 0.5;\n  const boxes = []; // for (let i = 0; i < 3; i++) {\n  //   boxes.push(\n  //     createBox(world, 8, (spaceOfEachBoxes += 1), BOX_SIZE, BOX_SIZE)\n  //   );\n  // }\n\n  boxes.push(createBox(world, 0, 0, BOX_SIZE, BOX_SIZE));\n  const BALL_RADIUS = 0.2;\n  const BALL_SIZE = 0.5;\n  const ball = createBall(world, 2, 3.5, BALL_RADIUS);\n  let originPosition = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  let firstClick = false;\n  const inputHandler = new ViewportInputHandler(viewport);\n  let rotation = 0;\n  let stretch = 0;\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\n    if (inputHandler.isTouched()) {\n      originPosition = inputHandler.getTouchedWorldCoord();\n      rotation = Math.atan2(originPosition.y - ball.GetPosition().y * METER_TO_WORLD, originPosition.x - ball.GetPosition().x * METER_TO_WORLD) * 180 / b2_pi + 180; // 0Â° start at the third quadrant\n\n      stretch = Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) / 4 >= 10 ? 10 : Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) / 4; // console.log(ball.GetPosition().y * METER_TO_WORLD, originPosition.y);\n    } else {\n      originPosition = new Vector2(200, 350);\n    }\n  });\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n    ball.SetType(b2BodyType.b2_dynamicBody);\n    ball.ApplyLinearImpulseToCenter({\n      x: (rotation - 270) / 18 >= 3 ? (rotation - 270) / 18 + stretch / 2.5 : (rotation - 270) / 18,\n      y: -stretch + 2\n    }, true);\n  });\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    world.Step(delta, 8, 3);\n    batch.setProjection(camera.combined);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    } // shapeRenderer.circle(\n    //   true,\n    //   ball.GetPosition().x * METER_TO_WORLD,\n    //   ball.GetPosition().y * METER_TO_WORLD,\n    //   BALL_RADIUS * METER_TO_WORLD,\n    //   Color.RED\n    // );\n\n\n    shapeRenderer.end();\n    batch.begin();\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\n    batch.end();\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 1.9 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD, Color.MAGENTA);\n    shapeRenderer.circle(true, originPosition.x, originPosition.y, 0.1 * METER_TO_WORLD, Color.BLUE);\n    shapeRenderer.end();\n    batch.begin();\n    console.log(\"Dcm\");\n\n    for (let box of boxes) {\n      console.log(box.GetPosition().x, box.GetPosition().y);\n      batch.draw(pig, box.GetPosition().x * METER_TO_WORLD, box.GetPosition().y * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD); // console.log(box.GetContactList());\n\n      batch.draw(bird, ball.GetPosition().x * METER_TO_WORLD + birdOffset.x, ball.GetPosition().y * METER_TO_WORLD + birdOffset.y, BALL_RADIUS * 2 * METER_TO_WORLD, BALL_RADIUS * 2 * METER_TO_WORLD);\n    }\n\n    batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2ContactListener","b2PolygonShape","b2World","b2_pi","Color","createGameLoop","createStage","createViewport","InputEvent","PolygonBatch","ShapeRenderer","Texture","Vector2","ViewportInputHandler","WORLD_WIDTH","WORLD_HEIGHT","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","CreateFixture","createBall","radius","createBox","b2_dynamicBody","awake","WALL_COLOR","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","batch","setYDown","pig","load","bird","background","mapData","fetch","then","res","json","wallData","layers","find","l","name","objects","shapeRenderer","listener","birdOffset","firstCheck","BeginContact","contactPtr","fixtureA","GetFixtureA","fixtureB","GetFixtureB","console","log","m_userData","SetContactListener","wall","spaceOfEachBoxes","BOX_SIZE","boxes","push","BALL_RADIUS","BALL_SIZE","ball","originPosition","GetPosition","firstClick","inputHandler","rotation","stretch","addEventListener","TouchMove","isTouched","getTouchedWorldCoord","Math","atan2","abs","TouchEnd","SetType","ApplyLinearImpulseToCenter","clearColor","delta","clear","COLOR_BUFFER_BIT","Step","setProjection","combined","begin","rect","WHITE","end","draw","MAGENTA","circle","BLUE","box"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2Contact,\r\n  b2ContactEdge,\r\n  b2ContactListener,\r\n  b2Draw,\r\n  b2PolygonShape,\r\n  b2World,\r\n  b2_pi,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 1000;\r\nconst WORLD_HEIGHT = 500;\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x, y);\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2CircleShape(radius);\r\n\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x, y);\r\n  bodyDef.awake = false;\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.5, height * 0.5);\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const pig = await Texture.load(gl, \"./pig.png\");\r\n  const bird = await Texture.load(gl, \"./bird.png\");\r\n  const background = await Texture.load(gl, \"./background.png\");\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const listener = new b2ContactListener();\r\n\r\n  const birdOffset: Vector2 = new Vector2(-15, -15);\r\n\r\n  let firstCheck = false;\r\n\r\n  listener.BeginContact = (contactPtr) => {\r\n    // var contact = Box2D.wrapPointer(contactPtr, b2Contact);\r\n    const fixtureA = contactPtr.GetFixtureA();\r\n    const fixtureB = contactPtr.GetFixtureB();\r\n\r\n    console.log(contactPtr);\r\n\r\n    if (!firstCheck) {\r\n      firstCheck = true;\r\n\r\n      console.log(fixtureA.m_userData);\r\n      console.log(\"Dcm\");\r\n    }\r\n  };\r\n\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n\r\n  world.SetContactListener(listener);\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      world,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n  let spaceOfEachBoxes = 0;\r\n\r\n  const BOX_SIZE = 0.5;\r\n  const boxes: b2Body[] = [];\r\n  // for (let i = 0; i < 3; i++) {\r\n  //   boxes.push(\r\n  //     createBox(world, 8, (spaceOfEachBoxes += 1), BOX_SIZE, BOX_SIZE)\r\n  //   );\r\n  // }\r\n\r\n  boxes.push(createBox(world, 0, 0, BOX_SIZE, BOX_SIZE));\r\n\r\n  const BALL_RADIUS = 0.2;\r\n  const BALL_SIZE = 0.5;\r\n  const ball = createBall(world, 2, 3.5, BALL_RADIUS);\r\n  let originPosition = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  let firstClick = false;\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  let rotation = 0;\r\n  let stretch = 0;\r\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n    if (inputHandler.isTouched()) {\r\n      originPosition = inputHandler.getTouchedWorldCoord();\r\n      rotation =\r\n        (Math.atan2(\r\n          originPosition.y - ball.GetPosition().y * METER_TO_WORLD,\r\n          originPosition.x - ball.GetPosition().x * METER_TO_WORLD\r\n        ) *\r\n          180) /\r\n          b2_pi +\r\n        180; // 0Â° start at the third quadrant\r\n\r\n      stretch =\r\n        Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) /\r\n          4 >=\r\n        10\r\n          ? 10\r\n          : Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) /\r\n            4;\r\n      // console.log(ball.GetPosition().y * METER_TO_WORLD, originPosition.y);\r\n    } else {\r\n      originPosition = new Vector2(200, 350);\r\n    }\r\n  });\r\n\r\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n    ball.SetType(b2BodyType.b2_dynamicBody);\r\n    ball.ApplyLinearImpulseToCenter(\r\n      {\r\n        x:\r\n          (rotation - 270) / 18 >= 3\r\n            ? (rotation - 270) / 18 + stretch / 2.5\r\n            : (rotation - 270) / 18,\r\n        y: -stretch + 2,\r\n      },\r\n      true\r\n    );\r\n  });\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    world.Step(delta, 8, 3);\r\n    batch.setProjection(camera.combined);\r\n\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n\r\n    // shapeRenderer.circle(\r\n    //   true,\r\n    //   ball.GetPosition().x * METER_TO_WORLD,\r\n    //   ball.GetPosition().y * METER_TO_WORLD,\r\n\r\n    //   BALL_RADIUS * METER_TO_WORLD,\r\n    //   Color.RED\r\n    // );\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\r\n    batch.end();\r\n\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(\r\n      true,\r\n      1.9 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD,\r\n      Color.MAGENTA\r\n    );\r\n    shapeRenderer.circle(\r\n      true,\r\n      originPosition.x,\r\n      originPosition.y,\r\n      0.1 * METER_TO_WORLD,\r\n      Color.BLUE\r\n    );\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n    console.log(\"Dcm\");\r\n    for (let box of boxes) {\r\n      console.log(box.GetPosition().x, box.GetPosition().y);\r\n      batch.draw(\r\n        pig,\r\n        box.GetPosition().x * METER_TO_WORLD,\r\n        box.GetPosition().y * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD\r\n      );\r\n      // console.log(box.GetContactList());\r\n      batch.draw(\r\n        bird,\r\n        ball.GetPosition().x * METER_TO_WORLD + birdOffset.x,\r\n        ball.GetPosition().y * METER_TO_WORLD + birdOffset.y,\r\n        BALL_RADIUS * 2 * METER_TO_WORLD,\r\n        BALL_RADIUS * 2 * METER_TO_WORLD\r\n      );\r\n    }\r\n\r\n    batch.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}