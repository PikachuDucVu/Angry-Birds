{"ast":null,"code":"import _initializerDefineProperty from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"D:/projects/test-game/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;\n\nimport { b2BodyType } from \"box2d.ts\";\nimport { System, Inject } from \"flat-ecs\";\nimport { InputEvent } from \"gdxts\";\nimport { Constants } from \"../Constants\";\nexport let inputHandlerSystem = (_dec = Inject(\"inputHandler\"), _dec2 = Inject(\"originPosition\"), _dec3 = Inject(\"slingPos\"), _dec4 = Inject(\"bird\"), _dec5 = Inject(\"birdOnSlingShot\"), _dec6 = Inject(\"physicWorld\"), _dec7 = Inject(\"countBird\"), (_class = class inputHandlerSystem extends System {\n  constructor() {\n    super(...arguments);\n\n    _initializerDefineProperty(this, \"inputHandler\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"originPosition\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"slingPos\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"bird\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"birdOnSlingShot\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"physicWorld\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"countBird\", _descriptor7, this);\n  }\n\n  initialized() {\n    console.log(this.countBird);\n    this.inputHandler.addEventListener(InputEvent.TouchMove, () => {\n      if (this.inputHandler.isTouched()) {\n        this.slingPos.setVector(this.inputHandler.getTouchedWorldCoord());\n      }\n    });\n    this.inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n      if (this.countBird <= 3) {\n        this.bird[this.countBird].SetType(b2BodyType.b2_dynamicBody);\n        this.bird[this.countBird].ApplyLinearImpulseToCenter({\n          x: 7 * (this.originPosition.x - this.slingPos.x) / Constants.METER_TO_WORLD,\n          y: 7 * (this.originPosition.y - this.slingPos.y) / Constants.METER_TO_WORLD\n        }, true);\n        this.countBird++;\n      }\n\n      if (this.countBird + 1 <= 3) {\n        setTimeout(() => {\n          this.bird[this.countBird].SetPositionXY(2, 3.45);\n        }, 1000);\n      }\n    });\n\n    window.onkeydown = ev => {\n      if (!this.birdOnSlingShot && ev.key === \"r\") {}\n    };\n  }\n\n  process() {}\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"inputHandler\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"originPosition\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"slingPos\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"bird\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"birdOnSlingShot\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"physicWorld\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"countBird\", [_dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));","map":{"version":3,"names":["b2BodyType","System","Inject","InputEvent","Constants","inputHandlerSystem","initialized","console","log","countBird","inputHandler","addEventListener","TouchMove","isTouched","slingPos","setVector","getTouchedWorldCoord","TouchEnd","bird","SetType","b2_dynamicBody","ApplyLinearImpulseToCenter","x","originPosition","METER_TO_WORLD","y","setTimeout","SetPositionXY","window","onkeydown","ev","birdOnSlingShot","key","process"],"sources":["D:/projects/test-game/src/system/inputHandleSystem.ts"],"sourcesContent":["import { b2Body, b2BodyType, b2World } from \"box2d.ts\";\r\nimport { System, Inject } from \"flat-ecs\";\r\nimport { InputEvent, Vector2, ViewportInputHandler } from \"gdxts\";\r\nimport { Constants } from \"../Constants\";\r\n\r\nexport class inputHandlerSystem extends System {\r\n  @Inject(\"inputHandler\") inputHandler: ViewportInputHandler;\r\n  @Inject(\"originPosition\") originPosition: Vector2;\r\n  @Inject(\"slingPos\") slingPos: Vector2;\r\n  @Inject(\"bird\") bird: b2Body[];\r\n  @Inject(\"birdOnSlingShot\") birdOnSlingShot: boolean;\r\n  @Inject(\"physicWorld\") physicWorld: b2World;\r\n  @Inject(\"countBird\") countBird: number;\r\n  initialized(): void {\r\n    console.log(this.countBird);\r\n    this.inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n      if (this.inputHandler.isTouched()) {\r\n        this.slingPos.setVector(this.inputHandler.getTouchedWorldCoord());\r\n      }\r\n    });\r\n    this.inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n      if (this.countBird <= 3) {\r\n        this.bird[this.countBird].SetType(b2BodyType.b2_dynamicBody);\r\n        this.bird[this.countBird].ApplyLinearImpulseToCenter(\r\n          {\r\n            x:\r\n              (7 * (this.originPosition.x - this.slingPos.x)) /\r\n              Constants.METER_TO_WORLD,\r\n            y:\r\n              (7 * (this.originPosition.y - this.slingPos.y)) /\r\n              Constants.METER_TO_WORLD,\r\n          },\r\n          true\r\n        );\r\n        this.countBird++;\r\n      }\r\n      if (this.countBird + 1 <= 3) {\r\n        setTimeout(() => {\r\n          this.bird[this.countBird].SetPositionXY(2, 3.45);\r\n        }, 1000);\r\n      }\r\n    });\r\n    window.onkeydown = (ev: KeyboardEvent): any => {\r\n      if (!this.birdOnSlingShot && ev.key === \"r\") {\r\n      }\r\n    };\r\n  }\r\n\r\n  process(): void {}\r\n}\r\n"],"mappings":";;;;;;AAAA,SAAiBA,UAAjB,QAA4C,UAA5C;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,UAA/B;AACA,SAASC,UAAT,QAA0D,OAA1D;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,WAAaC,kBAAb,WACGH,MAAM,CAAC,cAAD,CADT,UAEGA,MAAM,CAAC,gBAAD,CAFT,UAGGA,MAAM,CAAC,UAAD,CAHT,UAIGA,MAAM,CAAC,MAAD,CAJT,UAKGA,MAAM,CAAC,iBAAD,CALT,UAMGA,MAAM,CAAC,aAAD,CANT,UAOGA,MAAM,CAAC,WAAD,CAPT,YAAO,MAAMG,kBAAN,SAAiCJ,MAAjC,CAAwC;EAAA;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;EAAA;;EAQ7CK,WAAW,GAAS;IAClBC,OAAO,CAACC,GAAR,CAAY,KAAKC,SAAjB;IACA,KAAKC,YAAL,CAAkBC,gBAAlB,CAAmCR,UAAU,CAACS,SAA9C,EAAyD,MAAM;MAC7D,IAAI,KAAKF,YAAL,CAAkBG,SAAlB,EAAJ,EAAmC;QACjC,KAAKC,QAAL,CAAcC,SAAd,CAAwB,KAAKL,YAAL,CAAkBM,oBAAlB,EAAxB;MACD;IACF,CAJD;IAKA,KAAKN,YAAL,CAAkBC,gBAAlB,CAAmCR,UAAU,CAACc,QAA9C,EAAwD,MAAM;MAC5D,IAAI,KAAKR,SAAL,IAAkB,CAAtB,EAAyB;QACvB,KAAKS,IAAL,CAAU,KAAKT,SAAf,EAA0BU,OAA1B,CAAkCnB,UAAU,CAACoB,cAA7C;QACA,KAAKF,IAAL,CAAU,KAAKT,SAAf,EAA0BY,0BAA1B,CACE;UACEC,CAAC,EACE,KAAK,KAAKC,cAAL,CAAoBD,CAApB,GAAwB,KAAKR,QAAL,CAAcQ,CAA3C,CAAD,GACAlB,SAAS,CAACoB,cAHd;UAIEC,CAAC,EACE,KAAK,KAAKF,cAAL,CAAoBE,CAApB,GAAwB,KAAKX,QAAL,CAAcW,CAA3C,CAAD,GACArB,SAAS,CAACoB;QANd,CADF,EASE,IATF;QAWA,KAAKf,SAAL;MACD;;MACD,IAAI,KAAKA,SAAL,GAAiB,CAAjB,IAAsB,CAA1B,EAA6B;QAC3BiB,UAAU,CAAC,MAAM;UACf,KAAKR,IAAL,CAAU,KAAKT,SAAf,EAA0BkB,aAA1B,CAAwC,CAAxC,EAA2C,IAA3C;QACD,CAFS,EAEP,IAFO,CAAV;MAGD;IACF,CArBD;;IAsBAC,MAAM,CAACC,SAAP,GAAoBC,EAAD,IAA4B;MAC7C,IAAI,CAAC,KAAKC,eAAN,IAAyBD,EAAE,CAACE,GAAH,KAAW,GAAxC,EAA6C,CAC5C;IACF,CAHD;EAID;;EAEDC,OAAO,GAAS,CAAE;;AA3C2B,CAA/C;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}