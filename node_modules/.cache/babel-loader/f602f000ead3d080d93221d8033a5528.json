{"ast":null,"code":"import { createStage, createViewport, createGameLoop, ShapeRenderer, Texture, TextureRegion, PolygonBatch, Animation, PlayMode, ViewportInputHandler, InputEvent, Vector2, Color } from \"gdxts\";\nimport Walkable from \"walkable\";\nexport const initTest2 = async () => {\n  let walkable = new Walkable(500, 1000);\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 500, 1000);\n  const gl = viewport.getContext();\n  const background = await Texture.load(gl, \"./pokemon-bg.jpg\");\n  const mapData = await fetch(\"./test.tmj\").then(res => res.json());\n  const obstacles = mapData.layers.find(l => l.name === \"obstacles\").objects.map(rect => ({ ...rect,\n    y: 1000 - rect.y - rect.height\n  }));\n\n  for (let rect of obstacles) {\n    walkable.addRect(rect.width, rect.height, rect.x, rect.y);\n  } // eslint-disable-next-line\n  // const texture = await Texture.load(gl, \"./charizard.png\");\n\n\n  const characterTexture = await Texture.load(gl, \"./spritesheet.png\"); // const apple = await Texture.load(gl, \"./apple.png\");\n\n  const regions = TextureRegion.splitTexture(characterTexture, 4, 4);\n  const walkDownAnimation = new Animation(regions.slice(0, 4), 0.2);\n  const walkLeftAnimation = new Animation(regions.slice(4, 8), 0.2);\n  const walkRightAnimation = new Animation(regions.slice(8, 12), 0.2);\n  const walkUpAnimation = new Animation(regions.slice(12, 16), 0.2);\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport);\n  let characterPosition = new Vector2(250, 500); // var path = walkable.findPath(\n  //   characterPosition.x,\n  //   characterPosition.y,\n  //   250,\n  //   500,\n  //   1\n  // );\n\n  let frame = 0;\n  let rotation = 0;\n  let vectorResult = new Vector2();\n  let d = new Vector2();\n  gl.clearColor(0, 0, 0, 1);\n  let nextPosition = new Vector2(250, 500);\n  const path = [];\n  inputHandler.addEventListener(InputEvent.TouchStart, (x, y) => {\n    nextPosition = inputHandler.getTouchedWorldCoord();\n    walkable.findPath(characterPosition.x, characterPosition.y, nextPosition.x, nextPosition.y, 10, path);\n    rotation = Math.atan2(nextPosition.y - characterPosition.y, nextPosition.x - characterPosition.x) * 180 / Math.PI;\n    vectorResult.x = nextPosition.x - characterPosition.x;\n    vectorResult.y = nextPosition.y - characterPosition.y;\n    let d = vectorResult.normalize(); // console.log(characterPosition, nextPosition);\n  });\n  const moveSpeed = 2;\n  let count = 0;\n  console.log(characterPosition, nextPosition);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 500, 1000);\n    shapeRenderer.end();\n    let region = walkDownAnimation.getKeyFrame(frame, PlayMode.NORMAL);\n\n    if (characterPosition.x !== nextPosition.x || characterPosition.y !== nextPosition.y) {\n      frame += delta;\n\n      if (rotation >= -45 && rotation < 45) {\n        region = walkRightAnimation.getKeyFrame(frame, PlayMode.LOOP);\n      }\n\n      if (rotation >= -135 && rotation < -45) {\n        region = walkDownAnimation.getKeyFrame(frame, PlayMode.LOOP);\n      }\n\n      if (rotation >= 45 && rotation < 135) {\n        region = walkUpAnimation.getKeyFrame(frame, PlayMode.LOOP);\n      }\n\n      if (rotation >= 135 && rotation < 180 || rotation < -135) {\n        region = walkLeftAnimation.getKeyFrame(frame, PlayMode.LOOP);\n      }\n\n      if (characterPosition.x < nextPosition.x) {\n        characterPosition.x = Math.min(characterPosition.x + d.x * moveSpeed * delta, nextPosition.x);\n      }\n\n      if (characterPosition.y < nextPosition.y) {\n        characterPosition.y = Math.min(characterPosition.y + d.y * moveSpeed * delta, nextPosition.y);\n      }\n\n      if (characterPosition.x > nextPosition.x) {\n        characterPosition.x = Math.max(characterPosition.x - d.x * moveSpeed * delta, nextPosition.x);\n      }\n\n      if (characterPosition.y > nextPosition.y) {\n        characterPosition.y = Math.max(characterPosition.y - d.y * moveSpeed * delta, nextPosition.y);\n      }\n    } else {\n      frame = 0;\n      nextPosition.x = path[count];\n      nextPosition.y = path[count + 1];\n    }\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background, 0, 0, 500, 1000);\n    region.draw(batch, characterPosition.x - 50, characterPosition.y - 20, 100, 100);\n    batch.end();\n    shapeRenderer.begin();\n\n    for (let rect of obstacles) {\n      shapeRenderer.rect(false, rect.x, rect.y, rect.width, rect.height, Color.WHITE);\n    }\n\n    if (path.length >= 4) {\n      for (let i = 2; i <= path.length; i += 2) {\n        shapeRenderer.line(path[i - 2], path[i - 1], path[i], path[i + 1], Color.WHITE);\n      }\n    }\n\n    shapeRenderer.end();\n  });\n};","map":{"version":3,"names":["createStage","createViewport","createGameLoop","ShapeRenderer","Texture","TextureRegion","PolygonBatch","Animation","PlayMode","ViewportInputHandler","InputEvent","Vector2","Color","Walkable","initTest2","walkable","stage","canvas","getCanvas","viewport","gl","getContext","background","load","mapData","fetch","then","res","json","obstacles","layers","find","l","name","objects","map","rect","y","height","addRect","width","x","characterTexture","regions","splitTexture","walkDownAnimation","slice","walkLeftAnimation","walkRightAnimation","walkUpAnimation","shapeRenderer","batch","camera","getCamera","inputHandler","characterPosition","frame","rotation","vectorResult","d","clearColor","nextPosition","path","addEventListener","TouchStart","getTouchedWorldCoord","findPath","Math","atan2","PI","normalize","moveSpeed","count","console","log","delta","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","end","region","getKeyFrame","NORMAL","LOOP","min","max","draw","WHITE","length","i","line"],"sources":["D:/projects/test-game/src/test2.ts"],"sourcesContent":["import {\r\n  createStage,\r\n  createViewport,\r\n  createGameLoop,\r\n  ShapeRenderer,\r\n  Texture,\r\n  TextureRegion,\r\n  PolygonBatch,\r\n  Animation,\r\n  PlayMode,\r\n  ViewportInputHandler,\r\n  InputEvent,\r\n  Vector2,\r\n  Color,\r\n} from \"gdxts\";\r\nimport Walkable from \"walkable\";\r\n\r\nexport const initTest2 = async () => {\r\n  let walkable = new Walkable(500, 1000);\r\n\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, 500, 1000);\r\n  const gl = viewport.getContext();\r\n  const background = await Texture.load(gl, \"./pokemon-bg.jpg\");\r\n\r\n  const mapData = await fetch(\"./test.tmj\").then((res) => res.json());\r\n  const obstacles = mapData.layers\r\n    .find((l: any) => l.name === \"obstacles\")\r\n    .objects.map((rect: any) => ({\r\n      ...rect,\r\n      y: 1000 - rect.y - rect.height,\r\n    }));\r\n\r\n  for (let rect of obstacles) {\r\n    walkable.addRect(rect.width, rect.height, rect.x, rect.y);\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n  // const texture = await Texture.load(gl, \"./charizard.png\");\r\n  const characterTexture = await Texture.load(gl, \"./spritesheet.png\");\r\n  // const apple = await Texture.load(gl, \"./apple.png\");\r\n  const regions = TextureRegion.splitTexture(characterTexture, 4, 4);\r\n\r\n  const walkDownAnimation = new Animation(regions.slice(0, 4), 0.2);\r\n  const walkLeftAnimation = new Animation(regions.slice(4, 8), 0.2);\r\n  const walkRightAnimation = new Animation(regions.slice(8, 12), 0.2);\r\n  const walkUpAnimation = new Animation(regions.slice(12, 16), 0.2);\r\n\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const batch = new PolygonBatch(gl);\r\n  const camera = viewport.getCamera();\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n  let characterPosition = new Vector2(250, 500);\r\n  // var path = walkable.findPath(\r\n  //   characterPosition.x,\r\n  //   characterPosition.y,\r\n  //   250,\r\n  //   500,\r\n  //   1\r\n  // );\r\n\r\n  let frame = 0;\r\n  let rotation = 0;\r\n  let vectorResult = new Vector2();\r\n  let d = new Vector2();\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  let nextPosition = new Vector2(250, 500);\r\n  const path: number[] = [];\r\n  inputHandler.addEventListener(InputEvent.TouchStart, (x, y) => {\r\n    nextPosition = inputHandler.getTouchedWorldCoord();\r\n    walkable.findPath(\r\n      characterPosition.x,\r\n      characterPosition.y,\r\n      nextPosition.x,\r\n      nextPosition.y,\r\n      10,\r\n      path\r\n    );\r\n    rotation =\r\n      (Math.atan2(\r\n        nextPosition.y - characterPosition.y,\r\n        nextPosition.x - characterPosition.x\r\n      ) *\r\n        180) /\r\n      Math.PI;\r\n    vectorResult.x = nextPosition.x - characterPosition.x;\r\n    vectorResult.y = nextPosition.y - characterPosition.y;\r\n    let d = vectorResult.normalize();\r\n\r\n    // console.log(characterPosition, nextPosition);\r\n  });\r\n\r\n  const moveSpeed = 2;\r\n  let count = 0;\r\n  console.log(characterPosition, nextPosition);\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    shapeRenderer.setProjection(camera.projectionView.values);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, 500, 1000);\r\n    shapeRenderer.end();\r\n    let region = walkDownAnimation.getKeyFrame(frame, PlayMode.NORMAL);\r\n\r\n    if (\r\n      characterPosition.x !== nextPosition.x ||\r\n      characterPosition.y !== nextPosition.y\r\n    ) {\r\n      frame += delta;\r\n\r\n      if (rotation >= -45 && rotation < 45) {\r\n        region = walkRightAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n      }\r\n      if (rotation >= -135 && rotation < -45) {\r\n        region = walkDownAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n      }\r\n      if (rotation >= 45 && rotation < 135) {\r\n        region = walkUpAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n      }\r\n      if ((rotation >= 135 && rotation < 180) || rotation < -135) {\r\n        region = walkLeftAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n      }\r\n      if (characterPosition.x < nextPosition.x) {\r\n        characterPosition.x = Math.min(\r\n          characterPosition.x + d.x * moveSpeed * delta,\r\n          nextPosition.x\r\n        );\r\n      }\r\n      if (characterPosition.y < nextPosition.y) {\r\n        characterPosition.y = Math.min(\r\n          characterPosition.y + d.y * moveSpeed * delta,\r\n          nextPosition.y\r\n        );\r\n      }\r\n      if (characterPosition.x > nextPosition.x) {\r\n        characterPosition.x = Math.max(\r\n          characterPosition.x - d.x * moveSpeed * delta,\r\n          nextPosition.x\r\n        );\r\n      }\r\n      if (characterPosition.y > nextPosition.y) {\r\n        characterPosition.y = Math.max(\r\n          characterPosition.y - d.y * moveSpeed * delta,\r\n          nextPosition.y\r\n        );\r\n      }\r\n    } else {\r\n      frame = 0;\r\n      nextPosition.x = path[count];\r\n      nextPosition.y = path[count + 1];\r\n    }\r\n\r\n    batch.setProjection(camera.projectionView.values);\r\n    batch.begin();\r\n    batch.draw(background, 0, 0, 500, 1000);\r\n    region.draw(\r\n      batch,\r\n      characterPosition.x - 50,\r\n      characterPosition.y - 20,\r\n      100,\r\n      100\r\n    );\r\n    batch.end();\r\n\r\n    shapeRenderer.begin();\r\n    for (let rect of obstacles) {\r\n      shapeRenderer.rect(\r\n        false,\r\n        rect.x,\r\n        rect.y,\r\n        rect.width,\r\n        rect.height,\r\n        Color.WHITE\r\n      );\r\n    }\r\n\r\n    if (path.length >= 4) {\r\n      for (let i = 2; i <= path.length; i += 2) {\r\n        shapeRenderer.line(\r\n          path[i - 2],\r\n          path[i - 1],\r\n          path[i],\r\n          path[i + 1],\r\n          Color.WHITE\r\n        );\r\n      }\r\n    }\r\n\r\n    shapeRenderer.end();\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}