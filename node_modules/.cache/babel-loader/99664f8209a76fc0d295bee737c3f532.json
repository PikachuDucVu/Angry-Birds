{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2ContactListener, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { Color, createGameLoop, createStage, createViewport, InputEvent, PolygonBatch, ShapeRenderer, Texture, Vector2, ViewportInputHandler } from \"gdxts\";\nconst WORLD_WIDTH = 1000;\nconst WORLD_HEIGHT = 500;\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\n  const circle = new b2CircleShape();\n  circle.m_radius = radius;\n  const fixtureDef = new b2FixtureDef();\n  fixtureDef.shape = circle;\n  fixtureDef.density = 2;\n  fixtureDef.friction = 2;\n  fixtureDef.restitution = 0.2; // Make it bounce a little bit\n\n  const body = world.CreateBody(bodyDef); // const shape = new b2CircleShape(radius);\n\n  body.CreateFixture(fixtureDef);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst createBox = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.5, height * 0.5);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const pig = await Texture.load(gl, \"./pig.png\");\n  const bird = await Texture.load(gl, \"./bird.png\");\n  const background = await Texture.load(gl, \"./background.png\");\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const shapeRenderer = new ShapeRenderer(gl);\n  const listener = new b2ContactListener();\n  let firstCheck = false; // listener.BeginContact = (contactPtr) => {\n  //   // var contact = Box2D.wrapPointer(contactPtr, b2Contact);\n  //   const fixtureA = contactPtr.GetFixtureA();\n  //   const fixtureB = contactPtr.GetFixtureB();\n  //   console.log(\"collide\");\n  //   if (!firstCheck) {\n  //     firstCheck = true;\n  //   }\n  // };\n\n  const world = new b2World({\n    x: 0,\n    y: 10\n  }); // world.SetContactListener(listener);\n\n  for (let wall of wallData) {\n    createWall(world, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  let spaceOfEachBoxes = 0;\n  const BOX_SIZE = 0.5;\n  const boxes = [];\n\n  for (let i = 0; i < 3; i++) {\n    boxes.push(createBox(world, 8, spaceOfEachBoxes += 1, BOX_SIZE, BOX_SIZE));\n  } // boxes.push(createBox(world, 0, 0, BOX_SIZE, BOX_SIZE));\n\n\n  const BALL_RADIUS = 0.2;\n  const ball = createBall(world, 2, 3.5, BALL_RADIUS);\n  const originPosition = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  let slingPos = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  const inputHandler = new ViewportInputHandler(viewport);\n  let rotation = 0;\n  let stretch = 0;\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\n    if (inputHandler.isTouched()) {\n      slingPos = inputHandler.getTouchedWorldCoord(); // console.log(originPosition);\n      // rotation =\n      //   (Math.atan2(\n      //     originPosition.y - ball.GetPosition().y * METER_TO_WORLD,\n      //     originPosition.x - ball.GetPosition().x * METER_TO_WORLD\n      //   ) *\n      //     180) /\n      //     b2_pi +\n      //   180; // 0Â° start at the third quadrant\n      // stretch =\n      //   Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) /\n      //     4 >=\n      //   10\n      //     ? 10\n      //     : Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) /\n      //       4;\n      // console.log(rotation);\n    } else {}\n  }); // inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n  //   ball.SetType(b2BodyType.b2_dynamicBody);\n  //   ball.ApplyLinearImpulseToCenter(\n  //     {\n  //       x:\n  //         (rotation - 270) / 18 >= 3\n  //           ? (rotation - 270) / 18 + stretch / 2.5\n  //           : (rotation - 270) / 18,\n  //       y: -stretch + 2,\n  //     },\n  //     true\n  //   );\n  // });\n\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n    ball.SetType(b2BodyType.b2_dynamicBody);\n    ball.ApplyLinearImpulseToCenter({\n      x: 3 * (originPosition.x - slingPos.x) / METER_TO_WORLD,\n      y: 3 * (originPosition.y - slingPos.y) / METER_TO_WORLD\n    }, true);\n  });\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    world.Step(delta, 8, 3);\n    batch.setProjection(camera.combined);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    }\n\n    shapeRenderer.rect(true, 1.9 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD, Color.MAGENTA);\n    shapeRenderer.circle(true, ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD, BALL_RADIUS * METER_TO_WORLD, Color.RED);\n    shapeRenderer.end(); // batch.begin();\n    // batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\n    // batch.end();\n\n    shapeRenderer.begin();\n    shapeRenderer.circle(true, slingPos.x, slingPos.y, 0.1 * METER_TO_WORLD, Color.BLUE);\n\n    for (let box of boxes) {\n      shapeRenderer.rect(true, box.GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, box.GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD, Color.GREEN); //   batch.draw(\n      //     pig,\n      //     box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n      //     box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n      //     BOX_SIZE * METER_TO_WORLD,\n      //     BOX_SIZE * METER_TO_WORLD\n      //   );\n      //   // console.log(box.GetContactList());\n    }\n\n    shapeRenderer.end(); // batch.begin();\n    // for (let box of boxes) {\n    //   // console.log(\n    //   //   box.GetPosition().x,\n    //   //   box.GetPosition().y,\n    //   //   box.GetFixtureList()\n    //   // );\n    //   batch.draw(\n    //     pig,\n    //     box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n    //     box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n    //     BOX_SIZE * METER_TO_WORLD,\n    //     BOX_SIZE * METER_TO_WORLD\n    //   );\n    //   // console.log(box.GetContactList());\n    // }\n    // batch.draw(\n    //   bird,\n    //   ball.GetPosition().x * METER_TO_WORLD - 15,\n    //   ball.GetPosition().y * METER_TO_WORLD - 15,\n    //   BALL_RADIUS * 2 * METER_TO_WORLD,\n    //   BALL_RADIUS * 2 * METER_TO_WORLD\n    // );\n    // batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2ContactListener","b2FixtureDef","b2PolygonShape","b2World","Color","createGameLoop","createStage","createViewport","InputEvent","PolygonBatch","ShapeRenderer","Texture","Vector2","ViewportInputHandler","WORLD_WIDTH","WORLD_HEIGHT","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","CreateFixture","createBall","radius","circle","m_radius","fixtureDef","density","friction","restitution","createBox","b2_dynamicBody","WALL_COLOR","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","batch","setYDown","pig","load","bird","background","mapData","fetch","then","res","json","wallData","layers","find","l","name","objects","shapeRenderer","listener","firstCheck","wall","spaceOfEachBoxes","BOX_SIZE","boxes","i","push","BALL_RADIUS","ball","originPosition","GetPosition","slingPos","inputHandler","rotation","stretch","addEventListener","TouchMove","isTouched","getTouchedWorldCoord","TouchEnd","SetType","ApplyLinearImpulseToCenter","clearColor","delta","clear","COLOR_BUFFER_BIT","Step","setProjection","combined","begin","rect","WHITE","MAGENTA","RED","end","BLUE","box","GREEN"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2ContactListener,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n  b2_pi,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 1000;\r\nconst WORLD_HEIGHT = 500;\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n  fixtureDef.density = 2;\r\n  fixtureDef.friction = 2;\r\n  fixtureDef.restitution = 0.2; // Make it bounce a little bit\r\n  const body = world.CreateBody(bodyDef);\r\n  // const shape = new b2CircleShape(radius);\r\n  body.CreateFixture(fixtureDef);\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.5, height * 0.5);\r\n  body.CreateFixture(shape);\r\n\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const pig = await Texture.load(gl, \"./pig.png\");\r\n  const bird = await Texture.load(gl, \"./bird.png\");\r\n  const background = await Texture.load(gl, \"./background.png\");\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const listener = new b2ContactListener();\r\n\r\n  let firstCheck = false;\r\n\r\n  // listener.BeginContact = (contactPtr) => {\r\n  //   // var contact = Box2D.wrapPointer(contactPtr, b2Contact);\r\n  //   const fixtureA = contactPtr.GetFixtureA();\r\n  //   const fixtureB = contactPtr.GetFixtureB();\r\n\r\n  //   console.log(\"collide\");\r\n  //   if (!firstCheck) {\r\n  //     firstCheck = true;\r\n  //   }\r\n  // };\r\n\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n\r\n  // world.SetContactListener(listener);\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      world,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n  let spaceOfEachBoxes = 0;\r\n\r\n  const BOX_SIZE = 0.5;\r\n  const boxes: b2Body[] = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    boxes.push(\r\n      createBox(world, 8, (spaceOfEachBoxes += 1), BOX_SIZE, BOX_SIZE)\r\n    );\r\n  }\r\n\r\n  // boxes.push(createBox(world, 0, 0, BOX_SIZE, BOX_SIZE));\r\n\r\n  const BALL_RADIUS = 0.2;\r\n  const ball = createBall(world, 2, 3.5, BALL_RADIUS);\r\n  const originPosition = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n  let slingPos = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  let rotation = 0;\r\n  let stretch = 0;\r\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n    if (inputHandler.isTouched()) {\r\n      slingPos = inputHandler.getTouchedWorldCoord();\r\n\r\n      // console.log(originPosition);\r\n      // rotation =\r\n      //   (Math.atan2(\r\n      //     originPosition.y - ball.GetPosition().y * METER_TO_WORLD,\r\n      //     originPosition.x - ball.GetPosition().x * METER_TO_WORLD\r\n      //   ) *\r\n      //     180) /\r\n      //     b2_pi +\r\n      //   180; // 0Â° start at the third quadrant\r\n\r\n      // stretch =\r\n      //   Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) /\r\n      //     4 >=\r\n      //   10\r\n      //     ? 10\r\n      //     : Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) /\r\n      //       4;\r\n      // console.log(rotation);\r\n    } else {\r\n    }\r\n  });\r\n\r\n  // inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n  //   ball.SetType(b2BodyType.b2_dynamicBody);\r\n  //   ball.ApplyLinearImpulseToCenter(\r\n  //     {\r\n  //       x:\r\n  //         (rotation - 270) / 18 >= 3\r\n  //           ? (rotation - 270) / 18 + stretch / 2.5\r\n  //           : (rotation - 270) / 18,\r\n  //       y: -stretch + 2,\r\n  //     },\r\n  //     true\r\n  //   );\r\n  // });\r\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n    ball.SetType(b2BodyType.b2_dynamicBody);\r\n    ball.ApplyLinearImpulseToCenter(\r\n      {\r\n        x: (3 * (originPosition.x - slingPos.x)) / METER_TO_WORLD,\r\n        y: (3 * (originPosition.y - slingPos.y)) / METER_TO_WORLD,\r\n      },\r\n      true\r\n    );\r\n  });\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    world.Step(delta, 8, 3);\r\n    batch.setProjection(camera.combined);\r\n\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n    shapeRenderer.rect(\r\n      true,\r\n      1.9 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD,\r\n      Color.MAGENTA\r\n    );\r\n    shapeRenderer.circle(\r\n      true,\r\n      ball.GetPosition().x * METER_TO_WORLD,\r\n      ball.GetPosition().y * METER_TO_WORLD,\r\n      BALL_RADIUS * METER_TO_WORLD,\r\n      Color.RED\r\n    );\r\n    shapeRenderer.end();\r\n\r\n    // batch.begin();\r\n    // batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\r\n    // batch.end();\r\n\r\n    shapeRenderer.begin();\r\n\r\n    shapeRenderer.circle(\r\n      true,\r\n      slingPos.x,\r\n      slingPos.y,\r\n      0.1 * METER_TO_WORLD,\r\n      Color.BLUE\r\n    );\r\n\r\n    for (let box of boxes) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n        box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        Color.GREEN\r\n      );\r\n      //   batch.draw(\r\n      //     pig,\r\n      //     box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      //     box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      //     BOX_SIZE * METER_TO_WORLD,\r\n      //     BOX_SIZE * METER_TO_WORLD\r\n      //   );\r\n      //   // console.log(box.GetContactList());\r\n    }\r\n    shapeRenderer.end();\r\n\r\n    // batch.begin();\r\n    // for (let box of boxes) {\r\n\r\n    //   // console.log(\r\n    //   //   box.GetPosition().x,\r\n    //   //   box.GetPosition().y,\r\n    //   //   box.GetFixtureList()\r\n    //   // );\r\n    //   batch.draw(\r\n    //     pig,\r\n    //     box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n    //     box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n    //     BOX_SIZE * METER_TO_WORLD,\r\n    //     BOX_SIZE * METER_TO_WORLD\r\n    //   );\r\n    //   // console.log(box.GetContactList());\r\n    // }\r\n\r\n    // batch.draw(\r\n    //   bird,\r\n    //   ball.GetPosition().x * METER_TO_WORLD - 15,\r\n    //   ball.GetPosition().y * METER_TO_WORLD - 15,\r\n    //   BALL_RADIUS * 2 * METER_TO_WORLD,\r\n    //   BALL_RADIUS * 2 * METER_TO_WORLD\r\n    // );\r\n\r\n    // batch.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}