{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { Color, createGameLoop, createStage, createViewport, ShapeRenderer } from \"gdxts\";\nconst WORLD_WIDTH = 600;\nconst WORLD_HEIGHT = 1000;\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x, y);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x, y);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2CircleShape(radius);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const mapData = await fetch(\"./walls.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  camera.setYDown(true);\n  const shapeRenderer = new ShapeRenderer(gl);\n  const world = new b2World({\n    x: 0,\n    y: -10\n  });\n  const BALL_RADIUS = 20;\n  const ball = createBall(world, 300, 100, BALL_RADIUS);\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    }\n\n    console.log(ball.GetPosition());\n    shapeRenderer.circle(true, ball.GetPosition().x, ball.GetPosition().y, BALL_RADIUS);\n    shapeRenderer.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2PolygonShape","b2World","Color","createGameLoop","createStage","createViewport","ShapeRenderer","WORLD_WIDTH","WORLD_HEIGHT","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","CreateFixture","createBall","radius","b2_dynamicBody","WALL_COLOR","init","stage","canvas","getCanvas","mapData","fetch","then","res","json","wallData","layers","find","l","name","objects","viewport","gl","getContext","camera","getCamera","setYDown","shapeRenderer","BALL_RADIUS","ball","clearColor","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","begin","rect","WHITE","wall","console","log","GetPosition","circle","end"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  ShapeRenderer,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 600;\r\nconst WORLD_HEIGHT = 1000;\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x, y);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x, y);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2CircleShape(radius);\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n\r\n  const mapData = await fetch(\"./walls.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  camera.setYDown(true);\r\n\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: -10,\r\n  });\r\n\r\n  const BALL_RADIUS = 20;\r\n  const ball = createBall(world, 300, 100, BALL_RADIUS);\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n    console.log(ball.GetPosition());\r\n    shapeRenderer.circle(\r\n      true,\r\n      ball.GetPosition().x,\r\n      ball.GetPosition().y,\r\n      BALL_RADIUS\r\n    );\r\n    shapeRenderer.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}