{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2PolygonShape, b2World, b2_pi } from \"box2d.ts\";\nimport { Color, createGameLoop, createStage, createViewport, InputEvent, PolygonBatch, ShapeRenderer, Texture, Vector2, ViewportInputHandler } from \"gdxts\";\nconst WORLD_WIDTH = 1000;\nconst WORLD_HEIGHT = 500;\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x, y);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2CircleShape(radius);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst createBox = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  bodyDef.awake = false;\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.4, height * 0.4);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const pig = await Texture.load(gl, \"./pig.png\");\n  const bird = await Texture.load(gl, \"./bird.png\");\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const shapeRenderer = new ShapeRenderer(gl);\n  const world = new b2World({\n    x: 0,\n    y: 10\n  });\n\n  for (let wall of wallData) {\n    createWall(world, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  let spaceOfEachBoxes = 0;\n  const BOX_SIZE = 0.5;\n  const boxes = [];\n\n  for (let i = 0; i < 3; i++) {\n    boxes.push(createBox(world, 8, spaceOfEachBoxes += 1, BOX_SIZE, BOX_SIZE));\n  }\n\n  const BALL_RADIUS = 0.2;\n  const BALL_SIZE = 0.5;\n  const ball = createBall(world, 2, 4, BALL_RADIUS);\n  let originPosition = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  let firstClick = false;\n  const inputHandler = new ViewportInputHandler(viewport);\n  let rotation = 0;\n  let stretch = 0;\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\n    if (inputHandler.isTouched()) {\n      originPosition = inputHandler.getTouchedWorldCoord(); // console.log(ball.GetPosition(), originPosition);\n\n      rotation = Math.atan2(originPosition.y - ball.GetPosition().y * METER_TO_WORLD, originPosition.x - ball.GetPosition().x * METER_TO_WORLD) * 180 / b2_pi + 180; // 0Â° start at the third quadrant\n\n      stretch = Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) / 4 >= 10 ? 10 : Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) / 4;\n      console.log((rotation - 270) / 18 + stretch); // console.log(ball.GetPosition().y * METER_TO_WORLD, originPosition.y);\n    }\n  });\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n    ball.SetType(b2BodyType.b2_dynamicBody);\n    ball.ApplyLinearImpulseToCenter({\n      x: (rotation - 270) / 18 + stretch,\n      y: -stretch\n    }, true);\n  });\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    world.Step(delta, 8, 3);\n    batch.setProjection(camera.combined);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    }\n\n    shapeRenderer.rect(true, 1.9 * METER_TO_WORLD, 4 * METER_TO_WORLD, 0.2 * METER_TO_WORLD, 0.6 * METER_TO_WORLD, Color.MAGENTA); // shapeRenderer.circle(\n    //   true,\n    //   originPosition.x,\n    //   originPosition.y,\n    //   0.1 * METER_TO_WORLD,\n    //   Color.BLUE\n    // );\n    // shapeRenderer.circle(\n    //   true,\n    //   ball.GetPosition().x * METER_TO_WORLD,\n    //   ball.GetPosition().y * METER_TO_WORLD,\n    //   BALL_RADIUS * METER_TO_WORLD,\n    //   Color.RED\n    // );\n\n    shapeRenderer.end();\n    batch.begin();\n\n    for (let box of boxes) {\n      batch.draw(pig, (box.GetPosition().x - BOX_SIZE / 2) * METER_TO_WORLD, (box.GetPosition().y - BOX_SIZE / 2) * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n      batch.draw(bird, ball.GetPosition().x * METER_TO_WORLD - 25, ball.GetPosition().y * METER_TO_WORLD - 25, BALL_SIZE * METER_TO_WORLD, BALL_SIZE * METER_TO_WORLD);\n    }\n\n    batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2PolygonShape","b2World","b2_pi","Color","createGameLoop","createStage","createViewport","InputEvent","PolygonBatch","ShapeRenderer","Texture","Vector2","ViewportInputHandler","WORLD_WIDTH","WORLD_HEIGHT","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","CreateFixture","createBall","radius","createBox","b2_dynamicBody","awake","WALL_COLOR","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","batch","setYDown","pig","load","bird","mapData","fetch","then","res","json","wallData","layers","find","l","name","objects","shapeRenderer","wall","spaceOfEachBoxes","BOX_SIZE","boxes","i","push","BALL_RADIUS","BALL_SIZE","ball","originPosition","GetPosition","firstClick","inputHandler","rotation","stretch","addEventListener","TouchMove","isTouched","getTouchedWorldCoord","Math","atan2","abs","console","log","TouchEnd","SetType","ApplyLinearImpulseToCenter","clearColor","delta","clear","COLOR_BUFFER_BIT","Step","setProjection","combined","begin","rect","WHITE","MAGENTA","end","box","draw"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2PolygonShape,\r\n  b2World,\r\n  b2_pi,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 1000;\r\nconst WORLD_HEIGHT = 500;\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x, y);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2CircleShape(radius);\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  bodyDef.awake = false;\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.4, height * 0.4);\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const pig = await Texture.load(gl, \"./pig.png\");\r\n  const bird = await Texture.load(gl, \"./bird.png\");\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      world,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n  let spaceOfEachBoxes = 0;\r\n\r\n  const BOX_SIZE = 0.5;\r\n  const boxes: b2Body[] = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    boxes.push(\r\n      createBox(world, 8, (spaceOfEachBoxes += 1), BOX_SIZE, BOX_SIZE)\r\n    );\r\n  }\r\n  const BALL_RADIUS = 0.2;\r\n  const BALL_SIZE = 0.5;\r\n  const ball = createBall(world, 2, 4, BALL_RADIUS);\r\n  let originPosition = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  let firstClick = false;\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  let rotation = 0;\r\n  let stretch = 0;\r\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n    if (inputHandler.isTouched()) {\r\n      originPosition = inputHandler.getTouchedWorldCoord();\r\n      // console.log(ball.GetPosition(), originPosition);\r\n      rotation =\r\n        (Math.atan2(\r\n          originPosition.y - ball.GetPosition().y * METER_TO_WORLD,\r\n          originPosition.x - ball.GetPosition().x * METER_TO_WORLD\r\n        ) *\r\n          180) /\r\n          b2_pi +\r\n        180; // 0Â° start at the third quadrant\r\n\r\n      stretch =\r\n        Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) /\r\n          4 >=\r\n        10\r\n          ? 10\r\n          : Math.abs(ball.GetPosition().y * METER_TO_WORLD - originPosition.y) /\r\n            4;\r\n      console.log((rotation - 270) / 18 + stretch);\r\n      // console.log(ball.GetPosition().y * METER_TO_WORLD, originPosition.y);\r\n    }\r\n  });\r\n\r\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n    ball.SetType(b2BodyType.b2_dynamicBody);\r\n    ball.ApplyLinearImpulseToCenter(\r\n      {\r\n        x: (rotation - 270) / 18 + stretch,\r\n        y: -stretch,\r\n      },\r\n      true\r\n    );\r\n  });\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    world.Step(delta, 8, 3);\r\n    batch.setProjection(camera.combined);\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n\r\n    shapeRenderer.rect(\r\n      true,\r\n      1.9 * METER_TO_WORLD,\r\n      4 * METER_TO_WORLD,\r\n      0.2 * METER_TO_WORLD,\r\n      0.6 * METER_TO_WORLD,\r\n      Color.MAGENTA\r\n    );\r\n\r\n    // shapeRenderer.circle(\r\n    //   true,\r\n    //   originPosition.x,\r\n    //   originPosition.y,\r\n    //   0.1 * METER_TO_WORLD,\r\n    //   Color.BLUE\r\n    // );\r\n    // shapeRenderer.circle(\r\n    //   true,\r\n    //   ball.GetPosition().x * METER_TO_WORLD,\r\n    //   ball.GetPosition().y * METER_TO_WORLD,\r\n\r\n    //   BALL_RADIUS * METER_TO_WORLD,\r\n    //   Color.RED\r\n    // );\r\n    shapeRenderer.end();\r\n    batch.begin();\r\n    for (let box of boxes) {\r\n      batch.draw(\r\n        pig,\r\n        (box.GetPosition().x - BOX_SIZE / 2) * METER_TO_WORLD,\r\n        (box.GetPosition().y - BOX_SIZE / 2) * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD\r\n      );\r\n      batch.draw(\r\n        bird,\r\n        ball.GetPosition().x * METER_TO_WORLD - 25,\r\n        ball.GetPosition().y * METER_TO_WORLD - 25,\r\n        BALL_SIZE * METER_TO_WORLD,\r\n        BALL_SIZE * METER_TO_WORLD\r\n      );\r\n    }\r\n    batch.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"AAAA,SAEEA,SAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,OANF,EAOEC,KAPF,QAQO,UARP;AASA,SACEC,KADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,cAJF,EAKEC,UALF,EAMEC,YANF,EAOEC,aAPF,EAQEC,OARF,EASEC,OATF,EAUEC,oBAVF,QAWO,OAXP;AAaA,MAAMC,WAAW,GAAG,IAApB;AACA,MAAMC,YAAY,GAAG,GAArB;;AAEA,MAAMC,UAAU,GAAG,CACjBC,KADiB,EAEjBC,CAFiB,EAGjBC,CAHiB,EAIjBC,KAJiB,EAKjBC,MALiB,KAMd;EACH,MAAMC,OAAO,GAAG,IAAIxB,SAAJ,EAAhB;EACAwB,OAAO,CAACC,IAAR,GAAexB,UAAU,CAACyB,aAA1B;EACAF,OAAO,CAACG,QAAR,CAAiBC,GAAjB,CAAqBR,CAAC,GAAGE,KAAK,GAAG,CAAjC,EAAoCD,CAAC,GAAGE,MAAM,GAAG,CAAjD;EACA,MAAMM,IAAI,GAAGV,KAAK,CAACW,UAAN,CAAiBN,OAAjB,CAAb;EACA,MAAMO,KAAK,GAAG,IAAI5B,cAAJ,EAAd;EACA4B,KAAK,CAACC,QAAN,CAAeV,KAAK,GAAG,CAAvB,EAA0BC,MAAM,GAAG,CAAnC;EACAM,IAAI,CAACI,aAAL,CAAmBF,KAAnB;AACD,CAdD;;AAgBA,MAAMG,UAAU,GAAG,CACjBf,KADiB,EAEjBC,CAFiB,EAGjBC,CAHiB,EAIjBc,MAJiB,KAKN;EACX,MAAMX,OAAO,GAAG,IAAIxB,SAAJ,EAAhB;EACAwB,OAAO,CAACC,IAAR,GAAexB,UAAU,CAACyB,aAA1B;EACAF,OAAO,CAACG,QAAR,CAAiBC,GAAjB,CAAqBR,CAArB,EAAwBC,CAAxB;EACA,MAAMQ,IAAI,GAAGV,KAAK,CAACW,UAAN,CAAiBN,OAAjB,CAAb;EACA,MAAMO,KAAK,GAAG,IAAI7B,aAAJ,CAAkBiC,MAAlB,CAAd;EACAN,IAAI,CAACI,aAAL,CAAmBF,KAAnB;EACA,OAAOF,IAAP;AACD,CAbD;;AAeA,MAAMO,SAAS,GAAG,CAChBjB,KADgB,EAEhBC,CAFgB,EAGhBC,CAHgB,EAIhBC,KAJgB,EAKhBC,MALgB,KAML;EACX,MAAMC,OAAO,GAAG,IAAIxB,SAAJ,EAAhB;EACAwB,OAAO,CAACC,IAAR,GAAexB,UAAU,CAACoC,cAA1B;EACAb,OAAO,CAACG,QAAR,CAAiBC,GAAjB,CAAqBR,CAAC,GAAGE,KAAK,GAAG,CAAjC,EAAoCD,CAAC,GAAGE,MAAM,GAAG,CAAjD;EACAC,OAAO,CAACc,KAAR,GAAgB,KAAhB;EAEA,MAAMT,IAAI,GAAGV,KAAK,CAACW,UAAN,CAAiBN,OAAjB,CAAb;EACA,MAAMO,KAAK,GAAG,IAAI5B,cAAJ,EAAd;EACA4B,KAAK,CAACC,QAAN,CAAeV,KAAK,GAAG,GAAvB,EAA4BC,MAAM,GAAG,GAArC;EACAM,IAAI,CAACI,aAAL,CAAmBF,KAAnB;EACA,OAAOF,IAAP;AACD,CAjBD;;AAmBA,MAAMU,UAAU,GAAG,IAAIjC,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,CAAzB,CAAnB;AACA,MAAMkC,cAAc,GAAG,GAAvB;AAEA,OAAO,MAAMC,IAAI,GAAG,YAAY;EAC9B,MAAMC,KAAK,GAAGlC,WAAW,EAAzB;EACA,MAAMmC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;EACA,MAAMC,QAAQ,GAAGpC,cAAc,CAACkC,MAAD,EAAS3B,WAAT,EAAsBC,YAAtB,CAA/B;EACA,MAAM6B,EAAE,GAAGD,QAAQ,CAACE,UAAT,EAAX;EACA,MAAMC,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;EACA,MAAMC,KAAK,GAAG,IAAIvC,YAAJ,CAAiBmC,EAAjB,CAAd;EAEAE,MAAM,CAACG,QAAP,CAAgB,IAAhB;EACAD,KAAK,CAACC,QAAN,CAAe,IAAf;EAEA,MAAMC,GAAG,GAAG,MAAMvC,OAAO,CAACwC,IAAR,CAAaP,EAAb,EAAiB,WAAjB,CAAlB;EACA,MAAMQ,IAAI,GAAG,MAAMzC,OAAO,CAACwC,IAAR,CAAaP,EAAb,EAAiB,YAAjB,CAAnB;EACA,MAAMS,OAAO,GAAG,MAAMC,KAAK,CAAC,gBAAD,CAAL,CAAwBC,IAAxB,CAA8BC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAAtC,CAAtB;EACA,MAAMC,QAAQ,GAAGL,OAAO,CAACM,MAAR,CAAeC,IAAf,CAAqBC,CAAD,IAAYA,CAAC,CAACC,IAAF,KAAW,OAA3C,EAAoDC,OAArE;EACA,MAAMC,aAAa,GAAG,IAAItD,aAAJ,CAAkBkC,EAAlB,CAAtB;EAEA,MAAM3B,KAAK,GAAG,IAAIf,OAAJ,CAAY;IACxBgB,CAAC,EAAE,CADqB;IAExBC,CAAC,EAAE;EAFqB,CAAZ,CAAd;;EAKA,KAAK,IAAI8C,IAAT,IAAiBP,QAAjB,EAA2B;IACzB1C,UAAU,CACRC,KADQ,EAERgD,IAAI,CAAC/C,CAAL,GAASoB,cAFD,EAGR2B,IAAI,CAAC9C,CAAL,GAASmB,cAHD,EAIR2B,IAAI,CAAC7C,KAAL,GAAakB,cAJL,EAKR2B,IAAI,CAAC5C,MAAL,GAAciB,cALN,CAAV;EAOD;;EACD,IAAI4B,gBAAgB,GAAG,CAAvB;EAEA,MAAMC,QAAQ,GAAG,GAAjB;EACA,MAAMC,KAAe,GAAG,EAAxB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1BD,KAAK,CAACE,IAAN,CACEpC,SAAS,CAACjB,KAAD,EAAQ,CAAR,EAAYiD,gBAAgB,IAAI,CAAhC,EAAoCC,QAApC,EAA8CA,QAA9C,CADX;EAGD;;EACD,MAAMI,WAAW,GAAG,GAApB;EACA,MAAMC,SAAS,GAAG,GAAlB;EACA,MAAMC,IAAI,GAAGzC,UAAU,CAACf,KAAD,EAAQ,CAAR,EAAW,CAAX,EAAcsD,WAAd,CAAvB;EACA,IAAIG,cAAc,GAAG,IAAI9D,OAAJ,CACnB6D,IAAI,CAACE,WAAL,GAAmBzD,CAAnB,GAAuBoB,cADJ,EAEnBmC,IAAI,CAACE,WAAL,GAAmBxD,CAAnB,GAAuBmB,cAFJ,CAArB;EAKA,IAAIsC,UAAU,GAAG,KAAjB;EACA,MAAMC,YAAY,GAAG,IAAIhE,oBAAJ,CAAyB8B,QAAzB,CAArB;EAEA,IAAImC,QAAQ,GAAG,CAAf;EACA,IAAIC,OAAO,GAAG,CAAd;EACAF,YAAY,CAACG,gBAAb,CAA8BxE,UAAU,CAACyE,SAAzC,EAAoD,MAAM;IACxD,IAAIJ,YAAY,CAACK,SAAb,EAAJ,EAA8B;MAC5BR,cAAc,GAAGG,YAAY,CAACM,oBAAb,EAAjB,CAD4B,CAE5B;;MACAL,QAAQ,GACLM,IAAI,CAACC,KAAL,CACCX,cAAc,CAACvD,CAAf,GAAmBsD,IAAI,CAACE,WAAL,GAAmBxD,CAAnB,GAAuBmB,cAD3C,EAECoC,cAAc,CAACxD,CAAf,GAAmBuD,IAAI,CAACE,WAAL,GAAmBzD,CAAnB,GAAuBoB,cAF3C,IAIC,GAJF,GAKEnC,KALF,GAMA,GAPF,CAH4B,CAUrB;;MAEP4E,OAAO,GACLK,IAAI,CAACE,GAAL,CAASb,IAAI,CAACE,WAAL,GAAmBxD,CAAnB,GAAuBmB,cAAvB,GAAwCoC,cAAc,CAACvD,CAAhE,IACE,CADF,IAEA,EAFA,GAGI,EAHJ,GAIIiE,IAAI,CAACE,GAAL,CAASb,IAAI,CAACE,WAAL,GAAmBxD,CAAnB,GAAuBmB,cAAvB,GAAwCoC,cAAc,CAACvD,CAAhE,IACA,CANN;MAOAoE,OAAO,CAACC,GAAR,CAAY,CAACV,QAAQ,GAAG,GAAZ,IAAmB,EAAnB,GAAwBC,OAApC,EAnB4B,CAoB5B;IACD;EACF,CAvBD;EAyBAF,YAAY,CAACG,gBAAb,CAA8BxE,UAAU,CAACiF,QAAzC,EAAmD,MAAM;IACvDhB,IAAI,CAACiB,OAAL,CAAa3F,UAAU,CAACoC,cAAxB;IACAsC,IAAI,CAACkB,0BAAL,CACE;MACEzE,CAAC,EAAE,CAAC4D,QAAQ,GAAG,GAAZ,IAAmB,EAAnB,GAAwBC,OAD7B;MAEE5D,CAAC,EAAE,CAAC4D;IAFN,CADF,EAKE,IALF;EAOD,CATD;EAWAnC,EAAE,CAACgD,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;EACAvF,cAAc,CAAEwF,KAAD,IAAmB;IAChCjD,EAAE,CAACkD,KAAH,CAASlD,EAAE,CAACmD,gBAAZ;IACA9E,KAAK,CAAC+E,IAAN,CAAWH,KAAX,EAAkB,CAAlB,EAAqB,CAArB;IACA7C,KAAK,CAACiD,aAAN,CAAoBnD,MAAM,CAACoD,QAA3B;IACAlC,aAAa,CAACiC,aAAd,CAA4BnD,MAAM,CAACoD,QAAnC;IACAlC,aAAa,CAACmC,KAAd;IACAnC,aAAa,CAACoC,IAAd,CAAmB,IAAnB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BtF,WAA/B,EAA4CC,YAA5C,EAA0DX,KAAK,CAACiG,KAAhE;;IAEA,KAAK,IAAIpC,IAAT,IAAiBP,QAAjB,EAA2B;MACzBM,aAAa,CAACoC,IAAd,CACE,IADF,EAEEnC,IAAI,CAAC/C,CAFP,EAGE+C,IAAI,CAAC9C,CAHP,EAIE8C,IAAI,CAAC7C,KAJP,EAKE6C,IAAI,CAAC5C,MALP,EAMEgB,UANF;IAQD;;IAED2B,aAAa,CAACoC,IAAd,CACE,IADF,EAEE,MAAM9D,cAFR,EAGE,IAAIA,cAHN,EAIE,MAAMA,cAJR,EAKE,MAAMA,cALR,EAMElC,KAAK,CAACkG,OANR,EAnBgC,CA4BhC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;;IACAtC,aAAa,CAACuC,GAAd;IACAvD,KAAK,CAACmD,KAAN;;IACA,KAAK,IAAIK,GAAT,IAAgBpC,KAAhB,EAAuB;MACrBpB,KAAK,CAACyD,IAAN,CACEvD,GADF,EAEE,CAACsD,GAAG,CAAC7B,WAAJ,GAAkBzD,CAAlB,GAAsBiD,QAAQ,GAAG,CAAlC,IAAuC7B,cAFzC,EAGE,CAACkE,GAAG,CAAC7B,WAAJ,GAAkBxD,CAAlB,GAAsBgD,QAAQ,GAAG,CAAlC,IAAuC7B,cAHzC,EAIE6B,QAAQ,GAAG7B,cAJb,EAKE6B,QAAQ,GAAG7B,cALb;MAOAU,KAAK,CAACyD,IAAN,CACErD,IADF,EAEEqB,IAAI,CAACE,WAAL,GAAmBzD,CAAnB,GAAuBoB,cAAvB,GAAwC,EAF1C,EAGEmC,IAAI,CAACE,WAAL,GAAmBxD,CAAnB,GAAuBmB,cAAvB,GAAwC,EAH1C,EAIEkC,SAAS,GAAGlC,cAJd,EAKEkC,SAAS,GAAGlC,cALd;IAOD;;IACDU,KAAK,CAACuD,GAAN;EACD,CA9Da,CAAd;AA+DD,CAzJM;AA0JPhE,IAAI"},"metadata":{},"sourceType":"module"}