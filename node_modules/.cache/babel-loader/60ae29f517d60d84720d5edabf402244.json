{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextureRegion = void 0;\n\nclass TextureRegion {\n  constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight) {\n    let rotate = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n    this.name = null;\n    this.index = 0;\n    this.texture = null;\n    this.x = 0;\n    this.y = 0;\n    this.width = 0;\n    this.height = 0;\n    this.invTexWidth = 0;\n    this.invTexHeight = 0;\n    this.originalWidth = 0;\n    this.originalHeight = 0;\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.u = 0;\n    this.v = 0;\n    this.u2 = 0;\n    this.v2 = 0;\n\n    if (!invTexWidth || !invTexHeight) {\n      invTexWidth = 1 / tex.width;\n      invTexHeight = 1 / tex.height;\n    }\n\n    const u = x * invTexWidth;\n    const v = (y + height) * invTexHeight;\n    const u2 = (x + width) * invTexWidth;\n    const v2 = y * invTexHeight;\n    this.texture = tex;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.originalWidth = width;\n    this.originalHeight = height;\n    this.offsetX = 0;\n    this.offsetY = 0;\n\n    if (rotate) {\n      this.u = u2;\n      this.v = v;\n      this.u2 = u;\n      this.v2 = v2;\n    } else {\n      this.u = u;\n      this.v = v;\n      this.u2 = u2;\n      this.v2 = v2;\n    }\n\n    for (let key in extraData) {\n      this[key] = extraData[key];\n    }\n  }\n\n  static splitTexture(texture, cols, rows) {\n    const {\n      width,\n      height\n    } = texture;\n    const regionWidth = width / cols;\n    const regionHeight = height / rows;\n    const regions = [];\n\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\n      }\n    }\n\n    return regions;\n  }\n\n  draw(batch, x, y, width, height) {\n    let originX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let originY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let rotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    let scaleX = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n    let scaleY = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n    const originalWidth = this.originalWidth;\n    const offsetX = this.offsetX;\n    const offsetY = this.offsetY;\n    const ratio = width / originalWidth;\n    const drawWidth = this.width * ratio;\n    const drawHeight = this.height * ratio;\n    const drawX = x + offsetX * ratio;\n    const drawY = y + height - offsetY * ratio - drawHeight;\n    originX = originX - (drawX - x);\n    originY = originY - (drawY - y);\n    batch.draw(this.texture, drawX, drawY, drawWidth, drawHeight, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2);\n  }\n\n}\n\nexports.TextureRegion = TextureRegion;","map":{"version":3,"names":["Object","defineProperty","exports","value","TextureRegion","constructor","tex","x","y","width","height","extraData","invTexWidth","invTexHeight","rotate","name","index","texture","originalWidth","originalHeight","offsetX","offsetY","u","v","u2","v2","key","splitTexture","cols","rows","regionWidth","regionHeight","regions","push","draw","batch","originX","originY","rotation","scaleX","scaleY","ratio","drawWidth","drawHeight","drawX","drawY"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/TextureRegion.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextureRegion = void 0;\nclass TextureRegion {\n    constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight, rotate = false) {\n        this.name = null;\n        this.index = 0;\n        this.texture = null;\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.invTexWidth = 0;\n        this.invTexHeight = 0;\n        this.originalWidth = 0;\n        this.originalHeight = 0;\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.u = 0;\n        this.v = 0;\n        this.u2 = 0;\n        this.v2 = 0;\n        if (!invTexWidth || !invTexHeight) {\n            invTexWidth = 1 / tex.width;\n            invTexHeight = 1 / tex.height;\n        }\n        const u = x * invTexWidth;\n        const v = (y + height) * invTexHeight;\n        const u2 = (x + width) * invTexWidth;\n        const v2 = y * invTexHeight;\n        this.texture = tex;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.originalWidth = width;\n        this.originalHeight = height;\n        this.offsetX = 0;\n        this.offsetY = 0;\n        if (rotate) {\n            this.u = u2;\n            this.v = v;\n            this.u2 = u;\n            this.v2 = v2;\n        }\n        else {\n            this.u = u;\n            this.v = v;\n            this.u2 = u2;\n            this.v2 = v2;\n        }\n        for (let key in extraData) {\n            this[key] = extraData[key];\n        }\n    }\n    static splitTexture(texture, cols, rows) {\n        const { width, height } = texture;\n        const regionWidth = width / cols;\n        const regionHeight = height / rows;\n        const regions = [];\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < cols; x++) {\n                regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\n            }\n        }\n        return regions;\n    }\n    draw(batch, x, y, width, height, originX = 0, originY = 0, rotation = 0, scaleX = 1, scaleY = 1) {\n        const originalWidth = this.originalWidth;\n        const offsetX = this.offsetX;\n        const offsetY = this.offsetY;\n        const ratio = width / originalWidth;\n        const drawWidth = this.width * ratio;\n        const drawHeight = this.height * ratio;\n        const drawX = x + offsetX * ratio;\n        const drawY = y + height - offsetY * ratio - drawHeight;\n        originX = originX - (drawX - x);\n        originY = originY - (drawY - y);\n        batch.draw(this.texture, drawX, drawY, drawWidth, drawHeight, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2);\n    }\n}\nexports.TextureRegion = TextureRegion;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}