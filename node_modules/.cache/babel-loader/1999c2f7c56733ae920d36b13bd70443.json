{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2ContactListener, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { Animation, Color, createGameLoop, createStage, createViewport, InputEvent, PlayMode, PolygonBatch, ShapeRenderer, Texture, TextureRegion, Vector2, ViewportInputHandler } from \"gdxts\";\nconst WORLD_WIDTH = 1000;\nconst WORLD_HEIGHT = 500;\nconst contactListener = new b2ContactListener();\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.SetUserData(\"ground\");\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\n  const circle = new b2CircleShape();\n  circle.m_radius = radius;\n  const fixtureDef = new b2FixtureDef();\n  fixtureDef.shape = circle; // fixtureDef.density = 1;\n\n  fixtureDef.restitution = 0.5; // bounce ball\n\n  fixtureDef.friction = 1;\n  fixtureDef.shape = circle;\n  fixtureDef.userData = \"ballFixture\";\n  const body = world.CreateBody(bodyDef);\n  body.CreateFixture(fixtureDef);\n  body.SetUserData(\"ball\");\n  return body;\n};\n\nconst createBox = (world, x, y, width, height, userData) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.5, height * 0.5);\n  body.SetUserData({\n    name: userData.name,\n    durability: 0\n  });\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const pig = await Texture.load(gl, \"./pig.png\");\n  const bird = await Texture.load(gl, \"./bird.png\");\n  const slingShot = await Texture.load(gl, \"./slingshot.png\");\n  const background = await Texture.load(gl, \"./background.png\");\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const shapeRenderer = new ShapeRenderer(gl);\n  const world = new b2World({\n    x: 0,\n    y: 10\n  });\n  const boxTexture = await Texture.load(gl, \"./testAnimation1.png\");\n  const regions = TextureRegion.splitTexture(boxTexture, 1, 4);\n  let frameDuration = 0.01;\n  const testAnimation = new Animation(regions.slice(0, 4), frameDuration);\n  let isTouchedBox0 = false;\n  let frameBox0 = 0;\n  let frameBox1 = 0;\n  let frameBox2 = 0;\n  let frameBox3 = 0;\n  let frameBox4 = 0;\n  let frameBox5 = 0;\n  let regionBox0 = testAnimation.getKeyFrame(frameBox0, PlayMode.NORMAL);\n  let regionBox1 = testAnimation.getKeyFrame(frameBox1, PlayMode.NORMAL);\n  let regionBox2 = testAnimation.getKeyFrame(frameBox2, PlayMode.NORMAL);\n  let regionBox3 = testAnimation.getKeyFrame(frameBox3, PlayMode.NORMAL);\n  let regionBox4 = testAnimation.getKeyFrame(frameBox4, PlayMode.NORMAL);\n  let regionBox5 = testAnimation.getKeyFrame(frameBox5, PlayMode.NORMAL);\n\n  for (let wall of wallData) {\n    createWall(world, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  const BOX_SIZE = 0.5;\n  const PIG_SIZE = 0.3;\n  const pigs = [];\n  const boxes = [];\n  let pigNumber = 0;\n  let boxNumber = 0;\n  let test1 = 6;\n  let test2 = 4.3;\n\n  for (let i = 0; i < 3; i++) {\n    test1 = 6 + i * 0.4;\n\n    for (let j = 0; j <= i; j++) {\n      boxes.push(createBox(world, test1 += 0.51, test2 -= 0.55, BOX_SIZE, BOX_SIZE, {\n        name: `box ${boxNumber++}`\n      }));\n    }\n\n    if (i < 2) {\n      pigs.push(createBox(world, test1 + 0.5, test2 - 0.25, PIG_SIZE, PIG_SIZE, {\n        name: `pig ${pigNumber++}`\n      }));\n    }\n  }\n\n  const BALL_RADIUS = 0.2;\n  let ball = createBall(world, 2, 3.5, BALL_RADIUS);\n  let hasBirdOnSlingShot = true;\n  const originPosition = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  let slingPos = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  const inputHandler = new ViewportInputHandler(viewport);\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\n    if (inputHandler.isTouched()) {\n      slingPos = inputHandler.getTouchedWorldCoord();\n    }\n  });\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n    if (hasBirdOnSlingShot) {\n      ball.SetType(b2BodyType.b2_dynamicBody);\n      ball.ApplyLinearImpulseToCenter({\n        x: 7 * (originPosition.x - slingPos.x) / METER_TO_WORLD,\n        y: 7 * (originPosition.y - slingPos.y) / METER_TO_WORLD\n      }, true);\n      hasBirdOnSlingShot = false;\n    }\n  });\n  let frame = 0;\n  let delayTime = 0;\n  window.addEventListener(\"keydown\", function (e) {\n    if (!hasBirdOnSlingShot && e.key === \"r\") {\n      world.DestroyBody(ball);\n      ball = createBall(world, 2, 3.5, BALL_RADIUS);\n      hasBirdOnSlingShot = true;\n    }\n  });\n  gl.clearColor(0, 0, 0, 1);\n  let damageBoxes = 0;\n\n  contactListener.BeginContact = function (contact) {\n    if (delayTime >= 1) {\n      const fixtureAData = contact.GetFixtureA().GetBody().GetUserData();\n      const fixtureBData = contact.GetFixtureB().GetBody().GetUserData();\n      if (fixtureBData !== \"ball\") return;\n\n      switch (fixtureAData.name) {\n        case \"box \" + 0:\n          console.log(\"box 0\");\n          console.log(frameBox0);\n          fixtureAData.durability += 1;\n          isTouchedBox0 = true;\n          break;\n\n        case \"box \" + 1:\n          console.log(\"box 1\");\n          break;\n\n        case \"box \" + 2:\n          console.log(\"box 2\");\n          frameBox2++;\n          break;\n\n        case \"box \" + 3:\n          console.log(\"box 3\");\n          break;\n\n        case \"box \" + 4:\n          console.log(\"box 4\");\n          break;\n\n        case \"box \" + 5:\n          console.log(\"box 5\");\n          break;\n\n        default:\n          console.log(\"deocogi\");\n          break;\n      }\n\n      switch (fixtureBData.name) {\n        case \"box \" + 0:\n          console.warn(\"box2 0\");\n          break;\n\n        case \"box \" + 1:\n          console.warn(\"box2 1\");\n          break;\n\n        case \"box \" + 2:\n          console.warn(\"box2 2\");\n          break;\n\n        case \"box \" + 3:\n          console.warn(\"box2 3\");\n          break;\n\n        case \"box \" + 4:\n          console.warn(\"box2 4\");\n          break;\n\n        case \"box \" + 5:\n          console.warn(\"box2 5\");\n          break;\n\n        default:\n          console.log(\"deocogi\");\n          break;\n      }\n    } // console.log(\n    //   contact.GetFixtureA().GetBody().GetUserData(),\n    //   contact.GetFixtureB().GetBody().GetUserData()\n    // );\n    // console.log(contact);\n\n  };\n\n  world.SetContactListener(contactListener);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    for (let i = 0; i < boxes.length; i++) {\n      const element = boxes[i];\n      const boxDurability = element.GetUserData().durability;\n\n      if (typeof boxDurability === \"number\") {\n        console.log(boxDurability);\n\n        if (boxDurability < 4) {\n          console.log(boxDurability);\n\n          if (element.GetUserData().name === \"box 0\") {\n            regionBox0 = testAnimation.getKeyFrame(frameDuration * boxDurability, PlayMode.NORMAL);\n          }\n        } else {// xoa box di\n          // world.DestroyBody(boxes[i]);\n          // boxes.splice(i, 1);\n        }\n      }\n    }\n\n    world.Step(delta, 8, 3);\n    batch.setProjection(camera.combined);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    }\n\n    shapeRenderer.rect(true, 2 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD, Color.MAGENTA);\n    shapeRenderer.circle(true, ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD, BALL_RADIUS * METER_TO_WORLD, Color.RED);\n    shapeRenderer.end();\n    batch.begin();\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\n    batch.end();\n    shapeRenderer.begin();\n    shapeRenderer.circle(true, slingPos.x, slingPos.y, 0.1 * METER_TO_WORLD, Color.BLUE);\n    shapeRenderer.end();\n    batch.begin();\n    regionBox0.draw(batch, boxes[0].GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, boxes[0].GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    regionBox1.draw(batch, boxes[1].GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, boxes[1].GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    regionBox2.draw(batch, boxes[2].GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, boxes[2].GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    regionBox3.draw(batch, boxes[3].GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, boxes[3].GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    regionBox4.draw(batch, boxes[4].GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, boxes[4].GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    regionBox5.draw(batch, boxes[5].GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, boxes[5].GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD); // shapeRenderer.rect(\n    //   true,\n    //   box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n    //   box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n    //   BOX_SIZE * METER_TO_WORLD,\n    //   BOX_SIZE * METER_TO_WORLD,\n    //   Color.RED\n    // );\n\n    batch.draw(slingShot, 2 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD);\n\n    for (let box of pigs) {\n      batch.draw(pig, box.GetPosition().x * METER_TO_WORLD - PIG_SIZE * METER_TO_WORLD / 2, box.GetPosition().y * METER_TO_WORLD - PIG_SIZE * METER_TO_WORLD / 2, PIG_SIZE * METER_TO_WORLD, PIG_SIZE * METER_TO_WORLD); // console.log(box.GetContactList());\n    }\n\n    batch.draw(bird, ball.GetPosition().x * METER_TO_WORLD - 25, ball.GetPosition().y * METER_TO_WORLD - 25, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    delayTime += delta;\n    batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2ContactListener","b2FixtureDef","b2PolygonShape","b2World","Animation","Color","createGameLoop","createStage","createViewport","InputEvent","PlayMode","PolygonBatch","ShapeRenderer","Texture","TextureRegion","Vector2","ViewportInputHandler","WORLD_WIDTH","WORLD_HEIGHT","contactListener","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createBall","radius","circle","m_radius","fixtureDef","restitution","friction","userData","createBox","b2_dynamicBody","name","durability","WALL_COLOR","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","batch","setYDown","pig","load","bird","slingShot","background","mapData","fetch","then","res","json","wallData","layers","find","l","objects","shapeRenderer","boxTexture","regions","splitTexture","frameDuration","testAnimation","slice","isTouchedBox0","frameBox0","frameBox1","frameBox2","frameBox3","frameBox4","frameBox5","regionBox0","getKeyFrame","NORMAL","regionBox1","regionBox2","regionBox3","regionBox4","regionBox5","wall","BOX_SIZE","PIG_SIZE","pigs","boxes","pigNumber","boxNumber","test1","test2","i","j","push","BALL_RADIUS","ball","hasBirdOnSlingShot","originPosition","GetPosition","slingPos","inputHandler","addEventListener","TouchMove","isTouched","getTouchedWorldCoord","TouchEnd","SetType","ApplyLinearImpulseToCenter","frame","delayTime","window","e","key","DestroyBody","clearColor","damageBoxes","BeginContact","contact","fixtureAData","GetFixtureA","GetBody","GetUserData","fixtureBData","GetFixtureB","console","log","warn","SetContactListener","delta","clear","COLOR_BUFFER_BIT","length","element","boxDurability","Step","setProjection","combined","begin","rect","WHITE","MAGENTA","RED","end","draw","BLUE","box"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Alloc,\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2Contact,\r\n  b2ContactListener,\r\n  b2Fixture,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Animation,\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  PlayMode,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  TextureRegion,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 1000;\r\nconst WORLD_HEIGHT = 500;\r\n\r\nconst contactListener = new b2ContactListener();\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.SetUserData(\"ground\");\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n  // fixtureDef.density = 1;\r\n  fixtureDef.restitution = 0.5; // bounce ball\r\n  fixtureDef.friction = 1;\r\n  fixtureDef.shape = circle;\r\n  fixtureDef.userData = \"ballFixture\";\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.SetUserData(\"ball\");\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  userData: {\r\n    name: string;\r\n  }\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.5, height * 0.5);\r\n  body.SetUserData({\r\n    name: userData.name,\r\n    durability: 0,\r\n  });\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const pig = await Texture.load(gl, \"./pig.png\");\r\n  const bird = await Texture.load(gl, \"./bird.png\");\r\n  const slingShot = await Texture.load(gl, \"./slingshot.png\");\r\n  const background = await Texture.load(gl, \"./background.png\");\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n\r\n  const boxTexture = await Texture.load(gl, \"./testAnimation1.png\");\r\n  const regions = TextureRegion.splitTexture(boxTexture, 1, 4);\r\n\r\n  let frameDuration = 0.01;\r\n  const testAnimation = new Animation(regions.slice(0, 4), frameDuration);\r\n  let isTouchedBox0 = false;\r\n\r\n  let frameBox0 = 0;\r\n  let frameBox1 = 0;\r\n  let frameBox2 = 0;\r\n  let frameBox3 = 0;\r\n  let frameBox4 = 0;\r\n  let frameBox5 = 0;\r\n  let regionBox0 = testAnimation.getKeyFrame(frameBox0, PlayMode.NORMAL);\r\n  let regionBox1 = testAnimation.getKeyFrame(frameBox1, PlayMode.NORMAL);\r\n  let regionBox2 = testAnimation.getKeyFrame(frameBox2, PlayMode.NORMAL);\r\n  let regionBox3 = testAnimation.getKeyFrame(frameBox3, PlayMode.NORMAL);\r\n  let regionBox4 = testAnimation.getKeyFrame(frameBox4, PlayMode.NORMAL);\r\n  let regionBox5 = testAnimation.getKeyFrame(frameBox5, PlayMode.NORMAL);\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      world,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n\r\n  const BOX_SIZE = 0.5;\r\n  const PIG_SIZE = 0.3;\r\n  const pigs: b2Body[] = [];\r\n  const boxes: b2Body[] = [];\r\n  let pigNumber = 0;\r\n  let boxNumber = 0;\r\n  let test1 = 6;\r\n  let test2 = 4.3;\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    test1 = 6 + i * 0.4;\r\n    for (let j = 0; j <= i; j++) {\r\n      boxes.push(\r\n        createBox(world, (test1 += 0.51), (test2 -= 0.55), BOX_SIZE, BOX_SIZE, {\r\n          name: `box ${boxNumber++}`,\r\n        })\r\n      );\r\n    }\r\n    if (i < 2) {\r\n      pigs.push(\r\n        createBox(world, test1 + 0.5, test2 - 0.25, PIG_SIZE, PIG_SIZE, {\r\n          name: `pig ${pigNumber++}`,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  const BALL_RADIUS = 0.2;\r\n  let ball = createBall(world, 2, 3.5, BALL_RADIUS);\r\n  let hasBirdOnSlingShot = true;\r\n  const originPosition = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n  let slingPos = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n    if (inputHandler.isTouched()) {\r\n      slingPos = inputHandler.getTouchedWorldCoord();\r\n    }\r\n  });\r\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n    if (hasBirdOnSlingShot) {\r\n      ball.SetType(b2BodyType.b2_dynamicBody);\r\n      ball.ApplyLinearImpulseToCenter(\r\n        {\r\n          x: (7 * (originPosition.x - slingPos.x)) / METER_TO_WORLD,\r\n          y: (7 * (originPosition.y - slingPos.y)) / METER_TO_WORLD,\r\n        },\r\n        true\r\n      );\r\n      hasBirdOnSlingShot = false;\r\n    }\r\n  });\r\n  let frame = 0;\r\n  let delayTime = 0;\r\n\r\n  window.addEventListener(\"keydown\", function (e) {\r\n    if (!hasBirdOnSlingShot && e.key === \"r\") {\r\n      world.DestroyBody(ball);\r\n      ball = createBall(world, 2, 3.5, BALL_RADIUS);\r\n      hasBirdOnSlingShot = true;\r\n    }\r\n  });\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  let damageBoxes = 0;\r\n  contactListener.BeginContact = function (contact: b2Contact) {\r\n    if (delayTime >= 1) {\r\n      const fixtureAData = contact.GetFixtureA().GetBody().GetUserData();\r\n      const fixtureBData = contact.GetFixtureB().GetBody().GetUserData();\r\n\r\n      if (fixtureBData !== \"ball\") return;\r\n\r\n      switch (fixtureAData.name) {\r\n        case \"box \" + 0:\r\n          console.log(\"box 0\");\r\n          console.log(frameBox0);\r\n          fixtureAData.durability += 1;\r\n          isTouchedBox0 = true;\r\n          break;\r\n        case \"box \" + 1:\r\n          console.log(\"box 1\");\r\n          break;\r\n\r\n        case \"box \" + 2:\r\n          console.log(\"box 2\");\r\n          frameBox2++;\r\n          break;\r\n\r\n        case \"box \" + 3:\r\n          console.log(\"box 3\");\r\n          break;\r\n        case \"box \" + 4:\r\n          console.log(\"box 4\");\r\n          break;\r\n        case \"box \" + 5:\r\n          console.log(\"box 5\");\r\n          break;\r\n\r\n        default:\r\n          console.log(\"deocogi\");\r\n          break;\r\n      }\r\n\r\n      switch (fixtureBData.name) {\r\n        case \"box \" + 0:\r\n          console.warn(\"box2 0\");\r\n          break;\r\n        case \"box \" + 1:\r\n          console.warn(\"box2 1\");\r\n          break;\r\n\r\n        case \"box \" + 2:\r\n          console.warn(\"box2 2\");\r\n          break;\r\n\r\n        case \"box \" + 3:\r\n          console.warn(\"box2 3\");\r\n          break;\r\n        case \"box \" + 4:\r\n          console.warn(\"box2 4\");\r\n          break;\r\n        case \"box \" + 5:\r\n          console.warn(\"box2 5\");\r\n          break;\r\n\r\n        default:\r\n          console.log(\"deocogi\");\r\n          break;\r\n      }\r\n    }\r\n    // console.log(\r\n    //   contact.GetFixtureA().GetBody().GetUserData(),\r\n    //   contact.GetFixtureB().GetBody().GetUserData()\r\n    // );\r\n    // console.log(contact);\r\n  };\r\n\r\n  world.SetContactListener(contactListener);\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    for (let i = 0; i < boxes.length; i++) {\r\n      const element = boxes[i];\r\n      const boxDurability = element.GetUserData().durability;\r\n      if (typeof boxDurability === \"number\") {\r\n        console.log(boxDurability);\r\n        if (boxDurability < 4) {\r\n          console.log(boxDurability);\r\n          if (element.GetUserData().name === \"box 0\") {\r\n            regionBox0 = testAnimation.getKeyFrame(\r\n              frameDuration * boxDurability,\r\n              PlayMode.NORMAL\r\n            );\r\n          }\r\n        } else {\r\n          // xoa box di\r\n          // world.DestroyBody(boxes[i]);\r\n          // boxes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    world.Step(delta, 8, 3);\r\n    batch.setProjection(camera.combined);\r\n\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n    shapeRenderer.rect(\r\n      true,\r\n      2 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD,\r\n      Color.MAGENTA\r\n    );\r\n    shapeRenderer.circle(\r\n      true,\r\n      ball.GetPosition().x * METER_TO_WORLD,\r\n      ball.GetPosition().y * METER_TO_WORLD,\r\n      BALL_RADIUS * METER_TO_WORLD,\r\n      Color.RED\r\n    );\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\r\n    batch.end();\r\n\r\n    shapeRenderer.begin();\r\n    shapeRenderer.circle(\r\n      true,\r\n      slingPos.x,\r\n      slingPos.y,\r\n      0.1 * METER_TO_WORLD,\r\n      Color.BLUE\r\n    );\r\n\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n\r\n    regionBox0.draw(\r\n      batch,\r\n      boxes[0].GetPosition().x * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      boxes[0].GetPosition().y * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n    regionBox1.draw(\r\n      batch,\r\n      boxes[1].GetPosition().x * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      boxes[1].GetPosition().y * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n    regionBox2.draw(\r\n      batch,\r\n      boxes[2].GetPosition().x * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      boxes[2].GetPosition().y * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n    regionBox3.draw(\r\n      batch,\r\n      boxes[3].GetPosition().x * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      boxes[3].GetPosition().y * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n    regionBox4.draw(\r\n      batch,\r\n      boxes[4].GetPosition().x * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      boxes[4].GetPosition().y * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n    regionBox5.draw(\r\n      batch,\r\n      boxes[5].GetPosition().x * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      boxes[5].GetPosition().y * METER_TO_WORLD -\r\n        (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n\r\n    // shapeRenderer.rect(\r\n    //   true,\r\n    //   box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n    //   box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n    //   BOX_SIZE * METER_TO_WORLD,\r\n    //   BOX_SIZE * METER_TO_WORLD,\r\n    //   Color.RED\r\n    // );\r\n    batch.draw(\r\n      slingShot,\r\n      2 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD\r\n    );\r\n    for (let box of pigs) {\r\n      batch.draw(\r\n        pig,\r\n        box.GetPosition().x * METER_TO_WORLD - (PIG_SIZE * METER_TO_WORLD) / 2,\r\n        box.GetPosition().y * METER_TO_WORLD - (PIG_SIZE * METER_TO_WORLD) / 2,\r\n        PIG_SIZE * METER_TO_WORLD,\r\n        PIG_SIZE * METER_TO_WORLD\r\n      );\r\n      // console.log(box.GetContactList());\r\n    }\r\n\r\n    batch.draw(\r\n      bird,\r\n      ball.GetPosition().x * METER_TO_WORLD - 25,\r\n      ball.GetPosition().y * METER_TO_WORLD - 25,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n\r\n    delayTime += delta;\r\n    batch.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}