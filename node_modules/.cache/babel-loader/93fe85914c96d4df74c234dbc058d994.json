{"ast":null,"code":"import { createStage, createViewport, createGameLoop, ShapeRenderer, Texture, TextureRegion, PolygonBatch, Animation, PlayMode, ViewportInputHandler, InputEvent, Vector2 } from \"gdxts\";\nexport const initTest2 = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 500, 1000);\n  const gl = viewport.getContext(); // eslint-disable-next-line\n  // const texture = await Texture.load(gl, \"./charizard.png\");\n\n  const characterTexture = await Texture.load(gl, \"./spritesheet.png\");\n  const regions = TextureRegion.splitTexture(characterTexture, 4, 4);\n  const walkDownAnimation = new Animation(regions.slice(0, 4), 0.2);\n  const walkLeftAnimation = new Animation(regions.slice(4, 8), 0.2);\n  const walkRightAnimation = new Animation(regions.slice(8, 12), 0.2);\n  const walkUpAnimation = new Animation(regions.slice(12, 16), 0.2);\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport);\n  const characterPosition = new Vector2(250, 500);\n  let rotation = 0; // const ROTATION_SPEED = Math.PI * 2;\n\n  let i = 0;\n  let frame = 0;\n  let movingCharacter = false;\n  gl.clearColor(0, 0, 0, 1);\n  let nextPositon = new Vector2(250, 500);\n  let tempx = 0;\n  let tempy = 0; // let temp = characterPosition;\n\n  inputHandler.addEventListener(InputEvent.TouchStart, (x, y) => {\n    nextPositon = inputHandler.getTouchedWorldCoord();\n    rotation = Math.atan2(nextPositon.y - characterPosition.y, nextPositon.x - characterPosition.x) * 180 / Math.PI;\n    console.log(rotation);\n  });\n  const moveSpeed = 150;\n\n  function changePosition(delta) {\n    if (characterPosition.x < nextPositon.x) {\n      characterPosition.x = Math.min(characterPosition.x + delta * moveSpeed, nextPositon.x);\n    }\n\n    if (characterPosition.y < nextPositon.y) {\n      characterPosition.y = Math.min(characterPosition.y + delta * moveSpeed, nextPositon.y);\n    }\n\n    if (characterPosition.x > nextPositon.x) {\n      characterPosition.x = Math.max(characterPosition.x - delta * moveSpeed, nextPositon.x);\n    }\n\n    if (characterPosition.y > nextPositon.y) {\n      characterPosition.y = Math.max(characterPosition.y - delta * moveSpeed, nextPositon.y);\n    }\n  }\n\n  createGameLoop(delta => {\n    i += delta;\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 500, 1000);\n    shapeRenderer.end();\n    let region = walkDownAnimation.getKeyFrame(frame, PlayMode.NORMAL);\n\n    if (characterPosition.x !== nextPositon.x || characterPosition.y !== nextPositon.y) {\n      frame += delta;\n\n      if (rotation >= 0 && rotation < 90) {\n        region = walkRightAnimation.getKeyFrame(frame, PlayMode.LOOP);\n      } else if (rotation >= 90 && rotation < 180) {\n        region = walkLeftAnimation.getKeyFrame(frame, PlayMode.LOOP);\n      } else if (rotation >= -180 && rotation < -90) {\n        region = walkLeftAnimation.getKeyFrame(frame, PlayMode.LOOP);\n      } else {\n        region = walkRightAnimation.getKeyFrame(frame, PlayMode.LOOP);\n      }\n    } else {\n      frame = 0;\n    } // if (\n    //   rotation >= 0 &&\n    //   rotation < 90 &&\n    //   (characterPosition.x !== nextPositon.x ||\n    //     characterPosition.y !== nextPositon.y)\n    // ) {\n    //   // region = walkAnimation.getKeyFrame(frame, PlayMode.NORMAL);\n    //   changePosition();\n    // } else if (\n    //   rotation >= 90 &&\n    //   rotation < 180 &&\n    //   (characterPosition.x !== nextPositon.x ||\n    //     characterPosition.y !== nextPositon.y)\n    // ) {\n    //   frame = frame++;\n    //   frame = (frame % 4) * 2;\n    //   region = walkAnimation.getKeyFrame(frame, PlayMode.NORMAL);\n    //   changePosition();\n    // } else if (\n    //   rotation >= 180 &&\n    //   rotation < 270 &&\n    //   (characterPosition.x !== nextPositon.x ||\n    //     characterPosition.y !== nextPositon.y)\n    // ) {\n    //   frame = 8;\n    //   while (frame <= 12) {\n    //     frame++;\n    //     region = walkAnimation.getKeyFrame(frame, PlayMode.NORMAL);\n    //   }\n    //   changePosition();\n    // }\n    // console.log(frame + \" \" + i);\n\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    changePosition(delta); // batch.draw(\n    //   characterTexture,\n    //   10,\n    //   10,\n    //   500,\n    //   500,\n    //   100,\n    //   100\n    //   // rotation,\n    //   // scale,\n    //   // scale\n    // );\n    // if (movingCharacter === false) {\n    //   characterPosition.set(nextPositon.x, nextPositon.y);\n    //   // console.log(characterPosition);\n    // }\n    // console.log(movingCharacter);\n\n    region.draw(batch, characterPosition.x - 100 / 2, characterPosition.y, 100, 100);\n    batch.end();\n  });\n};","map":{"version":3,"names":["createStage","createViewport","createGameLoop","ShapeRenderer","Texture","TextureRegion","PolygonBatch","Animation","PlayMode","ViewportInputHandler","InputEvent","Vector2","initTest2","stage","canvas","getCanvas","viewport","gl","getContext","characterTexture","load","regions","splitTexture","walkDownAnimation","slice","walkLeftAnimation","walkRightAnimation","walkUpAnimation","shapeRenderer","batch","camera","getCamera","inputHandler","characterPosition","rotation","i","frame","movingCharacter","clearColor","nextPositon","tempx","tempy","addEventListener","TouchStart","x","y","getTouchedWorldCoord","Math","atan2","PI","console","log","moveSpeed","changePosition","delta","min","max","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end","region","getKeyFrame","NORMAL","LOOP","draw"],"sources":["D:/projects/test-game/src/test2.ts"],"sourcesContent":["import {\r\n  createStage,\r\n  createViewport,\r\n  createGameLoop,\r\n  ShapeRenderer,\r\n  Texture,\r\n  TextureRegion,\r\n  PolygonBatch,\r\n  Animation,\r\n  PlayMode,\r\n  ViewportInputHandler,\r\n  InputEvent,\r\n  Vector2,\r\n} from \"gdxts\";\r\n\r\nexport const initTest2 = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, 500, 1000);\r\n  const gl = viewport.getContext();\r\n\r\n  // eslint-disable-next-line\r\n  // const texture = await Texture.load(gl, \"./charizard.png\");\r\n  const characterTexture = await Texture.load(gl, \"./spritesheet.png\");\r\n  const regions = TextureRegion.splitTexture(characterTexture, 4, 4);\r\n\r\n  const walkDownAnimation = new Animation(regions.slice(0, 4), 0.2);\r\n  const walkLeftAnimation = new Animation(regions.slice(4, 8), 0.2);\r\n  const walkRightAnimation = new Animation(regions.slice(8, 12), 0.2);\r\n  const walkUpAnimation = new Animation(regions.slice(12, 16), 0.2);\r\n\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const batch = new PolygonBatch(gl);\r\n  const camera = viewport.getCamera();\r\n\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n  const characterPosition = new Vector2(250, 500);\r\n\r\n  let rotation = 0;\r\n  // const ROTATION_SPEED = Math.PI * 2;\r\n  let i = 0;\r\n  let frame = 0;\r\n  let movingCharacter: boolean = false;\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  let nextPositon = new Vector2(250, 500);\r\n  let tempx = 0;\r\n  let tempy = 0;\r\n  // let temp = characterPosition;\r\n  inputHandler.addEventListener(InputEvent.TouchStart, (x, y) => {\r\n    nextPositon = inputHandler.getTouchedWorldCoord();\r\n    rotation =\r\n      (Math.atan2(\r\n        nextPositon.y - characterPosition.y,\r\n        nextPositon.x - characterPosition.x\r\n      ) *\r\n        180) /\r\n      Math.PI;\r\n    console.log(rotation);\r\n  });\r\n  const moveSpeed = 150;\r\n  function changePosition(delta: number) {\r\n    if (characterPosition.x < nextPositon.x) {\r\n      characterPosition.x = Math.min(\r\n        characterPosition.x + delta * moveSpeed,\r\n        nextPositon.x\r\n      );\r\n    }\r\n    if (characterPosition.y < nextPositon.y) {\r\n      characterPosition.y = Math.min(\r\n        characterPosition.y + delta * moveSpeed,\r\n        nextPositon.y\r\n      );\r\n    }\r\n    if (characterPosition.x > nextPositon.x) {\r\n      characterPosition.x = Math.max(\r\n        characterPosition.x - delta * moveSpeed,\r\n        nextPositon.x\r\n      );\r\n    }\r\n    if (characterPosition.y > nextPositon.y) {\r\n      characterPosition.y = Math.max(\r\n        characterPosition.y - delta * moveSpeed,\r\n        nextPositon.y\r\n      );\r\n    }\r\n  }\r\n\r\n  createGameLoop((delta: number) => {\r\n    i += delta;\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    shapeRenderer.setProjection(camera.projectionView.values);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, 500, 1000);\r\n    shapeRenderer.end();\r\n    let region = walkDownAnimation.getKeyFrame(frame, PlayMode.NORMAL);\r\n\r\n    if (\r\n      characterPosition.x !== nextPositon.x ||\r\n      characterPosition.y !== nextPositon.y\r\n    ) {\r\n      frame += delta;\r\n      if (rotation >= 0 && rotation < 90) {\r\n        region = walkRightAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n      } else if (rotation >= 90 && rotation < 180) {\r\n        region = walkLeftAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n      } else if (rotation >= -180 && rotation < -90) {\r\n        region = walkLeftAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n      } else {\r\n        region = walkRightAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n      }\r\n    } else {\r\n      frame = 0;\r\n    }\r\n\r\n    // if (\r\n    //   rotation >= 0 &&\r\n    //   rotation < 90 &&\r\n    //   (characterPosition.x !== nextPositon.x ||\r\n    //     characterPosition.y !== nextPositon.y)\r\n    // ) {\r\n    //   // region = walkAnimation.getKeyFrame(frame, PlayMode.NORMAL);\r\n    //   changePosition();\r\n    // } else if (\r\n    //   rotation >= 90 &&\r\n    //   rotation < 180 &&\r\n    //   (characterPosition.x !== nextPositon.x ||\r\n    //     characterPosition.y !== nextPositon.y)\r\n    // ) {\r\n    //   frame = frame++;\r\n    //   frame = (frame % 4) * 2;\r\n    //   region = walkAnimation.getKeyFrame(frame, PlayMode.NORMAL);\r\n    //   changePosition();\r\n    // } else if (\r\n    //   rotation >= 180 &&\r\n    //   rotation < 270 &&\r\n    //   (characterPosition.x !== nextPositon.x ||\r\n    //     characterPosition.y !== nextPositon.y)\r\n    // ) {\r\n    //   frame = 8;\r\n    //   while (frame <= 12) {\r\n    //     frame++;\r\n    //     region = walkAnimation.getKeyFrame(frame, PlayMode.NORMAL);\r\n    //   }\r\n    //   changePosition();\r\n    // }\r\n\r\n    // console.log(frame + \" \" + i);\r\n\r\n    batch.setProjection(camera.projectionView.values);\r\n    batch.begin();\r\n    changePosition(delta);\r\n\r\n    // batch.draw(\r\n    //   characterTexture,\r\n    //   10,\r\n    //   10,\r\n    //   500,\r\n    //   500,\r\n    //   100,\r\n    //   100\r\n    //   // rotation,\r\n    //   // scale,\r\n    //   // scale\r\n    // );\r\n    // if (movingCharacter === false) {\r\n    //   characterPosition.set(nextPositon.x, nextPositon.y);\r\n    //   // console.log(characterPosition);\r\n    // }\r\n    // console.log(movingCharacter);\r\n    region.draw(\r\n      batch,\r\n      characterPosition.x - 100 / 2,\r\n      characterPosition.y,\r\n      100,\r\n      100\r\n    );\r\n    batch.end();\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}