{"ast":null,"code":"var int8 = new Int8Array(4);\nvar int32 = new Int32Array(int8.buffer, 0, 1);\nvar float32 = new Float32Array(int8.buffer, 0, 1);\n/**\n * A singleton for number utilities.\n * @class NumberUtil\n */\n\nvar NumberUtil = function () {};\n/**\n * Returns a float representation of the given int bits. ArrayBuffer\n * is used for the conversion.\n *\n * @method  intBitsToFloat\n * @static\n * @param  {Number} i the int to cast\n * @return {Number}   the float\n */\n\n\nNumberUtil.intBitsToFloat = function (i) {\n  int32[0] = i;\n  return float32[0];\n};\n/**\n * Returns the int bits from the given float. ArrayBuffer is used\n * for the conversion.\n *\n * @method  floatToIntBits\n * @static\n * @param  {Number} f the float to cast\n * @return {Number}   the int bits\n */\n\n\nNumberUtil.floatToIntBits = function (f) {\n  float32[0] = f;\n  return int32[0];\n};\n/**\n * Encodes ABGR int as a float, with slight precision loss.\n *\n * @method  intToFloatColor\n * @static\n * @param {Number} value an ABGR packed integer\n */\n\n\nNumberUtil.intToFloatColor = function (value) {\n  return NumberUtil.intBitsToFloat(value & 0xfeffffff);\n};\n/**\n * Returns a float encoded ABGR value from the given RGBA\n * bytes (0 - 255). Useful for saving bandwidth in vertex data.\n *\n * @method  colorToFloat\n * @static\n * @param {Number} r the Red byte (0 - 255)\n * @param {Number} g the Green byte (0 - 255)\n * @param {Number} b the Blue byte (0 - 255)\n * @param {Number} a the Alpha byte (0 - 255)\n * @return {Float32}  a Float32 of the RGBA color\n */\n\n\nNumberUtil.colorToFloat = function (r, g, b, a) {\n  var bits = a << 24 | b << 16 | g << 8 | r;\n  return NumberUtil.intToFloatColor(bits);\n};\n/**\n * Returns true if the number is a power-of-two.\n *\n * @method  isPowerOfTwo\n * @param  {Number}  n the number to test\n * @return {Boolean}   true if power-of-two\n */\n\n\nNumberUtil.isPowerOfTwo = function (n) {\n  return (n & n - 1) === 0;\n};\n/**\n * Returns the next highest power-of-two from the specified number.\n *\n * @param  {Number} n the number to test\n * @return {Number}   the next highest power of two\n */\n\n\nNumberUtil.nextPowerOfTwo = function (n) {\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  return n + 1;\n};\n\nexport default NumberUtil;","map":{"version":3,"names":["int8","Int8Array","int32","Int32Array","buffer","float32","Float32Array","NumberUtil","intBitsToFloat","i","floatToIntBits","f","intToFloatColor","value","colorToFloat","r","g","b","a","bits","isPowerOfTwo","n","nextPowerOfTwo"],"sources":["D:/projects/test-game/node_modules/gdxjs/lib/number-util.js"],"sourcesContent":["var int8 = new Int8Array(4);\nvar int32 = new Int32Array(int8.buffer, 0, 1);\nvar float32 = new Float32Array(int8.buffer, 0, 1);\n/**\n * A singleton for number utilities.\n * @class NumberUtil\n */\n\nvar NumberUtil = function () {};\n/**\n * Returns a float representation of the given int bits. ArrayBuffer\n * is used for the conversion.\n *\n * @method  intBitsToFloat\n * @static\n * @param  {Number} i the int to cast\n * @return {Number}   the float\n */\n\n\nNumberUtil.intBitsToFloat = function (i) {\n  int32[0] = i;\n  return float32[0];\n};\n/**\n * Returns the int bits from the given float. ArrayBuffer is used\n * for the conversion.\n *\n * @method  floatToIntBits\n * @static\n * @param  {Number} f the float to cast\n * @return {Number}   the int bits\n */\n\n\nNumberUtil.floatToIntBits = function (f) {\n  float32[0] = f;\n  return int32[0];\n};\n/**\n * Encodes ABGR int as a float, with slight precision loss.\n *\n * @method  intToFloatColor\n * @static\n * @param {Number} value an ABGR packed integer\n */\n\n\nNumberUtil.intToFloatColor = function (value) {\n  return NumberUtil.intBitsToFloat(value & 0xfeffffff);\n};\n/**\n * Returns a float encoded ABGR value from the given RGBA\n * bytes (0 - 255). Useful for saving bandwidth in vertex data.\n *\n * @method  colorToFloat\n * @static\n * @param {Number} r the Red byte (0 - 255)\n * @param {Number} g the Green byte (0 - 255)\n * @param {Number} b the Blue byte (0 - 255)\n * @param {Number} a the Alpha byte (0 - 255)\n * @return {Float32}  a Float32 of the RGBA color\n */\n\n\nNumberUtil.colorToFloat = function (r, g, b, a) {\n  var bits = a << 24 | b << 16 | g << 8 | r;\n  return NumberUtil.intToFloatColor(bits);\n};\n/**\n * Returns true if the number is a power-of-two.\n *\n * @method  isPowerOfTwo\n * @param  {Number}  n the number to test\n * @return {Boolean}   true if power-of-two\n */\n\n\nNumberUtil.isPowerOfTwo = function (n) {\n  return (n & n - 1) === 0;\n};\n/**\n * Returns the next highest power-of-two from the specified number.\n *\n * @param  {Number} n the number to test\n * @return {Number}   the next highest power of two\n */\n\n\nNumberUtil.nextPowerOfTwo = function (n) {\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  return n + 1;\n};\n\nexport default NumberUtil;"],"mappings":"AAAA,IAAIA,IAAI,GAAG,IAAIC,SAAJ,CAAc,CAAd,CAAX;AACA,IAAIC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,IAAI,CAACI,MAApB,EAA4B,CAA5B,EAA+B,CAA/B,CAAZ;AACA,IAAIC,OAAO,GAAG,IAAIC,YAAJ,CAAiBN,IAAI,CAACI,MAAtB,EAA8B,CAA9B,EAAiC,CAAjC,CAAd;AACA;AACA;AACA;AACA;;AAEA,IAAIG,UAAU,GAAG,YAAY,CAAE,CAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAA,UAAU,CAACC,cAAX,GAA4B,UAAUC,CAAV,EAAa;EACvCP,KAAK,CAAC,CAAD,CAAL,GAAWO,CAAX;EACA,OAAOJ,OAAO,CAAC,CAAD,CAAd;AACD,CAHD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAE,UAAU,CAACG,cAAX,GAA4B,UAAUC,CAAV,EAAa;EACvCN,OAAO,CAAC,CAAD,CAAP,GAAaM,CAAb;EACA,OAAOT,KAAK,CAAC,CAAD,CAAZ;AACD,CAHD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAK,UAAU,CAACK,eAAX,GAA6B,UAAUC,KAAV,EAAiB;EAC5C,OAAON,UAAU,CAACC,cAAX,CAA0BK,KAAK,GAAG,UAAlC,CAAP;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAN,UAAU,CAACO,YAAX,GAA0B,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;EAC9C,IAAIC,IAAI,GAAGD,CAAC,IAAI,EAAL,GAAUD,CAAC,IAAI,EAAf,GAAoBD,CAAC,IAAI,CAAzB,GAA6BD,CAAxC;EACA,OAAOR,UAAU,CAACK,eAAX,CAA2BO,IAA3B,CAAP;AACD,CAHD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAZ,UAAU,CAACa,YAAX,GAA0B,UAAUC,CAAV,EAAa;EACrC,OAAO,CAACA,CAAC,GAAGA,CAAC,GAAG,CAAT,MAAgB,CAAvB;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGAd,UAAU,CAACe,cAAX,GAA4B,UAAUD,CAAV,EAAa;EACvCA,CAAC;EACDA,CAAC,IAAIA,CAAC,IAAI,CAAV;EACAA,CAAC,IAAIA,CAAC,IAAI,CAAV;EACAA,CAAC,IAAIA,CAAC,IAAI,CAAV;EACAA,CAAC,IAAIA,CAAC,IAAI,CAAV;EACAA,CAAC,IAAIA,CAAC,IAAI,EAAV;EACA,OAAOA,CAAC,GAAG,CAAX;AACD,CARD;;AAUA,eAAed,UAAf"},"metadata":{},"sourceType":"module"}