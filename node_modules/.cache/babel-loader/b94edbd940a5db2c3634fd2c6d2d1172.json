{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BoundingBox = void 0;\n\nvar Vector3_1 = require(\"./Vector3\");\n\nvar BoundingBox = /*#__PURE__*/function () {\n  /** Constructs a new bounding box with the minimum and maximum vector set to zeros. */\n  function BoundingBox() {\n    _classCallCheck(this, BoundingBox);\n\n    this.min = new Vector3_1.Vector3();\n    this.max = new Vector3_1.Vector3();\n    this.cnt = new Vector3_1.Vector3();\n    this.dim = new Vector3_1.Vector3();\n    this.clr();\n  }\n\n  _createClass(BoundingBox, [{\n    key: \"getCenter\",\n    value: function getCenter(out) {\n      return out.setFrom(this.cnt);\n    }\n  }, {\n    key: \"getCenterX\",\n    value: function getCenterX() {\n      return this.cnt.x;\n    }\n  }, {\n    key: \"getCenterY\",\n    value: function getCenterY() {\n      return this.cnt.y;\n    }\n  }, {\n    key: \"getCenterZ\",\n    value: function getCenterZ() {\n      return this.cnt.z;\n    }\n  }, {\n    key: \"getCorner000\",\n    value: function getCorner000(out) {\n      return out.set(this.min.x, this.min.y, this.min.z);\n    }\n  }, {\n    key: \"getCorner001\",\n    value: function getCorner001(out) {\n      return out.set(this.min.x, this.min.y, this.max.z);\n    }\n  }, {\n    key: \"getCorner010\",\n    value: function getCorner010(out) {\n      return out.set(this.min.x, this.max.y, this.min.z);\n    }\n  }, {\n    key: \"getCorner011\",\n    value: function getCorner011(out) {\n      return out.set(this.min.x, this.max.y, this.max.z);\n    }\n  }, {\n    key: \"getCorner100\",\n    value: function getCorner100(out) {\n      return out.set(this.max.x, this.min.y, this.min.z);\n    }\n  }, {\n    key: \"getCorner101\",\n    value: function getCorner101(out) {\n      return out.set(this.max.x, this.min.y, this.max.z);\n    }\n  }, {\n    key: \"getCorner110\",\n    value: function getCorner110(out) {\n      return out.set(this.max.x, this.max.y, this.min.z);\n    }\n  }, {\n    key: \"getCorner111\",\n    value: function getCorner111(out) {\n      return out.set(this.max.x, this.max.y, this.max.z);\n    }\n    /** @param out The {@link Vector3} to receive the dimensions of this bounding box on all three axis.\r\n     * @return The vector specified with the out argument */\n\n  }, {\n    key: \"getDimensions\",\n    value: function getDimensions(out) {\n      return out.setFrom(this.dim);\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.dim.x;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.dim.y;\n    }\n  }, {\n    key: \"getDepth\",\n    value: function getDepth() {\n      return this.dim.z;\n    }\n    /** @param out The {@link Vector3} to receive the minimum values.\r\n     * @return The vector specified with the out argument */\n\n  }, {\n    key: \"getMin\",\n    value: function getMin(out) {\n      return out.setFrom(this.min);\n    }\n    /** @param out The {@link Vector3} to receive the maximum values.\r\n     * @return The vector specified with the out argument */\n\n  }, {\n    key: \"getMax\",\n    value: function getMax(out) {\n      return out.setFrom(this.max);\n    }\n    /** Sets the given bounding box.\r\n     *\r\n     * @param bounds The bounds.\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"setFromBounds\",\n    value: function setFromBounds(bounds) {\n      return this.set(bounds.min, bounds.max);\n    }\n    /** Sets the given minimum and maximum vector.\r\n     *\r\n     * @param minimum The minimum vector\r\n     * @param maximum The maximum vector\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"set\",\n    value: function set(minimum, maximum) {\n      this.min.set(minimum.x < maximum.x ? minimum.x : maximum.x, minimum.y < maximum.y ? minimum.y : maximum.y, minimum.z < maximum.z ? minimum.z : maximum.z);\n      this.max.set(minimum.x > maximum.x ? minimum.x : maximum.x, minimum.y > maximum.y ? minimum.y : maximum.y, minimum.z > maximum.z ? minimum.z : maximum.z);\n      this.update();\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.cnt.setFrom(this.min).add(this.max).scale(0.5);\n      this.dim.setFrom(this.max).sub(this.min);\n    }\n    /** Sets the bounding box minimum and maximum vector from the given points.\r\n     *\r\n     * @param points The points.\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"setFromPoints\",\n    value: function setFromPoints(points) {\n      this.inf();\n\n      var _iterator = _createForOfIteratorHelper(points),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var l_point = _step.value;\n          this.extPoint(l_point);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return this;\n    }\n    /** Sets the minimum and maximum vector to positive and negative infinity.\r\n     *\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"inf\",\n    value: function inf() {\n      this.min.set(Infinity, Infinity, Infinity);\n      this.max.set(-Infinity, -Infinity, -Infinity);\n      this.cnt.set(0, 0, 0);\n      this.dim.set(0, 0, 0);\n      return this;\n    }\n    /** Extends the bounding box to incorporate the given {@link Vector3}.\r\n     * @param point The vector\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"extPoint\",\n    value: function extPoint(point) {\n      return this.set(this.min.set(Math.min(this.min.x, point.x), Math.min(this.min.y, point.y), Math.min(this.min.z, point.z)), this.max.set(Math.max(this.max.x, point.x), Math.max(this.max.y, point.y), Math.max(this.max.z, point.z)));\n    }\n    /** Sets the minimum and maximum vector to zeros.\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"clr\",\n    value: function clr() {\n      return this.set(this.min.set(0, 0, 0), this.max.set(0, 0, 0));\n    }\n    /** Returns whether this bounding box is valid. This means that {@link #max} is greater than or equal to {@link #min}.\r\n     * @return True in case the bounding box is valid, false otherwise */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z;\n    }\n    /** Extends this bounding box by the given bounding box.\r\n     *\r\n     * @param a_bounds The bounding box\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"extBounds\",\n    value: function extBounds(a_bounds) {\n      return this.set(this.min.set(Math.min(this.min.x, a_bounds.min.x), Math.min(this.min.y, a_bounds.min.y), Math.min(this.min.z, a_bounds.min.z)), this.max.set(Math.max(this.max.x, a_bounds.max.x), Math.max(this.max.y, a_bounds.max.y), Math.max(this.max.z, a_bounds.max.z)));\n    }\n    /** Extends this bounding box by the given sphere.\r\n     *\r\n     * @param center Sphere center\r\n     * @param radius Sphere radius\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"extSphere\",\n    value: function extSphere(center, radius) {\n      return this.set(this.min.set(Math.min(this.min.x, center.x - radius), Math.min(this.min.y, center.y - radius), Math.min(this.min.z, center.z - radius)), this.max.set(Math.max(this.max.x, center.x + radius), Math.max(this.max.y, center.y + radius), Math.max(this.max.z, center.z + radius)));\n    }\n    /** Extends this bounding box by the given transformed bounding box.\r\n     *\r\n     * @param bounds The bounding box\r\n     * @param transform The transformation matrix to apply to bounds, before using it to extend this bounding box.\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"extTransformedBox\",\n    value: function extTransformedBox(bounds, transform) {\n      this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.min.y, bounds.min.z).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.min.y, bounds.max.z).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.max.y, bounds.min.z).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.max.y, bounds.max.z).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.min.y, bounds.min.z).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.min.y, bounds.max.z).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.max.y, bounds.min.z).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.max.y, bounds.max.z).multiply(transform));\n      return this;\n    }\n    /** Multiplies the bounding box by the given matrix. This is achieved by multiplying the 8 corner points and then calculating\r\n     * the minimum and maximum vectors from the transformed points.\r\n     *\r\n     * @param transform The matrix\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"mul\",\n    value: function mul(transform) {\n      var x0 = this.min.x,\n          y0 = this.min.y,\n          z0 = this.min.z,\n          x1 = this.max.x,\n          y1 = this.max.y,\n          z1 = this.max.z;\n      this.inf();\n      this.extPoint(BoundingBox.tmpVector.set(x0, y0, z0).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(x0, y0, z1).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(x0, y1, z0).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(x0, y1, z1).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(x1, y0, z0).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(x1, y0, z1).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(x1, y1, z0).multiply(transform));\n      this.extPoint(BoundingBox.tmpVector.set(x1, y1, z1).multiply(transform));\n      return this;\n    }\n    /** Returns whether the given bounding box is contained in this bounding box.\r\n     * @param b The bounding box\r\n     * @return Whether the given bounding box is contained */\n\n  }, {\n    key: \"containsBounds\",\n    value: function containsBounds(b) {\n      return !this.isValid() || this.min.x <= b.min.x && this.min.y <= b.min.y && this.min.z <= b.min.z && this.max.x >= b.max.x && this.max.y >= b.max.y && this.max.z >= b.max.z;\n    }\n    /** Returns whether the given bounding box is intersecting this bounding box (at least one point in).\r\n     * @param b The bounding box\r\n     * @return Whether the given bounding box is intersected */\n\n  }, {\n    key: \"intersects\",\n    value: function intersects(b) {\n      if (!this.isValid()) return false; // test using SAT (separating axis theorem)\n\n      var lx = Math.abs(this.cnt.x - b.cnt.x);\n      var sumx = this.dim.x / 2.0 + b.dim.x / 2.0;\n      var ly = Math.abs(this.cnt.y - b.cnt.y);\n      var sumy = this.dim.y / 2.0 + b.dim.y / 2.0;\n      var lz = Math.abs(this.cnt.z - b.cnt.z);\n      var sumz = this.dim.z / 2.0 + b.dim.z / 2.0;\n      return lx <= sumx && ly <= sumy && lz <= sumz;\n    }\n    /** Returns whether the given vector is contained in this bounding box.\r\n     * @param v The vector\r\n     * @return Whether the vector is contained or not. */\n\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(v) {\n      return this.min.x <= v.x && this.max.x >= v.x && this.min.y <= v.y && this.max.y >= v.y && this.min.z <= v.z && this.max.z >= v.z;\n    }\n    /** Extends the bounding box by the given vector.\r\n     *\r\n     * @param x The x-coordinate\r\n     * @param y The y-coordinate\r\n     * @param z The z-coordinate\r\n     * @return This bounding box for chaining. */\n\n  }, {\n    key: \"ext\",\n    value: function ext(x, y, z) {\n      return this.set(this.min.set(Math.min(this.min.x, x), Math.min(this.min.y, y), Math.min(this.min.z, z)), this.max.set(Math.max(this.max.x, x), Math.max(this.max.y, y), Math.max(this.max.z, z)));\n    }\n  }]);\n\n  return BoundingBox;\n}();\n\nexports.BoundingBox = BoundingBox;\nBoundingBox.tmpVector = new Vector3_1.Vector3();","map":{"version":3,"names":["Object","defineProperty","exports","value","BoundingBox","Vector3_1","require","min","Vector3","max","cnt","dim","clr","out","setFrom","x","y","z","set","bounds","minimum","maximum","update","add","scale","sub","points","inf","l_point","extPoint","Infinity","point","Math","a_bounds","center","radius","transform","tmpVector","multiply","x0","y0","z0","x1","y1","z1","b","isValid","lx","abs","sumx","ly","sumy","lz","sumz","v"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/BoundingBox.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BoundingBox = void 0;\r\nconst Vector3_1 = require(\"./Vector3\");\r\nclass BoundingBox {\r\n    /** Constructs a new bounding box with the minimum and maximum vector set to zeros. */\r\n    constructor() {\r\n        this.min = new Vector3_1.Vector3();\r\n        this.max = new Vector3_1.Vector3();\r\n        this.cnt = new Vector3_1.Vector3();\r\n        this.dim = new Vector3_1.Vector3();\r\n        this.clr();\r\n    }\r\n    getCenter(out) {\r\n        return out.setFrom(this.cnt);\r\n    }\r\n    getCenterX() {\r\n        return this.cnt.x;\r\n    }\r\n    getCenterY() {\r\n        return this.cnt.y;\r\n    }\r\n    getCenterZ() {\r\n        return this.cnt.z;\r\n    }\r\n    getCorner000(out) {\r\n        return out.set(this.min.x, this.min.y, this.min.z);\r\n    }\r\n    getCorner001(out) {\r\n        return out.set(this.min.x, this.min.y, this.max.z);\r\n    }\r\n    getCorner010(out) {\r\n        return out.set(this.min.x, this.max.y, this.min.z);\r\n    }\r\n    getCorner011(out) {\r\n        return out.set(this.min.x, this.max.y, this.max.z);\r\n    }\r\n    getCorner100(out) {\r\n        return out.set(this.max.x, this.min.y, this.min.z);\r\n    }\r\n    getCorner101(out) {\r\n        return out.set(this.max.x, this.min.y, this.max.z);\r\n    }\r\n    getCorner110(out) {\r\n        return out.set(this.max.x, this.max.y, this.min.z);\r\n    }\r\n    getCorner111(out) {\r\n        return out.set(this.max.x, this.max.y, this.max.z);\r\n    }\r\n    /** @param out The {@link Vector3} to receive the dimensions of this bounding box on all three axis.\r\n     * @return The vector specified with the out argument */\r\n    getDimensions(out) {\r\n        return out.setFrom(this.dim);\r\n    }\r\n    getWidth() {\r\n        return this.dim.x;\r\n    }\r\n    getHeight() {\r\n        return this.dim.y;\r\n    }\r\n    getDepth() {\r\n        return this.dim.z;\r\n    }\r\n    /** @param out The {@link Vector3} to receive the minimum values.\r\n     * @return The vector specified with the out argument */\r\n    getMin(out) {\r\n        return out.setFrom(this.min);\r\n    }\r\n    /** @param out The {@link Vector3} to receive the maximum values.\r\n     * @return The vector specified with the out argument */\r\n    getMax(out) {\r\n        return out.setFrom(this.max);\r\n    }\r\n    /** Sets the given bounding box.\r\n     *\r\n     * @param bounds The bounds.\r\n     * @return This bounding box for chaining. */\r\n    setFromBounds(bounds) {\r\n        return this.set(bounds.min, bounds.max);\r\n    }\r\n    /** Sets the given minimum and maximum vector.\r\n     *\r\n     * @param minimum The minimum vector\r\n     * @param maximum The maximum vector\r\n     * @return This bounding box for chaining. */\r\n    set(minimum, maximum) {\r\n        this.min.set(minimum.x < maximum.x ? minimum.x : maximum.x, minimum.y < maximum.y ? minimum.y : maximum.y, minimum.z < maximum.z ? minimum.z : maximum.z);\r\n        this.max.set(minimum.x > maximum.x ? minimum.x : maximum.x, minimum.y > maximum.y ? minimum.y : maximum.y, minimum.z > maximum.z ? minimum.z : maximum.z);\r\n        this.update();\r\n        return this;\r\n    }\r\n    update() {\r\n        this.cnt.setFrom(this.min).add(this.max).scale(0.5);\r\n        this.dim.setFrom(this.max).sub(this.min);\r\n    }\r\n    /** Sets the bounding box minimum and maximum vector from the given points.\r\n     *\r\n     * @param points The points.\r\n     * @return This bounding box for chaining. */\r\n    setFromPoints(points) {\r\n        this.inf();\r\n        for (let l_point of points)\r\n            this.extPoint(l_point);\r\n        return this;\r\n    }\r\n    /** Sets the minimum and maximum vector to positive and negative infinity.\r\n     *\r\n     * @return This bounding box for chaining. */\r\n    inf() {\r\n        this.min.set(Infinity, Infinity, Infinity);\r\n        this.max.set(-Infinity, -Infinity, -Infinity);\r\n        this.cnt.set(0, 0, 0);\r\n        this.dim.set(0, 0, 0);\r\n        return this;\r\n    }\r\n    /** Extends the bounding box to incorporate the given {@link Vector3}.\r\n     * @param point The vector\r\n     * @return This bounding box for chaining. */\r\n    extPoint(point) {\r\n        return this.set(this.min.set(Math.min(this.min.x, point.x), Math.min(this.min.y, point.y), Math.min(this.min.z, point.z)), this.max.set(Math.max(this.max.x, point.x), Math.max(this.max.y, point.y), Math.max(this.max.z, point.z)));\r\n    }\r\n    /** Sets the minimum and maximum vector to zeros.\r\n     * @return This bounding box for chaining. */\r\n    clr() {\r\n        return this.set(this.min.set(0, 0, 0), this.max.set(0, 0, 0));\r\n    }\r\n    /** Returns whether this bounding box is valid. This means that {@link #max} is greater than or equal to {@link #min}.\r\n     * @return True in case the bounding box is valid, false otherwise */\r\n    isValid() {\r\n        return this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z;\r\n    }\r\n    /** Extends this bounding box by the given bounding box.\r\n     *\r\n     * @param a_bounds The bounding box\r\n     * @return This bounding box for chaining. */\r\n    extBounds(a_bounds) {\r\n        return this.set(this.min.set(Math.min(this.min.x, a_bounds.min.x), Math.min(this.min.y, a_bounds.min.y), Math.min(this.min.z, a_bounds.min.z)), this.max.set(Math.max(this.max.x, a_bounds.max.x), Math.max(this.max.y, a_bounds.max.y), Math.max(this.max.z, a_bounds.max.z)));\r\n    }\r\n    /** Extends this bounding box by the given sphere.\r\n     *\r\n     * @param center Sphere center\r\n     * @param radius Sphere radius\r\n     * @return This bounding box for chaining. */\r\n    extSphere(center, radius) {\r\n        return this.set(this.min.set(Math.min(this.min.x, center.x - radius), Math.min(this.min.y, center.y - radius), Math.min(this.min.z, center.z - radius)), this.max.set(Math.max(this.max.x, center.x + radius), Math.max(this.max.y, center.y + radius), Math.max(this.max.z, center.z + radius)));\r\n    }\r\n    /** Extends this bounding box by the given transformed bounding box.\r\n     *\r\n     * @param bounds The bounding box\r\n     * @param transform The transformation matrix to apply to bounds, before using it to extend this bounding box.\r\n     * @return This bounding box for chaining. */\r\n    extTransformedBox(bounds, transform) {\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.min.y, bounds.min.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.min.y, bounds.max.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.max.y, bounds.min.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.min.x, bounds.max.y, bounds.max.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.min.y, bounds.min.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.min.y, bounds.max.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.max.y, bounds.min.z).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(bounds.max.x, bounds.max.y, bounds.max.z).multiply(transform));\r\n        return this;\r\n    }\r\n    /** Multiplies the bounding box by the given matrix. This is achieved by multiplying the 8 corner points and then calculating\r\n     * the minimum and maximum vectors from the transformed points.\r\n     *\r\n     * @param transform The matrix\r\n     * @return This bounding box for chaining. */\r\n    mul(transform) {\r\n        let x0 = this.min.x, y0 = this.min.y, z0 = this.min.z, x1 = this.max.x, y1 = this.max.y, z1 = this.max.z;\r\n        this.inf();\r\n        this.extPoint(BoundingBox.tmpVector.set(x0, y0, z0).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x0, y0, z1).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x0, y1, z0).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x0, y1, z1).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x1, y0, z0).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x1, y0, z1).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x1, y1, z0).multiply(transform));\r\n        this.extPoint(BoundingBox.tmpVector.set(x1, y1, z1).multiply(transform));\r\n        return this;\r\n    }\r\n    /** Returns whether the given bounding box is contained in this bounding box.\r\n     * @param b The bounding box\r\n     * @return Whether the given bounding box is contained */\r\n    containsBounds(b) {\r\n        return (!this.isValid() ||\r\n            (this.min.x <= b.min.x &&\r\n                this.min.y <= b.min.y &&\r\n                this.min.z <= b.min.z &&\r\n                this.max.x >= b.max.x &&\r\n                this.max.y >= b.max.y &&\r\n                this.max.z >= b.max.z));\r\n    }\r\n    /** Returns whether the given bounding box is intersecting this bounding box (at least one point in).\r\n     * @param b The bounding box\r\n     * @return Whether the given bounding box is intersected */\r\n    intersects(b) {\r\n        if (!this.isValid())\r\n            return false;\r\n        // test using SAT (separating axis theorem)\r\n        const lx = Math.abs(this.cnt.x - b.cnt.x);\r\n        const sumx = this.dim.x / 2.0 + b.dim.x / 2.0;\r\n        const ly = Math.abs(this.cnt.y - b.cnt.y);\r\n        const sumy = this.dim.y / 2.0 + b.dim.y / 2.0;\r\n        const lz = Math.abs(this.cnt.z - b.cnt.z);\r\n        const sumz = this.dim.z / 2.0 + b.dim.z / 2.0;\r\n        return lx <= sumx && ly <= sumy && lz <= sumz;\r\n    }\r\n    /** Returns whether the given vector is contained in this bounding box.\r\n     * @param v The vector\r\n     * @return Whether the vector is contained or not. */\r\n    containsPoint(v) {\r\n        return (this.min.x <= v.x &&\r\n            this.max.x >= v.x &&\r\n            this.min.y <= v.y &&\r\n            this.max.y >= v.y &&\r\n            this.min.z <= v.z &&\r\n            this.max.z >= v.z);\r\n    }\r\n    /** Extends the bounding box by the given vector.\r\n     *\r\n     * @param x The x-coordinate\r\n     * @param y The y-coordinate\r\n     * @param z The z-coordinate\r\n     * @return This bounding box for chaining. */\r\n    ext(x, y, z) {\r\n        return this.set(this.min.set(Math.min(this.min.x, x), Math.min(this.min.y, y), Math.min(this.min.z, z)), this.max.set(Math.max(this.max.x, x), Math.max(this.max.y, y), Math.max(this.max.z, z)));\r\n    }\r\n}\r\nexports.BoundingBox = BoundingBox;\r\nBoundingBox.tmpVector = new Vector3_1.Vector3();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}