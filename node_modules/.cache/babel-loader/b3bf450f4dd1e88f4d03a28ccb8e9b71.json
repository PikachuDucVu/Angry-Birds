{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport numberUtil from './number-util';\nconst {\n  isPowerOfTwo\n} = numberUtil;\nexport default class Texture {\n  constructor(gl, options) {\n    this.gl = gl;\n    this.managedArgs = options;\n    this.id = null;\n    this.target = gl.TEXTURE_2D;\n    this.width = 0;\n    this.height = 0;\n    this.__shape = [0, 0];\n    this.wrapS = Texture.DEFAULT_WRAP;\n    this.wrapT = Texture.DEFAULT_WRAP;\n    this.minFilter = Texture.DEFAULT_FILTER;\n    this.magFilter = Texture.DEFAULT_FILTER;\n    Object.defineProperty(this, 'shape', {\n      get() {\n        this.__shape[0] = this.width;\n        this.__shape[1] = this.height;\n        return this.__shape;\n      },\n\n      set(shape) {//noop\n      }\n\n    });\n    this.create();\n  }\n\n  setup(options) {\n    var gl = this.gl; //If no options is provided... this method does nothing.\n\n    if (!options) return; // width, height, format, dataType, data, genMipmaps\n    //If 'src' is provided, try to load the image from a path...\n\n    if (options.src && typeof options.src === 'string') {\n      var img = new Image();\n      var path = options.src;\n      var crossOrigin = options.crossOrigin;\n      var successCB = typeof options.onLoad === 'function' ? options.onLoad : null;\n      var failCB = typeof options.onError === 'function' ? options.onError : null;\n      var genMipmaps = options.genMipmaps;\n      var self = this; //If you try to render a texture that is not yet \"renderable\" (i.e. the\n      //async load hasn't completed yet, which is always the case in Chrome since requestAnimationFrame\n      //fires before img.onload), WebGL will throw us errors. So instead we will just upload some\n      //dummy data until the texture load is complete. Users can disable this with the global flag.\n\n      if (Texture.USE_DUMMY_1x1_DATA) {\n        self.uploadData(1, 1);\n        this.width = this.height = 0;\n      }\n\n      img.crossOrigin = crossOrigin;\n\n      img.onload = function (ev) {\n        self.uploadImage(img, undefined, undefined, genMipmaps);\n        if (typeof successCB === 'function') successCB.call(self, ev, self);\n      };\n\n      img.onerror = function (ev) {\n        if (genMipmaps) //we still need to gen mipmaps on the 1x1 dummy\n          gl.generateMipmap(gl.TEXTURE_2D);\n        if (typeof failCB === 'function') failCB.call(self, ev, self);\n      };\n\n      img.onabort = function (ev) {\n        if (genMipmaps) gl.generateMipmap(gl.TEXTURE_2D);\n        if (typeof failCB === 'function') failCB.call(self, ev, self);\n      };\n\n      img.src = path;\n    } //otherwise see if we have an 'image' specified\n    else if (options.image) {\n      this.uploadImage(options.image, options.format, options.dataType, options.genMipmaps);\n    } //otherwise assume our regular list of width/height arguments are passed\n    else {\n      this.uploadData(options.width, options.height, options.format, options.dataType, options.data, options.genMipmaps);\n    }\n  }\n\n  create() {\n    var gl = this.gl;\n    this.id = gl.createTexture(); //texture ID is recreated\n\n    this.width = this.height = 0; //size is reset to zero until loaded\n\n    this.target = gl.TEXTURE_2D; //the provider can change this if necessary (e.g. cube maps)\n\n    this.bind(); //TODO: clean these up a little.\n\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, Texture.UNPACK_PREMULTIPLY_ALPHA);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, Texture.UNPACK_ALIGNMENT);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, Texture.UNPACK_FLIP_Y);\n    var colorspace = Texture.UNPACK_COLORSPACE_CONVERSION || gl.BROWSER_DEFAULT_WEBGL;\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, colorspace); //setup wrap modes without binding redundantly\n\n    this.setWrap(this.wrapS, this.wrapT, false);\n    this.setFilter(this.minFilter, this.magFilter, false);\n\n    if (this.managedArgs) {\n      this.setup(this.managedArgs);\n    }\n  }\n\n  destroy() {\n    if (this.id && this.gl) this.gl.deleteTexture(this.id);\n    if (this.context) this.context.removeManagedObject(this);\n    this.width = this.height = 0;\n    this.id = null;\n    this.managedArgs = null;\n    this.context = null;\n    this.gl = null;\n  }\n\n  setWrap(s, t, ignoreBind) {\n    //TODO: support R wrap mode\n    if (s && t) {\n      this.wrapS = s;\n      this.wrapT = t;\n    } else this.wrapS = this.wrapT = s; //enforce POT rules..\n\n\n    this._checkPOT();\n\n    if (!ignoreBind) this.bind();\n    var gl = this.gl;\n    gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, this.wrapS);\n    gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, this.wrapT);\n  }\n\n  setFilter(min, mag, ignoreBind) {\n    if (min && mag) {\n      this.minFilter = min;\n      this.magFilter = mag;\n    } else this.minFilter = this.magFilter = min; //enforce POT rules..\n\n\n    this._checkPOT();\n\n    if (!ignoreBind) this.bind();\n    var gl = this.gl;\n    gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, this.minFilter);\n    gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, this.magFilter);\n  }\n\n  uploadData(width, height, format, type, data, genMipmaps) {\n    var gl = this.gl;\n    format = format || gl.RGBA;\n    type = type || gl.UNSIGNED_BYTE;\n    data = data || null; //make sure falsey value is null for texImage2D\n\n    this.width = width || width == 0 ? width : this.width;\n    this.height = height || height == 0 ? height : this.height;\n\n    this._checkPOT();\n\n    this.bind();\n    gl.texImage2D(this.target, 0, format, this.width, this.height, 0, format, type, data);\n    if (genMipmaps) gl.generateMipmap(this.target);\n  }\n\n  uploadImage(domObject, format, type, genMipmaps) {\n    var gl = this.gl;\n    format = format || gl.RGBA;\n    type = type || gl.UNSIGNED_BYTE;\n    this.width = domObject.width;\n    this.height = domObject.height;\n\n    this._checkPOT();\n\n    this.bind();\n    gl.texImage2D(this.target, 0, format, format, type, domObject);\n    if (genMipmaps) gl.generateMipmap(this.target);\n  }\n\n  _checkPOT() {\n    if (!Texture.FORCE_POT) {\n      //If minFilter is anything but LINEAR or NEAREST\n      //or if wrapS or wrapT are not CLAMP_TO_EDGE...\n      var wrongFilter = this.minFilter !== Texture.Filter.LINEAR && this.minFilter !== Texture.Filter.NEAREST;\n      var wrongWrap = this.wrapS !== Texture.Wrap.CLAMP_TO_EDGE || this.wrapT !== Texture.Wrap.CLAMP_TO_EDGE;\n\n      if (wrongFilter || wrongWrap) {\n        if (!isPowerOfTwo(this.width) || !isPowerOfTwo(this.height)) throw new Error(wrongFilter ? 'Non-power-of-two textures cannot use mipmapping as filter' : 'Non-power-of-two textures must use CLAMP_TO_EDGE as wrap');\n      }\n    }\n  }\n\n  bind(unit) {\n    var gl = this.gl;\n    if (unit || unit === 0) gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(this.target, this.id);\n  }\n\n  toString() {\n    return this.id + ':' + this.width + 'x' + this.height + '';\n  }\n\n}\n\n_defineProperty(Texture, \"Filter\", {\n  NEAREST: 9728,\n  NEAREST_MIPMAP_LINEAR: 9986,\n  NEAREST_MIPMAP_NEAREST: 9984,\n  LINEAR: 9729,\n  LINEAR_MIPMAP_LINEAR: 9987,\n  LINEAR_MIPMAP_NEAREST: 9985\n});\n\n_defineProperty(Texture, \"Wrap\", {\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n});\n\n_defineProperty(Texture, \"Format\", {\n  DEPTH_COMPONENT: 6402,\n  ALPHA: 6406,\n  RGBA: 6408,\n  RGB: 6407,\n  LUMINANCE: 6409,\n  LUMINANCE_ALPHA: 6410\n});\n\n_defineProperty(Texture, \"DataType\", {\n  BYTE: 5120,\n  SHORT: 5122,\n  INT: 5124,\n  FLOAT: 5126,\n  UNSIGNED_BYTE: 5121,\n  UNSIGNED_INT: 5125,\n  UNSIGNED_SHORT: 5123,\n  UNSIGNED_SHORT_4_4_4_4: 32819,\n  UNSIGNED_SHORT_5_5_5_1: 32820,\n  UNSIGNED_SHORT_5_6_5: 33635\n});\n\n_defineProperty(Texture, \"DEFAULT_WRAP\", Texture.Wrap.CLAMP_TO_EDGE);\n\n_defineProperty(Texture, \"DEFAULT_FILTER\", Texture.Filter.NEAREST);\n\n_defineProperty(Texture, \"FORCE_POT\", false);\n\n_defineProperty(Texture, \"UNPACK_FLIP_Y\", false);\n\n_defineProperty(Texture, \"UNPACK_ALIGNMENT\", 1);\n\n_defineProperty(Texture, \"UNPACK_PREMULTIPLY_ALPHA\", true);\n\n_defineProperty(Texture, \"UNPACK_COLORSPACE_CONVERSION\", undefined);\n\n_defineProperty(Texture, \"getNumComponents\", function (format) {\n  switch (format) {\n    case Texture.Format.DEPTH_COMPONENT:\n    case Texture.Format.ALPHA:\n    case Texture.Format.LUMINANCE:\n      return 1;\n\n    case Texture.Format.LUMINANCE_ALPHA:\n      return 2;\n\n    case Texture.Format.RGB:\n      return 3;\n\n    case Texture.Format.RGBA:\n      return 4;\n  }\n\n  return null;\n});","map":{"version":3,"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","numberUtil","isPowerOfTwo","Texture","constructor","gl","options","managedArgs","id","target","TEXTURE_2D","width","height","__shape","wrapS","DEFAULT_WRAP","wrapT","minFilter","DEFAULT_FILTER","magFilter","get","set","shape","create","setup","src","img","Image","path","crossOrigin","successCB","onLoad","failCB","onError","genMipmaps","self","USE_DUMMY_1x1_DATA","uploadData","onload","ev","uploadImage","undefined","call","onerror","generateMipmap","onabort","image","format","dataType","data","createTexture","bind","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_PREMULTIPLY_ALPHA","UNPACK_ALIGNMENT","UNPACK_FLIP_Y_WEBGL","UNPACK_FLIP_Y","colorspace","UNPACK_COLORSPACE_CONVERSION","BROWSER_DEFAULT_WEBGL","UNPACK_COLORSPACE_CONVERSION_WEBGL","setWrap","setFilter","destroy","deleteTexture","context","removeManagedObject","s","t","ignoreBind","_checkPOT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","min","mag","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","type","RGBA","UNSIGNED_BYTE","texImage2D","domObject","FORCE_POT","wrongFilter","Filter","LINEAR","NEAREST","wrongWrap","Wrap","CLAMP_TO_EDGE","Error","unit","activeTexture","TEXTURE0","bindTexture","toString","NEAREST_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","MIRRORED_REPEAT","REPEAT","DEPTH_COMPONENT","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","BYTE","SHORT","INT","FLOAT","UNSIGNED_INT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","Format"],"sources":["D:/projects/test-game/node_modules/gdxjs/lib/Texture.js"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport numberUtil from './number-util';\nconst {\n  isPowerOfTwo\n} = numberUtil;\nexport default class Texture {\n  constructor(gl, options) {\n    this.gl = gl;\n    this.managedArgs = options;\n    this.id = null;\n    this.target = gl.TEXTURE_2D;\n    this.width = 0;\n    this.height = 0;\n    this.__shape = [0, 0];\n    this.wrapS = Texture.DEFAULT_WRAP;\n    this.wrapT = Texture.DEFAULT_WRAP;\n    this.minFilter = Texture.DEFAULT_FILTER;\n    this.magFilter = Texture.DEFAULT_FILTER;\n    Object.defineProperty(this, 'shape', {\n      get() {\n        this.__shape[0] = this.width;\n        this.__shape[1] = this.height;\n        return this.__shape;\n      },\n\n      set(shape) {//noop\n      }\n\n    });\n    this.create();\n  }\n\n  setup(options) {\n    var gl = this.gl; //If no options is provided... this method does nothing.\n\n    if (!options) return; // width, height, format, dataType, data, genMipmaps\n    //If 'src' is provided, try to load the image from a path...\n\n    if (options.src && typeof options.src === 'string') {\n      var img = new Image();\n      var path = options.src;\n      var crossOrigin = options.crossOrigin;\n      var successCB = typeof options.onLoad === 'function' ? options.onLoad : null;\n      var failCB = typeof options.onError === 'function' ? options.onError : null;\n      var genMipmaps = options.genMipmaps;\n      var self = this; //If you try to render a texture that is not yet \"renderable\" (i.e. the\n      //async load hasn't completed yet, which is always the case in Chrome since requestAnimationFrame\n      //fires before img.onload), WebGL will throw us errors. So instead we will just upload some\n      //dummy data until the texture load is complete. Users can disable this with the global flag.\n\n      if (Texture.USE_DUMMY_1x1_DATA) {\n        self.uploadData(1, 1);\n        this.width = this.height = 0;\n      }\n\n      img.crossOrigin = crossOrigin;\n\n      img.onload = function (ev) {\n        self.uploadImage(img, undefined, undefined, genMipmaps);\n        if (typeof successCB === 'function') successCB.call(self, ev, self);\n      };\n\n      img.onerror = function (ev) {\n        if (genMipmaps) //we still need to gen mipmaps on the 1x1 dummy\n          gl.generateMipmap(gl.TEXTURE_2D);\n        if (typeof failCB === 'function') failCB.call(self, ev, self);\n      };\n\n      img.onabort = function (ev) {\n        if (genMipmaps) gl.generateMipmap(gl.TEXTURE_2D);\n        if (typeof failCB === 'function') failCB.call(self, ev, self);\n      };\n\n      img.src = path;\n    } //otherwise see if we have an 'image' specified\n    else if (options.image) {\n        this.uploadImage(options.image, options.format, options.dataType, options.genMipmaps);\n      } //otherwise assume our regular list of width/height arguments are passed\n      else {\n          this.uploadData(options.width, options.height, options.format, options.dataType, options.data, options.genMipmaps);\n        }\n  }\n\n  create() {\n    var gl = this.gl;\n    this.id = gl.createTexture(); //texture ID is recreated\n\n    this.width = this.height = 0; //size is reset to zero until loaded\n\n    this.target = gl.TEXTURE_2D; //the provider can change this if necessary (e.g. cube maps)\n\n    this.bind(); //TODO: clean these up a little.\n\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, Texture.UNPACK_PREMULTIPLY_ALPHA);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, Texture.UNPACK_ALIGNMENT);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, Texture.UNPACK_FLIP_Y);\n    var colorspace = Texture.UNPACK_COLORSPACE_CONVERSION || gl.BROWSER_DEFAULT_WEBGL;\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, colorspace); //setup wrap modes without binding redundantly\n\n    this.setWrap(this.wrapS, this.wrapT, false);\n    this.setFilter(this.minFilter, this.magFilter, false);\n\n    if (this.managedArgs) {\n      this.setup(this.managedArgs);\n    }\n  }\n\n  destroy() {\n    if (this.id && this.gl) this.gl.deleteTexture(this.id);\n    if (this.context) this.context.removeManagedObject(this);\n    this.width = this.height = 0;\n    this.id = null;\n    this.managedArgs = null;\n    this.context = null;\n    this.gl = null;\n  }\n\n  setWrap(s, t, ignoreBind) {\n    //TODO: support R wrap mode\n    if (s && t) {\n      this.wrapS = s;\n      this.wrapT = t;\n    } else this.wrapS = this.wrapT = s; //enforce POT rules..\n\n\n    this._checkPOT();\n\n    if (!ignoreBind) this.bind();\n    var gl = this.gl;\n    gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, this.wrapS);\n    gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, this.wrapT);\n  }\n\n  setFilter(min, mag, ignoreBind) {\n    if (min && mag) {\n      this.minFilter = min;\n      this.magFilter = mag;\n    } else this.minFilter = this.magFilter = min; //enforce POT rules..\n\n\n    this._checkPOT();\n\n    if (!ignoreBind) this.bind();\n    var gl = this.gl;\n    gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, this.minFilter);\n    gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, this.magFilter);\n  }\n\n  uploadData(width, height, format, type, data, genMipmaps) {\n    var gl = this.gl;\n    format = format || gl.RGBA;\n    type = type || gl.UNSIGNED_BYTE;\n    data = data || null; //make sure falsey value is null for texImage2D\n\n    this.width = width || width == 0 ? width : this.width;\n    this.height = height || height == 0 ? height : this.height;\n\n    this._checkPOT();\n\n    this.bind();\n    gl.texImage2D(this.target, 0, format, this.width, this.height, 0, format, type, data);\n    if (genMipmaps) gl.generateMipmap(this.target);\n  }\n\n  uploadImage(domObject, format, type, genMipmaps) {\n    var gl = this.gl;\n    format = format || gl.RGBA;\n    type = type || gl.UNSIGNED_BYTE;\n    this.width = domObject.width;\n    this.height = domObject.height;\n\n    this._checkPOT();\n\n    this.bind();\n    gl.texImage2D(this.target, 0, format, format, type, domObject);\n    if (genMipmaps) gl.generateMipmap(this.target);\n  }\n\n  _checkPOT() {\n    if (!Texture.FORCE_POT) {\n      //If minFilter is anything but LINEAR or NEAREST\n      //or if wrapS or wrapT are not CLAMP_TO_EDGE...\n      var wrongFilter = this.minFilter !== Texture.Filter.LINEAR && this.minFilter !== Texture.Filter.NEAREST;\n      var wrongWrap = this.wrapS !== Texture.Wrap.CLAMP_TO_EDGE || this.wrapT !== Texture.Wrap.CLAMP_TO_EDGE;\n\n      if (wrongFilter || wrongWrap) {\n        if (!isPowerOfTwo(this.width) || !isPowerOfTwo(this.height)) throw new Error(wrongFilter ? 'Non-power-of-two textures cannot use mipmapping as filter' : 'Non-power-of-two textures must use CLAMP_TO_EDGE as wrap');\n      }\n    }\n  }\n\n  bind(unit) {\n    var gl = this.gl;\n    if (unit || unit === 0) gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(this.target, this.id);\n  }\n\n  toString() {\n    return this.id + ':' + this.width + 'x' + this.height + '';\n  }\n\n}\n\n_defineProperty(Texture, \"Filter\", {\n  NEAREST: 9728,\n  NEAREST_MIPMAP_LINEAR: 9986,\n  NEAREST_MIPMAP_NEAREST: 9984,\n  LINEAR: 9729,\n  LINEAR_MIPMAP_LINEAR: 9987,\n  LINEAR_MIPMAP_NEAREST: 9985\n});\n\n_defineProperty(Texture, \"Wrap\", {\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n});\n\n_defineProperty(Texture, \"Format\", {\n  DEPTH_COMPONENT: 6402,\n  ALPHA: 6406,\n  RGBA: 6408,\n  RGB: 6407,\n  LUMINANCE: 6409,\n  LUMINANCE_ALPHA: 6410\n});\n\n_defineProperty(Texture, \"DataType\", {\n  BYTE: 5120,\n  SHORT: 5122,\n  INT: 5124,\n  FLOAT: 5126,\n  UNSIGNED_BYTE: 5121,\n  UNSIGNED_INT: 5125,\n  UNSIGNED_SHORT: 5123,\n  UNSIGNED_SHORT_4_4_4_4: 32819,\n  UNSIGNED_SHORT_5_5_5_1: 32820,\n  UNSIGNED_SHORT_5_6_5: 33635\n});\n\n_defineProperty(Texture, \"DEFAULT_WRAP\", Texture.Wrap.CLAMP_TO_EDGE);\n\n_defineProperty(Texture, \"DEFAULT_FILTER\", Texture.Filter.NEAREST);\n\n_defineProperty(Texture, \"FORCE_POT\", false);\n\n_defineProperty(Texture, \"UNPACK_FLIP_Y\", false);\n\n_defineProperty(Texture, \"UNPACK_ALIGNMENT\", 1);\n\n_defineProperty(Texture, \"UNPACK_PREMULTIPLY_ALPHA\", true);\n\n_defineProperty(Texture, \"UNPACK_COLORSPACE_CONVERSION\", undefined);\n\n_defineProperty(Texture, \"getNumComponents\", function (format) {\n  switch (format) {\n    case Texture.Format.DEPTH_COMPONENT:\n    case Texture.Format.ALPHA:\n    case Texture.Format.LUMINANCE:\n      return 1;\n\n    case Texture.Format.LUMINANCE_ALPHA:\n      return 2;\n\n    case Texture.Format.RGB:\n      return 3;\n\n    case Texture.Format.RGBA:\n      return 4;\n  }\n\n  return null;\n});"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;EAAE,IAAID,GAAG,IAAID,GAAX,EAAgB;IAAEG,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;MAAEC,KAAK,EAAEA,KAAT;MAAgBG,UAAU,EAAE,IAA5B;MAAkCC,YAAY,EAAE,IAAhD;MAAsDC,QAAQ,EAAE;IAAhE,CAAhC;EAA0G,CAA5H,MAAkI;IAAEP,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;EAAmB;;EAAC,OAAOF,GAAP;AAAa;;AAEjN,OAAOQ,UAAP,MAAuB,eAAvB;AACA,MAAM;EACJC;AADI,IAEFD,UAFJ;AAGA,eAAe,MAAME,OAAN,CAAc;EAC3BC,WAAW,CAACC,EAAD,EAAKC,OAAL,EAAc;IACvB,KAAKD,EAAL,GAAUA,EAAV;IACA,KAAKE,WAAL,GAAmBD,OAAnB;IACA,KAAKE,EAAL,GAAU,IAAV;IACA,KAAKC,MAAL,GAAcJ,EAAE,CAACK,UAAjB;IACA,KAAKC,KAAL,GAAa,CAAb;IACA,KAAKC,MAAL,GAAc,CAAd;IACA,KAAKC,OAAL,GAAe,CAAC,CAAD,EAAI,CAAJ,CAAf;IACA,KAAKC,KAAL,GAAaX,OAAO,CAACY,YAArB;IACA,KAAKC,KAAL,GAAab,OAAO,CAACY,YAArB;IACA,KAAKE,SAAL,GAAiBd,OAAO,CAACe,cAAzB;IACA,KAAKC,SAAL,GAAiBhB,OAAO,CAACe,cAAzB;IACAtB,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;MACnCuB,GAAG,GAAG;QACJ,KAAKP,OAAL,CAAa,CAAb,IAAkB,KAAKF,KAAvB;QACA,KAAKE,OAAL,CAAa,CAAb,IAAkB,KAAKD,MAAvB;QACA,OAAO,KAAKC,OAAZ;MACD,CALkC;;MAOnCQ,GAAG,CAACC,KAAD,EAAQ,CAAC;MACX;;IARkC,CAArC;IAWA,KAAKC,MAAL;EACD;;EAEDC,KAAK,CAAClB,OAAD,EAAU;IACb,IAAID,EAAE,GAAG,KAAKA,EAAd,CADa,CACK;;IAElB,IAAI,CAACC,OAAL,EAAc,OAHD,CAGS;IACtB;;IAEA,IAAIA,OAAO,CAACmB,GAAR,IAAe,OAAOnB,OAAO,CAACmB,GAAf,KAAuB,QAA1C,EAAoD;MAClD,IAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;MACA,IAAIC,IAAI,GAAGtB,OAAO,CAACmB,GAAnB;MACA,IAAII,WAAW,GAAGvB,OAAO,CAACuB,WAA1B;MACA,IAAIC,SAAS,GAAG,OAAOxB,OAAO,CAACyB,MAAf,KAA0B,UAA1B,GAAuCzB,OAAO,CAACyB,MAA/C,GAAwD,IAAxE;MACA,IAAIC,MAAM,GAAG,OAAO1B,OAAO,CAAC2B,OAAf,KAA2B,UAA3B,GAAwC3B,OAAO,CAAC2B,OAAhD,GAA0D,IAAvE;MACA,IAAIC,UAAU,GAAG5B,OAAO,CAAC4B,UAAzB;MACA,IAAIC,IAAI,GAAG,IAAX,CAPkD,CAOjC;MACjB;MACA;MACA;;MAEA,IAAIhC,OAAO,CAACiC,kBAAZ,EAAgC;QAC9BD,IAAI,CAACE,UAAL,CAAgB,CAAhB,EAAmB,CAAnB;QACA,KAAK1B,KAAL,GAAa,KAAKC,MAAL,GAAc,CAA3B;MACD;;MAEDc,GAAG,CAACG,WAAJ,GAAkBA,WAAlB;;MAEAH,GAAG,CAACY,MAAJ,GAAa,UAAUC,EAAV,EAAc;QACzBJ,IAAI,CAACK,WAAL,CAAiBd,GAAjB,EAAsBe,SAAtB,EAAiCA,SAAjC,EAA4CP,UAA5C;QACA,IAAI,OAAOJ,SAAP,KAAqB,UAAzB,EAAqCA,SAAS,CAACY,IAAV,CAAeP,IAAf,EAAqBI,EAArB,EAAyBJ,IAAzB;MACtC,CAHD;;MAKAT,GAAG,CAACiB,OAAJ,GAAc,UAAUJ,EAAV,EAAc;QAC1B,IAAIL,UAAJ,EAAgB;UACd7B,EAAE,CAACuC,cAAH,CAAkBvC,EAAE,CAACK,UAArB;QACF,IAAI,OAAOsB,MAAP,KAAkB,UAAtB,EAAkCA,MAAM,CAACU,IAAP,CAAYP,IAAZ,EAAkBI,EAAlB,EAAsBJ,IAAtB;MACnC,CAJD;;MAMAT,GAAG,CAACmB,OAAJ,GAAc,UAAUN,EAAV,EAAc;QAC1B,IAAIL,UAAJ,EAAgB7B,EAAE,CAACuC,cAAH,CAAkBvC,EAAE,CAACK,UAArB;QAChB,IAAI,OAAOsB,MAAP,KAAkB,UAAtB,EAAkCA,MAAM,CAACU,IAAP,CAAYP,IAAZ,EAAkBI,EAAlB,EAAsBJ,IAAtB;MACnC,CAHD;;MAKAT,GAAG,CAACD,GAAJ,GAAUG,IAAV;IACD,CApCD,CAoCE;IApCF,KAqCK,IAAItB,OAAO,CAACwC,KAAZ,EAAmB;MACpB,KAAKN,WAAL,CAAiBlC,OAAO,CAACwC,KAAzB,EAAgCxC,OAAO,CAACyC,MAAxC,EAAgDzC,OAAO,CAAC0C,QAAxD,EAAkE1C,OAAO,CAAC4B,UAA1E;IACD,CAFE,CAED;IAFC,KAGE;MACD,KAAKG,UAAL,CAAgB/B,OAAO,CAACK,KAAxB,EAA+BL,OAAO,CAACM,MAAvC,EAA+CN,OAAO,CAACyC,MAAvD,EAA+DzC,OAAO,CAAC0C,QAAvE,EAAiF1C,OAAO,CAAC2C,IAAzF,EAA+F3C,OAAO,CAAC4B,UAAvG;IACD;EACN;;EAEDX,MAAM,GAAG;IACP,IAAIlB,EAAE,GAAG,KAAKA,EAAd;IACA,KAAKG,EAAL,GAAUH,EAAE,CAAC6C,aAAH,EAAV,CAFO,CAEuB;;IAE9B,KAAKvC,KAAL,GAAa,KAAKC,MAAL,GAAc,CAA3B,CAJO,CAIuB;;IAE9B,KAAKH,MAAL,GAAcJ,EAAE,CAACK,UAAjB,CANO,CAMsB;;IAE7B,KAAKyC,IAAL,GARO,CAQM;;IAEb9C,EAAE,CAAC+C,WAAH,CAAe/C,EAAE,CAACgD,8BAAlB,EAAkDlD,OAAO,CAACmD,wBAA1D;IACAjD,EAAE,CAAC+C,WAAH,CAAe/C,EAAE,CAACkD,gBAAlB,EAAoCpD,OAAO,CAACoD,gBAA5C;IACAlD,EAAE,CAAC+C,WAAH,CAAe/C,EAAE,CAACmD,mBAAlB,EAAuCrD,OAAO,CAACsD,aAA/C;IACA,IAAIC,UAAU,GAAGvD,OAAO,CAACwD,4BAAR,IAAwCtD,EAAE,CAACuD,qBAA5D;IACAvD,EAAE,CAAC+C,WAAH,CAAe/C,EAAE,CAACwD,kCAAlB,EAAsDH,UAAtD,EAdO,CAc4D;;IAEnE,KAAKI,OAAL,CAAa,KAAKhD,KAAlB,EAAyB,KAAKE,KAA9B,EAAqC,KAArC;IACA,KAAK+C,SAAL,CAAe,KAAK9C,SAApB,EAA+B,KAAKE,SAApC,EAA+C,KAA/C;;IAEA,IAAI,KAAKZ,WAAT,EAAsB;MACpB,KAAKiB,KAAL,CAAW,KAAKjB,WAAhB;IACD;EACF;;EAEDyD,OAAO,GAAG;IACR,IAAI,KAAKxD,EAAL,IAAW,KAAKH,EAApB,EAAwB,KAAKA,EAAL,CAAQ4D,aAAR,CAAsB,KAAKzD,EAA3B;IACxB,IAAI,KAAK0D,OAAT,EAAkB,KAAKA,OAAL,CAAaC,mBAAb,CAAiC,IAAjC;IAClB,KAAKxD,KAAL,GAAa,KAAKC,MAAL,GAAc,CAA3B;IACA,KAAKJ,EAAL,GAAU,IAAV;IACA,KAAKD,WAAL,GAAmB,IAAnB;IACA,KAAK2D,OAAL,GAAe,IAAf;IACA,KAAK7D,EAAL,GAAU,IAAV;EACD;;EAEDyD,OAAO,CAACM,CAAD,EAAIC,CAAJ,EAAOC,UAAP,EAAmB;IACxB;IACA,IAAIF,CAAC,IAAIC,CAAT,EAAY;MACV,KAAKvD,KAAL,GAAasD,CAAb;MACA,KAAKpD,KAAL,GAAaqD,CAAb;IACD,CAHD,MAGO,KAAKvD,KAAL,GAAa,KAAKE,KAAL,GAAaoD,CAA1B,CALiB,CAKY;;;IAGpC,KAAKG,SAAL;;IAEA,IAAI,CAACD,UAAL,EAAiB,KAAKnB,IAAL;IACjB,IAAI9C,EAAE,GAAG,KAAKA,EAAd;IACAA,EAAE,CAACmE,aAAH,CAAiB,KAAK/D,MAAtB,EAA8BJ,EAAE,CAACoE,cAAjC,EAAiD,KAAK3D,KAAtD;IACAT,EAAE,CAACmE,aAAH,CAAiB,KAAK/D,MAAtB,EAA8BJ,EAAE,CAACqE,cAAjC,EAAiD,KAAK1D,KAAtD;EACD;;EAED+C,SAAS,CAACY,GAAD,EAAMC,GAAN,EAAWN,UAAX,EAAuB;IAC9B,IAAIK,GAAG,IAAIC,GAAX,EAAgB;MACd,KAAK3D,SAAL,GAAiB0D,GAAjB;MACA,KAAKxD,SAAL,GAAiByD,GAAjB;IACD,CAHD,MAGO,KAAK3D,SAAL,GAAiB,KAAKE,SAAL,GAAiBwD,GAAlC,CAJuB,CAIgB;;;IAG9C,KAAKJ,SAAL;;IAEA,IAAI,CAACD,UAAL,EAAiB,KAAKnB,IAAL;IACjB,IAAI9C,EAAE,GAAG,KAAKA,EAAd;IACAA,EAAE,CAACmE,aAAH,CAAiB,KAAK/D,MAAtB,EAA8BJ,EAAE,CAACwE,kBAAjC,EAAqD,KAAK5D,SAA1D;IACAZ,EAAE,CAACmE,aAAH,CAAiB,KAAK/D,MAAtB,EAA8BJ,EAAE,CAACyE,kBAAjC,EAAqD,KAAK3D,SAA1D;EACD;;EAEDkB,UAAU,CAAC1B,KAAD,EAAQC,MAAR,EAAgBmC,MAAhB,EAAwBgC,IAAxB,EAA8B9B,IAA9B,EAAoCf,UAApC,EAAgD;IACxD,IAAI7B,EAAE,GAAG,KAAKA,EAAd;IACA0C,MAAM,GAAGA,MAAM,IAAI1C,EAAE,CAAC2E,IAAtB;IACAD,IAAI,GAAGA,IAAI,IAAI1E,EAAE,CAAC4E,aAAlB;IACAhC,IAAI,GAAGA,IAAI,IAAI,IAAf,CAJwD,CAInC;;IAErB,KAAKtC,KAAL,GAAaA,KAAK,IAAIA,KAAK,IAAI,CAAlB,GAAsBA,KAAtB,GAA8B,KAAKA,KAAhD;IACA,KAAKC,MAAL,GAAcA,MAAM,IAAIA,MAAM,IAAI,CAApB,GAAwBA,MAAxB,GAAiC,KAAKA,MAApD;;IAEA,KAAK2D,SAAL;;IAEA,KAAKpB,IAAL;IACA9C,EAAE,CAAC6E,UAAH,CAAc,KAAKzE,MAAnB,EAA2B,CAA3B,EAA8BsC,MAA9B,EAAsC,KAAKpC,KAA3C,EAAkD,KAAKC,MAAvD,EAA+D,CAA/D,EAAkEmC,MAAlE,EAA0EgC,IAA1E,EAAgF9B,IAAhF;IACA,IAAIf,UAAJ,EAAgB7B,EAAE,CAACuC,cAAH,CAAkB,KAAKnC,MAAvB;EACjB;;EAED+B,WAAW,CAAC2C,SAAD,EAAYpC,MAAZ,EAAoBgC,IAApB,EAA0B7C,UAA1B,EAAsC;IAC/C,IAAI7B,EAAE,GAAG,KAAKA,EAAd;IACA0C,MAAM,GAAGA,MAAM,IAAI1C,EAAE,CAAC2E,IAAtB;IACAD,IAAI,GAAGA,IAAI,IAAI1E,EAAE,CAAC4E,aAAlB;IACA,KAAKtE,KAAL,GAAawE,SAAS,CAACxE,KAAvB;IACA,KAAKC,MAAL,GAAcuE,SAAS,CAACvE,MAAxB;;IAEA,KAAK2D,SAAL;;IAEA,KAAKpB,IAAL;IACA9C,EAAE,CAAC6E,UAAH,CAAc,KAAKzE,MAAnB,EAA2B,CAA3B,EAA8BsC,MAA9B,EAAsCA,MAAtC,EAA8CgC,IAA9C,EAAoDI,SAApD;IACA,IAAIjD,UAAJ,EAAgB7B,EAAE,CAACuC,cAAH,CAAkB,KAAKnC,MAAvB;EACjB;;EAED8D,SAAS,GAAG;IACV,IAAI,CAACpE,OAAO,CAACiF,SAAb,EAAwB;MACtB;MACA;MACA,IAAIC,WAAW,GAAG,KAAKpE,SAAL,KAAmBd,OAAO,CAACmF,MAAR,CAAeC,MAAlC,IAA4C,KAAKtE,SAAL,KAAmBd,OAAO,CAACmF,MAAR,CAAeE,OAAhG;MACA,IAAIC,SAAS,GAAG,KAAK3E,KAAL,KAAeX,OAAO,CAACuF,IAAR,CAAaC,aAA5B,IAA6C,KAAK3E,KAAL,KAAeb,OAAO,CAACuF,IAAR,CAAaC,aAAzF;;MAEA,IAAIN,WAAW,IAAII,SAAnB,EAA8B;QAC5B,IAAI,CAACvF,YAAY,CAAC,KAAKS,KAAN,CAAb,IAA6B,CAACT,YAAY,CAAC,KAAKU,MAAN,CAA9C,EAA6D,MAAM,IAAIgF,KAAJ,CAAUP,WAAW,GAAG,2DAAH,GAAiE,0DAAtF,CAAN;MAC9D;IACF;EACF;;EAEDlC,IAAI,CAAC0C,IAAD,EAAO;IACT,IAAIxF,EAAE,GAAG,KAAKA,EAAd;IACA,IAAIwF,IAAI,IAAIA,IAAI,KAAK,CAArB,EAAwBxF,EAAE,CAACyF,aAAH,CAAiBzF,EAAE,CAAC0F,QAAH,GAAcF,IAA/B;IACxBxF,EAAE,CAAC2F,WAAH,CAAe,KAAKvF,MAApB,EAA4B,KAAKD,EAAjC;EACD;;EAEDyF,QAAQ,GAAG;IACT,OAAO,KAAKzF,EAAL,GAAU,GAAV,GAAgB,KAAKG,KAArB,GAA6B,GAA7B,GAAmC,KAAKC,MAAxC,GAAiD,EAAxD;EACD;;AAlM0B;;AAsM7BpB,eAAe,CAACW,OAAD,EAAU,QAAV,EAAoB;EACjCqF,OAAO,EAAE,IADwB;EAEjCU,qBAAqB,EAAE,IAFU;EAGjCC,sBAAsB,EAAE,IAHS;EAIjCZ,MAAM,EAAE,IAJyB;EAKjCa,oBAAoB,EAAE,IALW;EAMjCC,qBAAqB,EAAE;AANU,CAApB,CAAf;;AASA7G,eAAe,CAACW,OAAD,EAAU,MAAV,EAAkB;EAC/BwF,aAAa,EAAE,KADgB;EAE/BW,eAAe,EAAE,KAFc;EAG/BC,MAAM,EAAE;AAHuB,CAAlB,CAAf;;AAMA/G,eAAe,CAACW,OAAD,EAAU,QAAV,EAAoB;EACjCqG,eAAe,EAAE,IADgB;EAEjCC,KAAK,EAAE,IAF0B;EAGjCzB,IAAI,EAAE,IAH2B;EAIjC0B,GAAG,EAAE,IAJ4B;EAKjCC,SAAS,EAAE,IALsB;EAMjCC,eAAe,EAAE;AANgB,CAApB,CAAf;;AASApH,eAAe,CAACW,OAAD,EAAU,UAAV,EAAsB;EACnC0G,IAAI,EAAE,IAD6B;EAEnCC,KAAK,EAAE,IAF4B;EAGnCC,GAAG,EAAE,IAH8B;EAInCC,KAAK,EAAE,IAJ4B;EAKnC/B,aAAa,EAAE,IALoB;EAMnCgC,YAAY,EAAE,IANqB;EAOnCC,cAAc,EAAE,IAPmB;EAQnCC,sBAAsB,EAAE,KARW;EASnCC,sBAAsB,EAAE,KATW;EAUnCC,oBAAoB,EAAE;AAVa,CAAtB,CAAf;;AAaA7H,eAAe,CAACW,OAAD,EAAU,cAAV,EAA0BA,OAAO,CAACuF,IAAR,CAAaC,aAAvC,CAAf;;AAEAnG,eAAe,CAACW,OAAD,EAAU,gBAAV,EAA4BA,OAAO,CAACmF,MAAR,CAAeE,OAA3C,CAAf;;AAEAhG,eAAe,CAACW,OAAD,EAAU,WAAV,EAAuB,KAAvB,CAAf;;AAEAX,eAAe,CAACW,OAAD,EAAU,eAAV,EAA2B,KAA3B,CAAf;;AAEAX,eAAe,CAACW,OAAD,EAAU,kBAAV,EAA8B,CAA9B,CAAf;;AAEAX,eAAe,CAACW,OAAD,EAAU,0BAAV,EAAsC,IAAtC,CAAf;;AAEAX,eAAe,CAACW,OAAD,EAAU,8BAAV,EAA0CsC,SAA1C,CAAf;;AAEAjD,eAAe,CAACW,OAAD,EAAU,kBAAV,EAA8B,UAAU4C,MAAV,EAAkB;EAC7D,QAAQA,MAAR;IACE,KAAK5C,OAAO,CAACmH,MAAR,CAAed,eAApB;IACA,KAAKrG,OAAO,CAACmH,MAAR,CAAeb,KAApB;IACA,KAAKtG,OAAO,CAACmH,MAAR,CAAeX,SAApB;MACE,OAAO,CAAP;;IAEF,KAAKxG,OAAO,CAACmH,MAAR,CAAeV,eAApB;MACE,OAAO,CAAP;;IAEF,KAAKzG,OAAO,CAACmH,MAAR,CAAeZ,GAApB;MACE,OAAO,CAAP;;IAEF,KAAKvG,OAAO,CAACmH,MAAR,CAAetC,IAApB;MACE,OAAO,CAAP;EAbJ;;EAgBA,OAAO,IAAP;AACD,CAlBc,CAAf"},"metadata":{},"sourceType":"module"}