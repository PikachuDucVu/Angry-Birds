{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2ContactListener, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { Animation, Color, createGameLoop, createStage, createViewport, InputEvent, PlayMode, PolygonBatch, ShapeRenderer, Texture, TextureRegion, Vector2, ViewportInputHandler } from \"gdxts\";\nconst WORLD_WIDTH = 1000;\nconst WORLD_HEIGHT = 500;\nconst contactListener = new b2ContactListener();\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.SetUserData(\"ground\");\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\n  const circle = new b2CircleShape();\n  circle.m_radius = radius;\n  const fixtureDef = new b2FixtureDef();\n  fixtureDef.shape = circle; // fixtureDef.density = 1;\n\n  fixtureDef.restitution = 0.5; // bounce ball\n\n  fixtureDef.friction = 1;\n  fixtureDef.shape = circle;\n  fixtureDef.userData = \"ballFixture\";\n  const body = world.CreateBody(bodyDef);\n  body.CreateFixture(fixtureDef);\n  body.SetUserData(\"ball\");\n  return body;\n};\n\nconst createBox = (world, x, y, width, height, userData) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.5, height * 0.5);\n  body.SetUserData({\n    name: userData.name,\n    durability: 0\n  });\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const pig = await Texture.load(gl, \"./pig.png\");\n  const bird = await Texture.load(gl, \"./bird.png\");\n  const slingShot = await Texture.load(gl, \"./slingshot.png\");\n  const background = await Texture.load(gl, \"./background.png\");\n  const pigAsset = await Texture.load(gl, \"./pigAsset.png\");\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const shapeRenderer = new ShapeRenderer(gl);\n  const world = new b2World({\n    x: 0,\n    y: 10\n  });\n  const boxTexture = await Texture.load(gl, \"./testAnimation1.png\");\n  const boxesRegions = TextureRegion.splitTexture(boxTexture, 1, 4);\n  const pigTexture = await TextureRegion.splitTexture(pigAsset, 2, 1);\n  let frameDuration = 0.01;\n  const boxAnimation = new Animation(boxesRegions.slice(0, 4), frameDuration);\n  const pigAnimation = new Animation(pigTexture.slice(0, 2), frameDuration);\n  const boxRegions = [boxAnimation.getKeyFrame(0, PlayMode.NORMAL), boxAnimation.getKeyFrame(0, PlayMode.NORMAL), boxAnimation.getKeyFrame(0, PlayMode.NORMAL), boxAnimation.getKeyFrame(0, PlayMode.NORMAL), boxAnimation.getKeyFrame(0, PlayMode.NORMAL), boxAnimation.getKeyFrame(0, PlayMode.NORMAL)];\n  const pigRegions = [pigAnimation.getKeyFrame(0, PlayMode.NORMAL), pigAnimation.getKeyFrame(0, PlayMode.NORMAL)];\n\n  for (let wall of wallData) {\n    createWall(world, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  const BOX_SIZE = 0.5;\n  const PIG_SIZE = 0.3;\n  const pigs = [];\n  const boxes = [];\n  let pigNumber = 0;\n  let boxNumber = 0;\n  let test1 = 6;\n  let test2 = 4.3;\n\n  for (let i = 0; i < 3; i++) {\n    test1 = 6 + i * 0.4;\n\n    for (let j = 0; j <= i; j++) {\n      boxes.push(createBox(world, test1 += 0.51, test2 -= 0.55, BOX_SIZE, BOX_SIZE, {\n        name: `box ${boxNumber++}`\n      }));\n    }\n\n    if (i < 2) {\n      pigs.push(createBox(world, test1 + 0.5, test2 - 0.25, PIG_SIZE, PIG_SIZE, {\n        name: `pig ${pigNumber++}`\n      }));\n    }\n  }\n\n  const BALL_RADIUS = 0.2;\n  let ball = createBall(world, 2, 3.5, BALL_RADIUS);\n  let hasBirdOnSlingShot = true;\n  const originPosition = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  let slingPos = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  const inputHandler = new ViewportInputHandler(viewport);\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\n    if (inputHandler.isTouched()) {\n      slingPos = inputHandler.getTouchedWorldCoord();\n    }\n  });\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n    if (hasBirdOnSlingShot) {\n      ball.SetType(b2BodyType.b2_dynamicBody);\n      ball.ApplyLinearImpulseToCenter({\n        x: 7 * (originPosition.x - slingPos.x) / METER_TO_WORLD,\n        y: 7 * (originPosition.y - slingPos.y) / METER_TO_WORLD\n      }, true);\n      hasBirdOnSlingShot = false;\n    }\n  });\n  let delayTime = 0;\n  window.addEventListener(\"keydown\", function (e) {\n    if (!hasBirdOnSlingShot && e.key === \"r\") {\n      world.DestroyBody(ball);\n      ball = createBall(world, 2, 3.5, BALL_RADIUS);\n      hasBirdOnSlingShot = true;\n    }\n  });\n  gl.clearColor(0, 0, 0, 1);\n\n  contactListener.BeginContact = function (contact) {\n    if (delayTime >= 1) {\n      const fixtureAData = contact.GetFixtureA().GetBody().GetUserData();\n      const fixtureBData = contact.GetFixtureB().GetBody().GetUserData(); // if (fixtureBData !== \"ball\") return;\n\n      if (fixtureAData.name && fixtureAData.name.startsWith(\"box\")) {\n        fixtureAData.durability += 1;\n      }\n\n      if (fixtureAData.name && fixtureAData.name.startsWith(\"pig\")) {\n        fixtureAData.durability += 1;\n      }\n    } // console.log(\n    //   contact.GetFixtureA().GetBody().GetUserData(),\n    //   contact.GetFixtureB().GetBody().GetUserData()\n    // );\n    // console.log(contact);\n\n  };\n\n  world.SetContactListener(contactListener);\n\n  const updateBoxRegionByDurability = (index, durability) => {\n    boxRegions[index] = boxAnimation.getKeyFrame(frameDuration * durability, PlayMode.NORMAL);\n  };\n\n  const updatePigRegionByDurability = (index, durability) => {\n    pigRegions[index] = pigAnimation.getKeyFrame(frameDuration * durability, PlayMode.NORMAL);\n  };\n\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    for (let i = 0; i < boxes.length; i++) {\n      const elementBox = boxes[i];\n      const boxDurability = elementBox.GetUserData().durability;\n\n      if (typeof boxDurability === \"number\") {\n        if (boxDurability <= 4) {\n          updateBoxRegionByDurability(i, boxDurability);\n        } else {\n          world.DestroyBody(boxes[i]);\n          boxes.splice(i, 1);\n        }\n      }\n    }\n\n    for (let i = 0; i < pigs.length; i++) {\n      const elementPig = pigs[i];\n      const pigDurability = elementPig.GetUserData().durability;\n\n      if (typeof pigDurability === \"number\") {\n        if (pigDurability <= 2) {\n          updatePigRegionByDurability(i, pigDurability);\n        } else {\n          world.DestroyBody(pigs[i]);\n          pigs.splice(i, 1);\n        }\n      }\n    }\n\n    world.Step(delta, 8, 3);\n    batch.setProjection(camera.combined);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    }\n\n    shapeRenderer.rect(true, 2 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD, Color.MAGENTA);\n    shapeRenderer.circle(true, ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD, BALL_RADIUS * METER_TO_WORLD, Color.RED);\n    shapeRenderer.end();\n    batch.begin();\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\n    batch.end();\n    shapeRenderer.begin();\n    shapeRenderer.circle(true, slingPos.x, slingPos.y, 0.1 * METER_TO_WORLD, Color.BLUE);\n    shapeRenderer.end();\n    batch.begin();\n\n    for (let i = 0; i < boxes.length; i++) {\n      boxRegions[i].draw(batch, boxes[i].GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, boxes[i].GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    }\n\n    batch.draw(slingShot, 2 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD);\n\n    for (let i = 0; i < pigs.length; i++) {\n      pigRegions[i].draw(batch, pigs[i].GetPosition().x * METER_TO_WORLD - PIG_SIZE * METER_TO_WORLD / 2, pigs[i].GetPosition().y * METER_TO_WORLD - PIG_SIZE * METER_TO_WORLD / 2, PIG_SIZE * METER_TO_WORLD, PIG_SIZE * METER_TO_WORLD);\n    } // console.log(box.GetContactList());\n\n\n    batch.draw(bird, ball.GetPosition().x * METER_TO_WORLD - 25, ball.GetPosition().y * METER_TO_WORLD - 25, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    delayTime += delta;\n    batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2ContactListener","b2FixtureDef","b2PolygonShape","b2World","Animation","Color","createGameLoop","createStage","createViewport","InputEvent","PlayMode","PolygonBatch","ShapeRenderer","Texture","TextureRegion","Vector2","ViewportInputHandler","WORLD_WIDTH","WORLD_HEIGHT","contactListener","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createBall","radius","circle","m_radius","fixtureDef","restitution","friction","userData","createBox","b2_dynamicBody","name","durability","WALL_COLOR","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","batch","setYDown","pig","load","bird","slingShot","background","pigAsset","mapData","fetch","then","res","json","wallData","layers","find","l","objects","shapeRenderer","boxTexture","boxesRegions","splitTexture","pigTexture","frameDuration","boxAnimation","slice","pigAnimation","boxRegions","getKeyFrame","NORMAL","pigRegions","wall","BOX_SIZE","PIG_SIZE","pigs","boxes","pigNumber","boxNumber","test1","test2","i","j","push","BALL_RADIUS","ball","hasBirdOnSlingShot","originPosition","GetPosition","slingPos","inputHandler","addEventListener","TouchMove","isTouched","getTouchedWorldCoord","TouchEnd","SetType","ApplyLinearImpulseToCenter","delayTime","window","e","key","DestroyBody","clearColor","BeginContact","contact","fixtureAData","GetFixtureA","GetBody","GetUserData","fixtureBData","GetFixtureB","startsWith","SetContactListener","updateBoxRegionByDurability","index","updatePigRegionByDurability","delta","clear","COLOR_BUFFER_BIT","length","elementBox","boxDurability","splice","elementPig","pigDurability","Step","setProjection","combined","begin","rect","WHITE","MAGENTA","RED","end","draw","BLUE"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Alloc,\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2Contact,\r\n  b2ContactListener,\r\n  b2Fixture,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Animation,\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  PlayMode,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  TextureRegion,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 1000;\r\nconst WORLD_HEIGHT = 500;\r\n\r\nconst contactListener = new b2ContactListener();\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.SetUserData(\"ground\");\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n  // fixtureDef.density = 1;\r\n  fixtureDef.restitution = 0.5; // bounce ball\r\n  fixtureDef.friction = 1;\r\n  fixtureDef.shape = circle;\r\n  fixtureDef.userData = \"ballFixture\";\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.SetUserData(\"ball\");\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  userData: {\r\n    name: string;\r\n  }\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.5, height * 0.5);\r\n  body.SetUserData({\r\n    name: userData.name,\r\n    durability: 0,\r\n  });\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const pig = await Texture.load(gl, \"./pig.png\");\r\n  const bird = await Texture.load(gl, \"./bird.png\");\r\n  const slingShot = await Texture.load(gl, \"./slingshot.png\");\r\n  const background = await Texture.load(gl, \"./background.png\");\r\n  const pigAsset = await Texture.load(gl, \"./pigAsset.png\");\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n\r\n  const boxTexture = await Texture.load(gl, \"./testAnimation1.png\");\r\n  const boxesRegions = TextureRegion.splitTexture(boxTexture, 1, 4);\r\n  const pigTexture = await TextureRegion.splitTexture(pigAsset, 2, 1);\r\n\r\n  let frameDuration = 0.01;\r\n  const boxAnimation = new Animation(boxesRegions.slice(0, 4), frameDuration);\r\n  const pigAnimation = new Animation(pigTexture.slice(0, 2), frameDuration);\r\n\r\n  const boxRegions = [\r\n    boxAnimation.getKeyFrame(0, PlayMode.NORMAL),\r\n    boxAnimation.getKeyFrame(0, PlayMode.NORMAL),\r\n    boxAnimation.getKeyFrame(0, PlayMode.NORMAL),\r\n    boxAnimation.getKeyFrame(0, PlayMode.NORMAL),\r\n    boxAnimation.getKeyFrame(0, PlayMode.NORMAL),\r\n    boxAnimation.getKeyFrame(0, PlayMode.NORMAL),\r\n  ];\r\n  const pigRegions = [\r\n    pigAnimation.getKeyFrame(0, PlayMode.NORMAL),\r\n    pigAnimation.getKeyFrame(0, PlayMode.NORMAL),\r\n  ];\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      world,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n\r\n  const BOX_SIZE = 0.5;\r\n  const PIG_SIZE = 0.3;\r\n  const pigs: b2Body[] = [];\r\n  const boxes: b2Body[] = [];\r\n  let pigNumber = 0;\r\n  let boxNumber = 0;\r\n  let test1 = 6;\r\n  let test2 = 4.3;\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    test1 = 6 + i * 0.4;\r\n    for (let j = 0; j <= i; j++) {\r\n      boxes.push(\r\n        createBox(world, (test1 += 0.51), (test2 -= 0.55), BOX_SIZE, BOX_SIZE, {\r\n          name: `box ${boxNumber++}`,\r\n        })\r\n      );\r\n    }\r\n    if (i < 2) {\r\n      pigs.push(\r\n        createBox(world, test1 + 0.5, test2 - 0.25, PIG_SIZE, PIG_SIZE, {\r\n          name: `pig ${pigNumber++}`,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  const BALL_RADIUS = 0.2;\r\n  let ball = createBall(world, 2, 3.5, BALL_RADIUS);\r\n  let hasBirdOnSlingShot = true;\r\n  const originPosition = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n  let slingPos = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n    if (inputHandler.isTouched()) {\r\n      slingPos = inputHandler.getTouchedWorldCoord();\r\n    }\r\n  });\r\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n    if (hasBirdOnSlingShot) {\r\n      ball.SetType(b2BodyType.b2_dynamicBody);\r\n      ball.ApplyLinearImpulseToCenter(\r\n        {\r\n          x: (7 * (originPosition.x - slingPos.x)) / METER_TO_WORLD,\r\n          y: (7 * (originPosition.y - slingPos.y)) / METER_TO_WORLD,\r\n        },\r\n        true\r\n      );\r\n      hasBirdOnSlingShot = false;\r\n    }\r\n  });\r\n  let delayTime = 0;\r\n\r\n  window.addEventListener(\"keydown\", function (e) {\r\n    if (!hasBirdOnSlingShot && e.key === \"r\") {\r\n      world.DestroyBody(ball);\r\n      ball = createBall(world, 2, 3.5, BALL_RADIUS);\r\n      hasBirdOnSlingShot = true;\r\n    }\r\n  });\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  contactListener.BeginContact = function (contact: b2Contact) {\r\n    if (delayTime >= 1) {\r\n      const fixtureAData = contact.GetFixtureA().GetBody().GetUserData();\r\n      const fixtureBData = contact.GetFixtureB().GetBody().GetUserData();\r\n\r\n      // if (fixtureBData !== \"ball\") return;\r\n\r\n      if (fixtureAData.name && fixtureAData.name.startsWith(\"box\")) {\r\n        fixtureAData.durability += 1;\r\n      }\r\n      if (fixtureAData.name && fixtureAData.name.startsWith(\"pig\")) {\r\n        fixtureAData.durability += 1;\r\n      }\r\n    }\r\n    // console.log(\r\n    //   contact.GetFixtureA().GetBody().GetUserData(),\r\n    //   contact.GetFixtureB().GetBody().GetUserData()\r\n    // );\r\n    // console.log(contact);\r\n  };\r\n\r\n  world.SetContactListener(contactListener);\r\n\r\n  const updateBoxRegionByDurability = (index: number, durability: number) => {\r\n    boxRegions[index] = boxAnimation.getKeyFrame(\r\n      frameDuration * durability,\r\n      PlayMode.NORMAL\r\n    );\r\n  };\r\n  const updatePigRegionByDurability = (index: number, durability: number) => {\r\n    pigRegions[index] = pigAnimation.getKeyFrame(\r\n      frameDuration * durability,\r\n      PlayMode.NORMAL\r\n    );\r\n  };\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    for (let i = 0; i < boxes.length; i++) {\r\n      const elementBox = boxes[i];\r\n      const boxDurability = elementBox.GetUserData().durability;\r\n      if (typeof boxDurability === \"number\") {\r\n        if (boxDurability <= 4) {\r\n          updateBoxRegionByDurability(i, boxDurability);\r\n        } else {\r\n          world.DestroyBody(boxes[i]);\r\n          boxes.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < pigs.length; i++) {\r\n      const elementPig = pigs[i];\r\n      const pigDurability = elementPig.GetUserData().durability;\r\n      if (typeof pigDurability === \"number\") {\r\n        if (pigDurability <= 2) {\r\n          updatePigRegionByDurability(i, pigDurability);\r\n        } else {\r\n          world.DestroyBody(pigs[i]);\r\n          pigs.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    world.Step(delta, 8, 3);\r\n    batch.setProjection(camera.combined);\r\n\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n    shapeRenderer.rect(\r\n      true,\r\n      2 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD,\r\n      Color.MAGENTA\r\n    );\r\n    shapeRenderer.circle(\r\n      true,\r\n      ball.GetPosition().x * METER_TO_WORLD,\r\n      ball.GetPosition().y * METER_TO_WORLD,\r\n      BALL_RADIUS * METER_TO_WORLD,\r\n      Color.RED\r\n    );\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\r\n    batch.end();\r\n\r\n    shapeRenderer.begin();\r\n    shapeRenderer.circle(\r\n      true,\r\n      slingPos.x,\r\n      slingPos.y,\r\n      0.1 * METER_TO_WORLD,\r\n      Color.BLUE\r\n    );\r\n\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n\r\n    for (let i = 0; i < boxes.length; i++) {\r\n      boxRegions[i].draw(\r\n        batch,\r\n        boxes[i].GetPosition().x * METER_TO_WORLD -\r\n          (BOX_SIZE * METER_TO_WORLD) / 2,\r\n        boxes[i].GetPosition().y * METER_TO_WORLD -\r\n          (BOX_SIZE * METER_TO_WORLD) / 2,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD\r\n      );\r\n    }\r\n\r\n    batch.draw(\r\n      slingShot,\r\n      2 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD\r\n    );\r\n    for (let i = 0; i < pigs.length; i++) {\r\n      pigRegions[i].draw(\r\n        batch,\r\n        pigs[i].GetPosition().x * METER_TO_WORLD -\r\n          (PIG_SIZE * METER_TO_WORLD) / 2,\r\n        pigs[i].GetPosition().y * METER_TO_WORLD -\r\n          (PIG_SIZE * METER_TO_WORLD) / 2,\r\n        PIG_SIZE * METER_TO_WORLD,\r\n        PIG_SIZE * METER_TO_WORLD\r\n      );\r\n    }\r\n    // console.log(box.GetContactList());\r\n\r\n    batch.draw(\r\n      bird,\r\n      ball.GetPosition().x * METER_TO_WORLD - 25,\r\n      ball.GetPosition().y * METER_TO_WORLD - 25,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n\r\n    delayTime += delta;\r\n    batch.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}