{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Vector2, Color } from \"gdxts\";\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const border = await Texture.load(gl, \"./border.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const black = new Color(0, 0, 0, 1); //config game\n\n  const ROWGAME = 24;\n  const COLGAME = 12;\n  let map = new Array(); //I\n\n  const iBlock = [[1], [1], [1], [1]]; //L\n\n  const lBlock = [[0, 0, 1], [1, 1, 1]]; //L-reverse\n\n  const lReverseBlock = [[1, 0, 0], [1, 1, 1]]; // Square\n\n  const sBlock = [[1, 1], [1, 1]]; // Z\n\n  const zBlock = [[0, 1, 1], [1, 1, 0]]; // Z-reverse\n\n  const zReverseBlock = [[1, 1, 0], [0, 1, 1]]; // T\n\n  const tBlock = [[0, 1, 0], [1, 1, 1]];\n  const blocks = [iBlock, lReverseBlock, lBlock, sBlock, zBlock, zReverseBlock, tBlock]; //config game\n\n  let blockPosition = new Vector2(83, 83);\n  let currentBlock = blocks[getRandomInt(0, 6)]; //\n\n  let nextBlock = blocks[getRandomInt(0, 6)];\n  let timeDelay = 0;\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // draw the map\n\n\n  for (let row = 0; row < ROWGAME; row++) {\n    //12x24\n    map[row] = new Array();\n\n    for (let col = 0; col < COLGAME; col++) {\n      if (row >= 1) {\n        map[row].push(0);\n      } else {\n        map[row].push(1);\n      }\n    }\n\n    for (let col = 0; col < map[row].length; col++) {\n      map[row][0] = 1;\n      map[row][11] = 1;\n    }\n  }\n\n  function blockOnMap() {\n    for (let row = 0; row < currentBlock.length; row++) {\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[ROWGAME - 1 - row][COL / 2 - 1 + col] = currentBlock[row][col];\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0 && map[row][col] !== 9) {\n          batch.draw(block, col * blockPosition.x, row * blockPosition.y, 83, 83);\n        } // scan to draw\n\n      }\n    } //\n\n  }\n\n  window.addEventListener(\"keypress\", function (e) {\n    if (e) {}\n  });\n  blockOnMap();\n  createGameLoop(delta => {\n    timeDelay += delta;\n\n    if (timeDelay >= 0.5) {\n      timeDelay = 0;\n\n      for (let row = 1; row < map.length; row++) {\n        for (let col = 1; col < map[row].length - 1; col++) {\n          if (map[row - 1][col] === 0 && map[row][col] !== 0) {\n            [map[row][col], map[row - 1][col]] = [map[row - 1][col], map[row][col]];\n            console.log(map);\n          }\n        }\n      } // for (let row = 23; row > 1; row--) {\n      //   for (let col = 1; col < map[row].length - 1; col++) {\n      //     if (map[row - 1][col] !== 0) {\n      //       console.log(row + \" work\");\n      //     }\n      //   }\n      // }\n\n    }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end(); //draw border\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    drawTetromino();\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\ninit(); // init2();","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Vector2","Color","init","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","background","load","border","bgRight","block","black","ROWGAME","COLGAME","map","Array","iBlock","lBlock","lReverseBlock","sBlock","zBlock","zReverseBlock","tBlock","blocks","blockPosition","currentBlock","getRandomInt","nextBlock","timeDelay","min","max","Math","floor","random","row","col","push","length","blockOnMap","COL","drawTetromino","draw","x","y","window","addEventListener","e","delta","console","log","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\n  createGameLoop,\n  createStage,\n  createViewport,\n  PolygonBatch,\n  ShapeRenderer,\n  Texture,\n  Vector2,\n  BitmapFont,\n  TextureRegion,\n  Color,\n} from \"gdxts\";\n\nimport { init2 } from \"./index2\";\n\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const border = await Texture.load(gl, \"./border.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const black = new Color(0, 0, 0, 1);\n\n  //config game\n  const ROWGAME = 24;\n  const COLGAME = 12;\n  let map = new Array();\n\n  //I\n  const iBlock = [[1], [1], [1], [1]];\n\n  //L\n  const lBlock = [\n    [0, 0, 1],\n    [1, 1, 1],\n  ];\n\n  //L-reverse\n  const lReverseBlock = [\n    [1, 0, 0],\n    [1, 1, 1],\n  ];\n\n  // Square\n  const sBlock = [\n    [1, 1],\n    [1, 1],\n  ];\n\n  // Z\n  const zBlock = [\n    [0, 1, 1],\n    [1, 1, 0],\n  ];\n\n  // Z-reverse\n  const zReverseBlock = [\n    [1, 1, 0],\n    [0, 1, 1],\n  ];\n\n  // T\n  const tBlock = [\n    [0, 1, 0],\n    [1, 1, 1],\n  ];\n\n  const blocks = [\n    iBlock,\n    lReverseBlock,\n    lBlock,\n    sBlock,\n    zBlock,\n    zReverseBlock,\n    tBlock,\n  ];\n\n  //config game\n\n  let blockPosition = new Vector2(83, 83);\n  let currentBlock = blocks[getRandomInt(0, 6)]; //\n  let nextBlock = blocks[getRandomInt(0, 6)];\n  let timeDelay = 0;\n\n  function getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n  // draw the map\n  for (let row = 0; row < ROWGAME; row++) {\n    //12x24\n    map[row] = new Array();\n    for (let col = 0; col < COLGAME; col++) {\n      if (row >= 1) {\n        map[row].push(0);\n      } else {\n        map[row].push(1);\n      }\n    }\n    for (let col = 0; col < map[row].length; col++) {\n      map[row][0] = 1;\n      map[row][11] = 1;\n    }\n  }\n\n  function blockOnMap() {\n    for (let row = 0; row < currentBlock.length; row++) {\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[ROWGAME - 1 - row][COL / 2 - 1 + col] = currentBlock[row][col];\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0 && map[row][col] !== 9) {\n          batch.draw(\n            block,\n            col * blockPosition.x,\n            row * blockPosition.y,\n            83,\n            83\n          );\n        } // scan to draw\n      }\n    } //\n  }\n\n  window.addEventListener(\"keypress\", function (e) {\n    if (e) {\n    }\n  });\n\n  blockOnMap();\n  createGameLoop((delta: number) => {\n    timeDelay += delta;\n    if (timeDelay >= 0.5) {\n      timeDelay = 0;\n      for (let row = 1; row < map.length; row++) {\n        for (let col = 1; col < map[row].length - 1; col++) {\n          if (map[row - 1][col] === 0 && map[row][col] !== 0) {\n            [map[row][col], map[row - 1][col]] = [\n              map[row - 1][col],\n              map[row][col],\n            ];\n            console.log(map);\n          }\n        }\n      }\n      // for (let row = 23; row > 1; row--) {\n      //   for (let col = 1; col < map[row].length - 1; col++) {\n      //     if (map[row - 1][col] !== 0) {\n      //       console.log(row + \" work\");\n      //     }\n      //   }\n      // }\n    }\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end();\n\n    //draw border\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    drawTetromino();\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\n\ninit();\n// init2();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}