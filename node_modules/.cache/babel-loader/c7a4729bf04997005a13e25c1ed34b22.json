{"ast":null,"code":"// import {\n//   createGameLoop,\n//   createStage,\n//   createViewport,\n//   InputEvent,\n//   PolygonBatch,\n//   ShapeRenderer,\n//   Texture,\n//   Vector2,\n//   ViewportInputHandler,\n//   BitmapFont,\n//   TextureRegion,\n//   Animation,\n//   PlayMode,\n// } from \"gdxts\";\n\n/*\r\n1. draw bird\r\n2. draw pipe\r\n3. spawn pipe\r\n4. move pipe\r\n5. apply gravity to bird\r\n6. move bird (check inputHandler, apply speedY to bird, rotate bird)\r\n7. check collision (check win condition)\r\n8. try again\r\n*/\nexport const init2 = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 600, 1000);\n  const gl = viewport.getContext();\n  const background1 = await Texture.load(gl, \"./flappy-bird.gif\");\n  const background2 = await Texture.load(gl, \"./flappy-bird2.gif\");\n  const obstacles = await Texture.load(gl, \"./obstacle.webp\");\n  const gameovericon = await Texture.load(gl, \"./gameover.png\");\n  const tapToPlay = await Texture.load(gl, \"./taptoplay.png\");\n  const font = await BitmapFont.load(gl, \"./font.fnt\");\n  const newBird = await Texture.load(gl, \"./newbird.png\");\n  const regions = TextureRegion.splitTexture(newBird, 3, 1);\n  const birdAnimation = new Animation(regions.slice(0, 3), 0.25);\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport); //config of bỉd\n\n  let characterPosition = new Vector2(250, 500);\n  let rotationOfBird = 0;\n  let i = 0;\n  let frame = 0; // animation\n\n  let firstClick = false;\n  let falling = true;\n  let runningGame = true; //config obstacle\n\n  let obstaclePosition = [595, 195, 1195, 195];\n  let obstacleSpeed = 400;\n  let heightObstacleUp1 = 300;\n  let heightObstacleDown1 = 270;\n  let heightObstacleUp2 = 350;\n  let heightObstacleDown2 = 220;\n  gl.clearColor(0, 0, 0, 1);\n  let layerbg2 = 595;\n  let layerbg1 = 0;\n\n  function spawnAndMovePipe(delta) {\n    obstaclePosition[0] -= obstacleSpeed * delta;\n    obstaclePosition[2] -= obstacleSpeed * delta; //bg move\n\n    layerbg1 -= delta * obstacleSpeed;\n    layerbg2 -= delta * obstacleSpeed; // respawn pipe\n\n    if (obstaclePosition[0] < -200) {\n      obstaclePosition[0] = 695;\n\n      if (obstacleSpeed <= 520) {\n        obstacleSpeed *= 1.02;\n      }\n    }\n\n    if (obstaclePosition[2] < -200) {\n      obstaclePosition[2] = 695;\n\n      if (obstacleSpeed <= 500) {\n        obstacleSpeed *= 1.02;\n      }\n    }\n  }\n\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 600, 1000);\n    shapeRenderer.end(); // draw background\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background2, layerbg2, 0, 600, 1000);\n    batch.draw(background1, layerbg1, 0, 600, 1000);\n\n    if (layerbg1 <= -595) {\n      layerbg1 = 593;\n    }\n\n    if (layerbg2 <= -595) {\n      layerbg2 = 593;\n    } //draw chim\n\n\n    let region = birdAnimation.getKeyFrame(frame, PlayMode.LOOP);\n\n    if (i > 0.2) {\n      i = 0;\n      frame %= 3;\n    }\n\n    region.draw(batch, characterPosition.x, characterPosition.y, // height of chim\n    60, 60, 30, 30, rotationOfBird); //draw obstacle\n\n    batch.draw(obstacles, obstaclePosition[0] - 50, obstaclePosition[1], 150, heightObstacleDown1 // heightDown // default = 270 // max 500 min 150\n    );\n    batch.draw(obstacles, obstaclePosition[0] - 50, obstaclePosition[1] + 610, 150, heightObstacleUp1, // heightUp // default = 300 // max 500 min 150\n    75, 100, 47.13);\n    batch.draw(obstacles, obstaclePosition[2] - 50, obstaclePosition[3], 150, heightObstacleDown2 // heightDown // default = 270 // max 500 min 150\n    );\n    batch.draw(obstacles, obstaclePosition[2] - 50, obstaclePosition[3] + 610, 150, heightObstacleUp2, // heightUp // default = 300 // max 500 min 150\n    75, 100, 47.13);\n  });\n};","map":{"version":3,"names":["init2","stage","createStage","canvas","getCanvas","viewport","createViewport","gl","getContext","background1","Texture","load","background2","obstacles","gameovericon","tapToPlay","font","BitmapFont","newBird","regions","TextureRegion","splitTexture","birdAnimation","Animation","slice","shapeRenderer","ShapeRenderer","batch","PolygonBatch","camera","getCamera","inputHandler","ViewportInputHandler","characterPosition","Vector2","rotationOfBird","i","frame","firstClick","falling","runningGame","obstaclePosition","obstacleSpeed","heightObstacleUp1","heightObstacleDown1","heightObstacleUp2","heightObstacleDown2","clearColor","layerbg2","layerbg1","spawnAndMovePipe","delta","createGameLoop","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end","draw","region","getKeyFrame","PlayMode","LOOP","x","y"],"sources":["D:/projects/test-game/src/index2.ts"],"sourcesContent":["// import {\r\n//   createGameLoop,\r\n//   createStage,\r\n//   createViewport,\r\n//   InputEvent,\r\n//   PolygonBatch,\r\n//   ShapeRenderer,\r\n//   Texture,\r\n//   Vector2,\r\n//   ViewportInputHandler,\r\n//   BitmapFont,\r\n//   TextureRegion,\r\n//   Animation,\r\n//   PlayMode,\r\n// } from \"gdxts\";\r\n\r\n/*\r\n1. draw bird\r\n2. draw pipe\r\n3. spawn pipe\r\n4. move pipe\r\n5. apply gravity to bird\r\n6. move bird (check inputHandler, apply speedY to bird, rotate bird)\r\n7. check collision (check win condition)\r\n8. try again\r\n*/\r\n\r\nexport const init2 = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, 600, 1000);\r\n  const gl = viewport.getContext();\r\n\r\n  const background1 = await Texture.load(gl, \"./flappy-bird.gif\");\r\n  const background2 = await Texture.load(gl, \"./flappy-bird2.gif\");\r\n  const obstacles = await Texture.load(gl, \"./obstacle.webp\");\r\n  const gameovericon = await Texture.load(gl, \"./gameover.png\");\r\n  const tapToPlay = await Texture.load(gl, \"./taptoplay.png\");\r\n  const font = await BitmapFont.load(gl, \"./font.fnt\");\r\n  const newBird = await Texture.load(gl, \"./newbird.png\");\r\n  const regions = TextureRegion.splitTexture(newBird, 3, 1);\r\n  const birdAnimation = new Animation(regions.slice(0, 3), 0.25);\r\n\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const batch = new PolygonBatch(gl);\r\n  const camera = viewport.getCamera();\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  //config of bỉd\r\n  let characterPosition = new Vector2(250, 500);\r\n  let rotationOfBird = 0;\r\n  let i = 0;\r\n  let frame = 0; // animation\r\n\r\n  let firstClick = false;\r\n  let falling = true;\r\n  let runningGame = true;\r\n\r\n  //config obstacle\r\n  let obstaclePosition = [595, 195, 1195, 195];\r\n  let obstacleSpeed = 400;\r\n  let heightObstacleUp1 = 300;\r\n  let heightObstacleDown1 = 270;\r\n  let heightObstacleUp2 = 350;\r\n  let heightObstacleDown2 = 220;\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  let layerbg2 = 595;\r\n  let layerbg1 = 0;\r\n\r\n  function spawnAndMovePipe(delta: number) {\r\n    obstaclePosition[0] -= obstacleSpeed * delta;\r\n    obstaclePosition[2] -= obstacleSpeed * delta;\r\n\r\n    //bg move\r\n    layerbg1 -= delta * obstacleSpeed;\r\n    layerbg2 -= delta * obstacleSpeed;\r\n\r\n    // respawn pipe\r\n    if (obstaclePosition[0] < -200) {\r\n      obstaclePosition[0] = 695;\r\n\r\n      if (obstacleSpeed <= 520) {\r\n        obstacleSpeed *= 1.02;\r\n      }\r\n    }\r\n    if (obstaclePosition[2] < -200) {\r\n      obstaclePosition[2] = 695;\r\n\r\n      if (obstacleSpeed <= 500) {\r\n        obstacleSpeed *= 1.02;\r\n      }\r\n    }\r\n  }\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    shapeRenderer.setProjection(camera.projectionView.values);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, 600, 1000);\r\n    shapeRenderer.end();\r\n\r\n    // draw background\r\n    batch.setProjection(camera.projectionView.values);\r\n    batch.begin();\r\n    batch.draw(background2, layerbg2, 0, 600, 1000);\r\n    batch.draw(background1, layerbg1, 0, 600, 1000);\r\n    if (layerbg1 <= -595) {\r\n      layerbg1 = 593;\r\n    }\r\n    if (layerbg2 <= -595) {\r\n      layerbg2 = 593;\r\n    }\r\n\r\n    //draw chim\r\n    let region = birdAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n    if (i > 0.2) {\r\n      i = 0;\r\n      frame %= 3;\r\n    }\r\n    region.draw(\r\n      batch,\r\n      characterPosition.x,\r\n      characterPosition.y, // height of chim\r\n      60,\r\n      60,\r\n      30,\r\n      30,\r\n      rotationOfBird\r\n    );\r\n\r\n    //draw obstacle\r\n    batch.draw(\r\n      obstacles,\r\n      obstaclePosition[0] - 50,\r\n      obstaclePosition[1],\r\n      150,\r\n      heightObstacleDown1 // heightDown // default = 270 // max 500 min 150\r\n    );\r\n    batch.draw(\r\n      obstacles,\r\n      obstaclePosition[0] - 50,\r\n      obstaclePosition[1] + 610,\r\n      150,\r\n      heightObstacleUp1, // heightUp // default = 300 // max 500 min 150\r\n      75,\r\n      100,\r\n      47.13\r\n    );\r\n    batch.draw(\r\n      obstacles,\r\n      obstaclePosition[2] - 50,\r\n      obstaclePosition[3],\r\n      150,\r\n      heightObstacleDown2 // heightDown // default = 270 // max 500 min 150\r\n    );\r\n    batch.draw(\r\n      obstacles,\r\n      obstaclePosition[2] - 50,\r\n      obstaclePosition[3] + 610,\r\n      150,\r\n      heightObstacleUp2, // heightUp // default = 300 // max 500 min 150\r\n      75,\r\n      100,\r\n      47.13\r\n    );\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}