{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Vector2, Color } from \"gdxts\";\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera(); // const background = await Texture.load(gl, \"./TetrisBg.png\");\n  // const border = await Texture.load(gl, \"./border.png\");\n\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\n  const black = new Color(0, 0, 0, 1); //config game\n\n  const ROWGAME = 24;\n  const COLGAME = 12;\n  let map = [];\n  let blockSize = new Vector2(83, 83);\n  let delayTime = 0; //I\n\n  const iBlock = [[1], [1], [1], [2]]; //L\n\n  const lBlock = [[0, 0, 1], [1, 1, 2]]; //L-reverse\n\n  const lReverseBlock = [[1, 0, 0], [2, 1, 1]]; // Square\n\n  const sBlock = [[1, 1], [2, 1]]; // Z\n\n  const zBlock = [[0, 1, 1], [2, 1, 0]]; // Z-reverse\n\n  const zReverseBlock = [[2, 1, 0], [0, 1, 1]]; // T\n\n  const tBlock = [[0, 1, 0], [1, 2, 1]];\n  const blocks = [iBlock, lReverseBlock, lBlock, sBlock, zBlock, zReverseBlock, tBlock];\n  console.log(map);\n  let currentBlock = blocks[3]; //\n\n  let nextBlock = blocks[getRandomInt(0, 6)];\n  let currentPosition = [];\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // draw the map\n\n\n  for (let row = 0; row < ROWGAME; row++) {\n    map[row] = [];\n\n    for (let col = 0; col < COLGAME; col++) {\n      if (row >= 1) {\n        map[row].push(0);\n      } else {\n        map[row].push(1);\n      }\n    }\n\n    for (let col = 0; col < map[row].length; col++) {\n      map[row][0] = 1;\n      map[row][11] = 1;\n    }\n  }\n\n  function blockOnMap() {\n    currentPosition = [];\n\n    for (let row = 0; row < currentBlock.length; row++) {\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[ROWGAME - 1 - row][COLGAME / 2 - 1 + col] = currentBlock[row][col];\n\n        if (map[ROWGAME - 1 - row][COLGAME / 2 - 1 + col]) {\n          currentPosition.push(ROWGAME - 1 - row, COLGAME / 2 - 1 + col);\n        }\n\n        console.warn(currentPosition);\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0) {\n          batch.draw(map[row][col] === 1 ? block : mainBlock, col * blockSize.x, row * blockSize.y, 83, 83);\n        } // scan to draw\n\n      }\n    } //\n\n  }\n\n  function collisionHandmade() {\n    switch (currentBlock) {\n      case blocks[0]:\n        if (map[currentPosition[6] - 1][currentPosition[7]] === 0) {\n          map[currentPosition[0] - 1][currentPosition[1]] = map[currentPosition[0]][currentPosition[1]];\n          map[currentPosition[2] - 1][currentPosition[3]] = map[currentPosition[2]][currentPosition[3]];\n          map[currentPosition[4] - 1][currentPosition[5]] = map[currentPosition[4]][currentPosition[5]]; //undraw\n\n          map[currentPosition[6] - 1][currentPosition[7]] = 2;\n          map[currentPosition[0]][currentPosition[1]] = 0;\n\n          for (let i = 0; i < currentPosition.length; i += 2) {\n            currentPosition[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      case blocks[1]:\n        if (map[currentPosition[2] - 1][currentPosition[3]] === 0 && map[currentPosition[4] - 1][currentPosition[5]] === 0 && map[currentPosition[6] - 1][currentPosition[7]] === 0) {\n          map[currentPosition[0] - 1][currentPosition[1]] = map[currentPosition[0]][currentPosition[1]];\n          map[currentPosition[2] - 1][currentPosition[3]] = 2;\n          map[currentPosition[4] - 1][currentPosition[5]] = map[currentPosition[4]][currentPosition[5]];\n          map[currentPosition[6] - 1][currentPosition[7]] = map[currentPosition[6]][currentPosition[7]]; //undraw\n\n          map[currentPosition[0]][currentPosition[1]] = 0;\n          map[currentPosition[4]][currentPosition[5]] = 0;\n          map[currentPosition[6]][currentPosition[7]] = 0;\n\n          for (let i = 0; i < currentPosition.length; i += 2) {\n            currentPosition[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      case blocks[2]:\n        if (map[currentPosition[2] - 1][currentPosition[3]] === 0 && map[currentPosition[4] - 1][currentPosition[5]] === 0 && map[currentPosition[6] - 1][currentPosition[7]] === 0) {\n          map[currentPosition[2] - 1][currentPosition[3]] = map[currentPosition[2]][currentPosition[3]];\n          map[currentPosition[4] - 1][currentPosition[5]] = map[currentPosition[4]][currentPosition[5]];\n          map[currentPosition[6] - 1][currentPosition[7]] = 2;\n          map[currentPosition[0] - 1][currentPosition[1]] = map[currentPosition[0]][currentPosition[1]]; //undraw\n\n          map[currentPosition[0]][currentPosition[1]] = 0;\n          map[currentPosition[2]][currentPosition[3]] = 0;\n          map[currentPosition[4]][currentPosition[5]] = 0;\n\n          for (let i = 0; i < currentPosition.length; i += 2) {\n            currentPosition[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      case blocks[3]:\n        if (map[currentPosition[4] - 1][currentPosition[5]] === 0 && map[currentPosition[6] - 1][currentPosition[7]] === 0) {\n          map[currentPosition[4] - 1][currentPosition[5]] = map[currentPosition[4]][currentPosition[5]];\n          map[currentPosition[6] - 1][currentPosition[7]] = map[currentPosition[6]][currentPosition[7]]; //undraw\n\n          map[currentPosition[0]][currentPosition[1]] = 0;\n          map[currentPosition[2]][currentPosition[3]] = 0;\n          map[currentPosition[4]][currentPosition[5]] = 1; //default block = 1\n\n          for (let i = 0; i < currentPosition.length; i += 2) {\n            currentPosition[i] -= 1;\n          }\n        } // else {\n        //   currentBlock = nextBlock;\n        //   nextBlock = blocks[getRandomInt(0, 6)];\n        //   blockOnMap();\n        // }\n\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  window.addEventListener(\"keypress\", function (e) {\n    if (e) {}\n  });\n  blockOnMap();\n  createGameLoop(delta => {\n    delayTime += delta;\n\n    if (delayTime >= 0.5) {\n      delayTime = 0;\n      collisionHandmade();\n    }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end(); // console.log(currentBlock);\n    //draw border\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    drawTetromino();\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\ninit(); // init2();","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Vector2","Color","init","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","bgRight","load","block","mainBlock","black","ROWGAME","COLGAME","map","blockSize","delayTime","iBlock","lBlock","lReverseBlock","sBlock","zBlock","zReverseBlock","tBlock","blocks","console","log","currentBlock","nextBlock","getRandomInt","currentPosition","min","max","Math","floor","random","row","col","push","length","blockOnMap","warn","drawTetromino","draw","x","y","collisionHandmade","i","window","addEventListener","e","delta","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\n  createGameLoop,\n  createStage,\n  createViewport,\n  PolygonBatch,\n  ShapeRenderer,\n  Texture,\n  Vector2,\n  BitmapFont,\n  TextureRegion,\n  Color,\n} from \"gdxts\";\n\nimport { init2 } from \"./index2\";\n\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n\n  // const background = await Texture.load(gl, \"./TetrisBg.png\");\n  // const border = await Texture.load(gl, \"./border.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\n  const black = new Color(0, 0, 0, 1);\n\n  //config game\n  const ROWGAME = 24;\n  const COLGAME = 12;\n  let map: any[] = [];\n  let blockSize = new Vector2(83, 83);\n  let delayTime = 0;\n\n  //I\n  const iBlock = [[1], [1], [1], [2]];\n\n  //L\n  const lBlock = [\n    [0, 0, 1],\n    [1, 1, 2],\n  ];\n\n  //L-reverse\n  const lReverseBlock = [\n    [1, 0, 0],\n    [2, 1, 1],\n  ];\n\n  // Square\n  const sBlock = [\n    [1, 1],\n    [2, 1],\n  ];\n\n  // Z\n  const zBlock = [\n    [0, 1, 1],\n    [2, 1, 0],\n  ];\n\n  // Z-reverse\n  const zReverseBlock = [\n    [2, 1, 0],\n    [0, 1, 1],\n  ];\n\n  // T\n  const tBlock = [\n    [0, 1, 0],\n    [1, 2, 1],\n  ];\n\n  const blocks = [\n    iBlock,\n    lReverseBlock,\n    lBlock,\n    sBlock,\n    zBlock,\n    zReverseBlock,\n    tBlock,\n  ];\n  console.log(map);\n  let currentBlock = blocks[3]; //\n  let nextBlock = blocks[getRandomInt(0, 6)];\n  let currentPosition: number[] = [];\n\n  function getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n  // draw the map\n  for (let row = 0; row < ROWGAME; row++) {\n    map[row] = [];\n    for (let col = 0; col < COLGAME; col++) {\n      if (row >= 1) {\n        map[row].push(0);\n      } else {\n        map[row].push(1);\n      }\n    }\n    for (let col = 0; col < map[row].length; col++) {\n      map[row][0] = 1;\n      map[row][11] = 1;\n    }\n  }\n\n  function blockOnMap() {\n    currentPosition = [];\n    for (let row = 0; row < currentBlock.length; row++) {\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[ROWGAME - 1 - row][COLGAME / 2 - 1 + col] = currentBlock[row][col];\n        if (map[ROWGAME - 1 - row][COLGAME / 2 - 1 + col]) {\n          currentPosition.push(ROWGAME - 1 - row, COLGAME / 2 - 1 + col);\n        }\n        console.warn(currentPosition);\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0) {\n          batch.draw(\n            map[row][col] === 1 ? block : mainBlock,\n            col * blockSize.x,\n            row * blockSize.y,\n            83,\n            83\n          );\n        } // scan to draw\n      }\n    } //\n  }\n\n  function collisionHandmade() {\n    switch (currentBlock) {\n      case blocks[0]:\n        if (map[currentPosition[6] - 1][currentPosition[7]] === 0) {\n          map[currentPosition[0] - 1][currentPosition[1]] =\n            map[currentPosition[0]][currentPosition[1]];\n          map[currentPosition[2] - 1][currentPosition[3]] =\n            map[currentPosition[2]][currentPosition[3]];\n          map[currentPosition[4] - 1][currentPosition[5]] =\n            map[currentPosition[4]][currentPosition[5]];\n          //undraw\n          map[currentPosition[6] - 1][currentPosition[7]] = 2;\n          map[currentPosition[0]][currentPosition[1]] = 0;\n          for (let i = 0; i < currentPosition.length; i += 2) {\n            currentPosition[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n      case blocks[1]:\n        if (\n          map[currentPosition[2] - 1][currentPosition[3]] === 0 &&\n          map[currentPosition[4] - 1][currentPosition[5]] === 0 &&\n          map[currentPosition[6] - 1][currentPosition[7]] === 0\n        ) {\n          map[currentPosition[0] - 1][currentPosition[1]] =\n            map[currentPosition[0]][currentPosition[1]];\n          map[currentPosition[2] - 1][currentPosition[3]] = 2;\n          map[currentPosition[4] - 1][currentPosition[5]] =\n            map[currentPosition[4]][currentPosition[5]];\n          map[currentPosition[6] - 1][currentPosition[7]] =\n            map[currentPosition[6]][currentPosition[7]];\n          //undraw\n          map[currentPosition[0]][currentPosition[1]] = 0;\n          map[currentPosition[4]][currentPosition[5]] = 0;\n          map[currentPosition[6]][currentPosition[7]] = 0;\n          for (let i = 0; i < currentPosition.length; i += 2) {\n            currentPosition[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n        break;\n      case blocks[2]:\n        if (\n          map[currentPosition[2] - 1][currentPosition[3]] === 0 &&\n          map[currentPosition[4] - 1][currentPosition[5]] === 0 &&\n          map[currentPosition[6] - 1][currentPosition[7]] === 0\n        ) {\n          map[currentPosition[2] - 1][currentPosition[3]] =\n            map[currentPosition[2]][currentPosition[3]];\n          map[currentPosition[4] - 1][currentPosition[5]] =\n            map[currentPosition[4]][currentPosition[5]];\n          map[currentPosition[6] - 1][currentPosition[7]] = 2;\n          map[currentPosition[0] - 1][currentPosition[1]] =\n            map[currentPosition[0]][currentPosition[1]];\n          //undraw\n          map[currentPosition[0]][currentPosition[1]] = 0;\n          map[currentPosition[2]][currentPosition[3]] = 0;\n          map[currentPosition[4]][currentPosition[5]] = 0;\n          for (let i = 0; i < currentPosition.length; i += 2) {\n            currentPosition[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n        break;\n      case blocks[3]:\n        if (\n          map[currentPosition[4] - 1][currentPosition[5]] === 0 &&\n          map[currentPosition[6] - 1][currentPosition[7]] === 0\n        ) {\n          map[currentPosition[4] - 1][currentPosition[5]] =\n            map[currentPosition[4]][currentPosition[5]];\n          map[currentPosition[6] - 1][currentPosition[7]] =\n            map[currentPosition[6]][currentPosition[7]];\n          //undraw\n          map[currentPosition[0]][currentPosition[1]] = 0;\n          map[currentPosition[2]][currentPosition[3]] = 0;\n          map[currentPosition[4]][currentPosition[5]] = 1; //default block = 1\n\n          for (let i = 0; i < currentPosition.length; i += 2) {\n            currentPosition[i] -= 1;\n          }\n        }\n        // else {\n        //   currentBlock = nextBlock;\n        //   nextBlock = blocks[getRandomInt(0, 6)];\n        //   blockOnMap();\n        // }\n        break;\n      default:\n        break;\n    }\n  }\n\n  window.addEventListener(\"keypress\", function (e) {\n    if (e) {\n    }\n  });\n\n  blockOnMap();\n  createGameLoop((delta: number) => {\n    delayTime += delta;\n    if (delayTime >= 0.5) {\n      delayTime = 0;\n      collisionHandmade();\n    }\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end();\n    // console.log(currentBlock);\n\n    //draw border\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    drawTetromino();\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\n\ninit();\n// init2();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}