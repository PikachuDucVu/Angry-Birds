{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, Texture, BitmapFont } from \"gdxts\";\nconst ROWS = 24;\nconst COLS = 12;\nconst GAME_WIDTH = 1500;\nconst GAME_HEIGHT = 2000;\nexport const init3 = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, GAME_WIDTH, GAME_HEIGHT);\n  const gl = viewport.getContext();\n  const font = await BitmapFont.load(gl, \"./1231231.fnt\");\n  console.log(\"123123\");\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  batch.setYDown(true);\n  camera.setYDown(true);\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\n  const SQUARE_SIZE = 83;\n  let delayTime = 0;\n  let score = 0; //tetrominoes\n  //I\n\n  const iBlock = [[[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]]]; //L\n\n  const lBlock = [[[0, 0, 1], [1, 1, 1], [0, 0, 0]], [[0, 1, 0], [0, 1, 0], [0, 1, 1]], [[0, 0, 0], [1, 1, 1], [1, 0, 0]], [[1, 1, 0], [0, 1, 0], [0, 1, 0]]]; //L-reverse\n\n  const lReverseBlock = [[[1, 0, 0], [1, 1, 1], [0, 0, 0]], [[0, 1, 1], [0, 1, 0], [0, 1, 0]], [[0, 0, 0], [1, 1, 1], [0, 0, 1]], [[0, 1, 0], [0, 1, 0], [1, 1, 0]]]; // Square\n\n  const sBlock = [[[1, 1], [1, 1]]]; // Z\n\n  const zBlock = [[[0, 1, 1], [1, 1, 0], [0, 0, 0]], [[0, 1, 0], [0, 1, 1], [0, 0, 1]]]; // Z-reverse\n\n  const zReverseBlock = [[[1, 1, 0], [0, 1, 1], [0, 0, 0]], [[0, 0, 1], [0, 1, 1], [0, 1, 0]]]; // T\n\n  const tBlock = [[[0, 1, 0], [1, 1, 1], [0, 0, 0]], [[0, 1, 0], [0, 1, 1], [0, 1, 0]], [[0, 0, 0], [1, 1, 1], [0, 1, 0]], [[0, 1, 0], [1, 1, 0], [0, 1, 0]]]; // console.log(iBlock[0]);\n\n  class Piece {\n    constructor(tetromino, nextTetro) {\n      this.tetromino = void 0;\n      this.color = void 0;\n      this.tetrominoN = void 0;\n      this.activeTetromino = void 0;\n      this.temp = void 0;\n      this.x = void 0;\n      this.y = void 0;\n      this.tetromino = tetromino;\n      this.tetrominoN = 0;\n      this.activeTetromino = this.tetromino[this.tetrominoN];\n      this.x = 4;\n      this.y = 0;\n    }\n\n    fill(color) {\n      for (let row = 0; row < this.activeTetromino.length; row++) {\n        for (let col = 0; col < this.activeTetromino.length; col++) {\n          if (this.activeTetromino[row][col]) {\n            drawSquare(this.x + col, this.y + row, color);\n          }\n        }\n      }\n    }\n\n    draw() {\n      this.fill(1);\n    }\n\n    undraw() {\n      this.fill(0);\n    }\n\n    lock() {\n      for (let row = 0; row < this.activeTetromino.length; row++) {\n        for (let col = 0; col < this.activeTetromino.length; col++) {\n          if (!this.activeTetromino[row][col]) {\n            continue;\n          }\n\n          map[this.y + row][this.x + col] = 1;\n        } // console.warn(map);\n\n      } //checkpoint\n\n\n      for (let row = 0; row < ROWS; row++) {\n        let fullRow = true;\n\n        for (let col = 0; col < COLS; col++) {\n          fullRow = fullRow && map[row][col] !== 0;\n        }\n\n        if (fullRow) {\n          for (let y = row; y > 1; y--) {\n            for (let col = 0; col < COLS; col++) {\n              map[y][col] = map[y - 1][col];\n            }\n          }\n\n          for (let col = 0; col < COLS; col++) {\n            map[0][col] = 0;\n          }\n        }\n      }\n\n      piece = new Piece(nextPiece);\n      nextPiece = blocks[getRandomInt(0, 6)];\n      score += 10;\n    }\n\n    collision(x, y, piece) {\n      for (let row = 0; row < piece.length; row++) {\n        for (let col = 0; col < piece.length; col++) {\n          if (!piece[row][col]) {\n            continue;\n          }\n\n          let newX = this.x + col + x;\n          let newY = this.y + row + y;\n\n          if (newX < 0 || newX >= COLS || newY >= ROWS) {\n            return true;\n          }\n\n          if (newY < 0) {\n            continue;\n          }\n\n          if (map[newY][newX] !== 0) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    rotate() {\n      let nextRotateOfBlock = this.tetromino[this.tetrominoN + 1] % this.tetromino.length;\n      let kick = 0;\n\n      if (this.collision(0, 0, nextRotateOfBlock)) {\n        if (this.x > COLS / 2) {\n          kick = -1;\n        } else {\n          kick = 1;\n        }\n      }\n\n      if (!this.collision(kick, 0, nextRotateOfBlock)) {\n        this.undraw();\n        this.x += kick;\n        this.tetrominoN = (this.tetrominoN + 1) % this.tetromino.length;\n        this.activeTetromino = this.tetromino[this.tetrominoN];\n        this.draw();\n      }\n    }\n\n    moveDown() {\n      if (this.y >= 22) {\n        this.lock();\n        piece = new Piece(nextPiece);\n        nextPiece = blocks[getRandomInt(0, 6)];\n      }\n\n      if (!this.collision(0, 1, this.activeTetromino)) {\n        this.undraw();\n        this.y++;\n        this.draw();\n      } else {\n        this.lock();\n      } // console.log(this.x, this.y);\n\n    }\n\n    moveLeft() {\n      if (!this.collision(-1, 0, this.activeTetromino)) {\n        this.undraw();\n        this.x--;\n        this.draw();\n      }\n    }\n\n    moveRight() {\n      if (!this.collision(1, 0, this.activeTetromino)) {\n        this.undraw();\n        this.x++;\n        this.draw();\n      }\n    }\n\n    showNextTetromino(nextTetro) {\n      for (let row = 0; row < nextTetro.length; row++) {\n        for (let col = 0; col < nextTetro[row].length; col++) {\n          if (nextTetro[row][col]) {\n            drawSquare(13.4 + col, 3.2 + row, 1);\n          }\n        }\n      }\n    }\n\n  }\n\n  let blocks = [iBlock, lBlock, lReverseBlock, tBlock, sBlock, zBlock, zReverseBlock];\n  let piece = new Piece(blocks[4]);\n  let nextPiece = blocks[getRandomInt(0, 6)];\n  window.addEventListener(\"keydown\", function (e) {\n    control(e);\n  });\n\n  function control(e) {\n    if (e.keyCode === 37) {\n      piece.moveLeft();\n    } else if (e.keyCode === 38) {\n      piece.rotate();\n    } else if (e.keyCode === 39) {\n      piece.moveRight();\n    } else if (e.keyCode === 40) {\n      piece.moveDown();\n      piece.moveDown();\n    }\n  }\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  let map = [];\n\n  for (let row = 0; row < ROWS; row++) {\n    map[row] = [];\n\n    for (let col = 0; col < COLS; col++) {\n      drawSquare(col, row, 0);\n      map[row][col] = 0;\n    }\n  }\n\n  function drawMapGame() {\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        drawSquare(col, row, map[row][col] === 1 ? 1 : 0);\n      }\n    }\n  } // console.log(map);\n\n\n  function drawSquare(x, y, color) {\n    batch.begin();\n    batch.draw(color ? mainBlock : block, // 0 = gray // 1 = green\n    SQUARE_SIZE * x, SQUARE_SIZE * y, SQUARE_SIZE, SQUARE_SIZE);\n    batch.end();\n  }\n\n  createGameLoop(delta => {\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    delayTime += delta;\n    drawMapGame();\n\n    if (delayTime >= 0.5) {\n      delayTime = 0;\n      piece.moveDown();\n    } //draw border\n\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(bgRight, 1000, 0, 500, 2000); // font.draw(batch, \"score: \" + score, 1050, 700, 12123);\n\n    batch.end();\n    piece.fill(1);\n    console.log(nextPiece[0]);\n    piece.showNextTetromino(nextPiece[0]);\n  });\n};","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","Texture","BitmapFont","ROWS","COLS","GAME_WIDTH","GAME_HEIGHT","init3","stage","canvas","getCanvas","viewport","gl","getContext","font","load","console","log","batch","camera","getCamera","setYDown","bgRight","block","mainBlock","SQUARE_SIZE","delayTime","score","iBlock","lBlock","lReverseBlock","sBlock","zBlock","zReverseBlock","tBlock","Piece","constructor","tetromino","nextTetro","color","tetrominoN","activeTetromino","temp","x","y","fill","row","length","col","drawSquare","draw","undraw","lock","map","fullRow","piece","nextPiece","blocks","getRandomInt","collision","newX","newY","rotate","nextRotateOfBlock","kick","moveDown","moveLeft","moveRight","showNextTetromino","window","addEventListener","e","control","keyCode","min","max","Math","floor","random","drawMapGame","begin","end","delta","clearColor","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values"],"sources":["D:/projects/test-game/src/index3.ts"],"sourcesContent":["import {\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  PolygonBatch,\r\n  Texture,\r\n  BitmapFont,\r\n  TextureRegion,\r\n  Color,\r\n} from \"gdxts\";\r\n\r\nconst ROWS = 24;\r\nconst COLS = 12;\r\nconst GAME_WIDTH = 1500;\r\nconst GAME_HEIGHT = 2000;\r\n\r\nexport const init3 = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, GAME_WIDTH, GAME_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const font = await BitmapFont.load(gl, \"./1231231.fnt\");\r\n  console.log(\"123123\");\r\n  const batch = new PolygonBatch(gl);\r\n  const camera = viewport.getCamera();\r\n  batch.setYDown(true);\r\n  camera.setYDown(true);\r\n\r\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\r\n  const block = await Texture.load(gl, \"./borderBlock.png\");\r\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\r\n  const SQUARE_SIZE = 83;\r\n\r\n  let delayTime = 0;\r\n  let score = 0;\r\n\r\n  //tetrominoes\r\n  //I\r\n  const iBlock = [\r\n    [\r\n      [0, 0, 0, 0],\r\n      [1, 1, 1, 1],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0, 0],\r\n      [0, 1, 0, 0],\r\n      [0, 1, 0, 0],\r\n      [0, 1, 0, 0],\r\n    ],\r\n  ];\r\n\r\n  //L\r\n  const lBlock = [\r\n    [\r\n      [0, 0, 1],\r\n      [1, 1, 1],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n      [0, 1, 1],\r\n    ],\r\n    [\r\n      [0, 0, 0],\r\n      [1, 1, 1],\r\n      [1, 0, 0],\r\n    ],\r\n    [\r\n      [1, 1, 0],\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n    ],\r\n  ];\r\n\r\n  //L-reverse\r\n  const lReverseBlock = [\r\n    [\r\n      [1, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 1],\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n    ],\r\n    [\r\n      [0, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 1],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n      [1, 1, 0],\r\n    ],\r\n  ];\r\n\r\n  // Square\r\n  const sBlock = [\r\n    [\r\n      [1, 1],\r\n      [1, 1],\r\n    ],\r\n  ];\r\n\r\n  // Z\r\n  const zBlock = [\r\n    [\r\n      [0, 1, 1],\r\n      [1, 1, 0],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [0, 1, 1],\r\n      [0, 0, 1],\r\n    ],\r\n  ];\r\n\r\n  // Z-reverse\r\n  const zReverseBlock = [\r\n    [\r\n      [1, 1, 0],\r\n      [0, 1, 1],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 0, 1],\r\n      [0, 1, 1],\r\n      [0, 1, 0],\r\n    ],\r\n  ];\r\n\r\n  // T\r\n  const tBlock = [\r\n    [\r\n      [0, 1, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [0, 1, 1],\r\n      [0, 1, 0],\r\n    ],\r\n    [\r\n      [0, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 1, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [1, 1, 0],\r\n      [0, 1, 0],\r\n    ],\r\n  ];\r\n  // console.log(iBlock[0]);\r\n\r\n  class Piece {\r\n    tetromino: any;\r\n    color: any;\r\n    tetrominoN: any;\r\n    activeTetromino: any;\r\n    temp: any;\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(tetromino: any, nextTetro?: any) {\r\n      this.tetromino = tetromino;\r\n      this.tetrominoN = 0;\r\n      this.activeTetromino = this.tetromino[this.tetrominoN];\r\n\r\n      this.x = 4;\r\n      this.y = 0;\r\n    }\r\n\r\n    fill(color?: any) {\r\n      for (let row = 0; row < this.activeTetromino.length; row++) {\r\n        for (let col = 0; col < this.activeTetromino.length; col++) {\r\n          if (this.activeTetromino[row][col]) {\r\n            drawSquare(this.x + col, this.y + row, color);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    draw() {\r\n      this.fill(1);\r\n    }\r\n    undraw() {\r\n      this.fill(0);\r\n    }\r\n\r\n    lock() {\r\n      for (let row = 0; row < this.activeTetromino.length; row++) {\r\n        for (let col = 0; col < this.activeTetromino.length; col++) {\r\n          if (!this.activeTetromino[row][col]) {\r\n            continue;\r\n          }\r\n          map[this.y + row][this.x + col] = 1;\r\n        }\r\n        // console.warn(map);\r\n      }\r\n      //checkpoint\r\n      for (let row = 0; row < ROWS; row++) {\r\n        let fullRow: boolean = true;\r\n        for (let col = 0; col < COLS; col++) {\r\n          fullRow = fullRow && map[row][col] !== 0;\r\n        }\r\n        if (fullRow) {\r\n          for (let y = row; y > 1; y--) {\r\n            for (let col = 0; col < COLS; col++) {\r\n              map[y][col] = map[y - 1][col];\r\n            }\r\n          }\r\n          for (let col = 0; col < COLS; col++) {\r\n            map[0][col] = 0;\r\n          }\r\n        }\r\n      }\r\n      piece = new Piece(nextPiece);\r\n      nextPiece = blocks[getRandomInt(0, 6)];\r\n      score += 10;\r\n    }\r\n\r\n    collision(x: any, y: any, piece: any) {\r\n      for (let row = 0; row < piece.length; row++) {\r\n        for (let col = 0; col < piece.length; col++) {\r\n          if (!piece[row][col]) {\r\n            continue;\r\n          }\r\n          let newX = this.x + col + x;\r\n          let newY = this.y + row + y;\r\n\r\n          if (newX < 0 || newX >= COLS || newY >= ROWS) {\r\n            return true;\r\n          }\r\n\r\n          if (newY < 0) {\r\n            continue;\r\n          }\r\n          if (map[newY][newX] !== 0) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    rotate() {\r\n      let nextRotateOfBlock =\r\n        this.tetromino[this.tetrominoN + 1] % this.tetromino.length;\r\n      let kick = 0;\r\n      if (this.collision(0, 0, nextRotateOfBlock)) {\r\n        if (this.x > COLS / 2) {\r\n          kick = -1;\r\n        } else {\r\n          kick = 1;\r\n        }\r\n      }\r\n      if (!this.collision(kick, 0, nextRotateOfBlock)) {\r\n        this.undraw();\r\n        this.x += kick;\r\n        this.tetrominoN = (this.tetrominoN + 1) % this.tetromino.length;\r\n        this.activeTetromino = this.tetromino[this.tetrominoN];\r\n        this.draw();\r\n      }\r\n    }\r\n\r\n    moveDown() {\r\n      if (this.y >= 22) {\r\n        this.lock();\r\n        piece = new Piece(nextPiece);\r\n        nextPiece = blocks[getRandomInt(0, 6)];\r\n      }\r\n      if (!this.collision(0, 1, this.activeTetromino)) {\r\n        this.undraw();\r\n        this.y++;\r\n        this.draw();\r\n      } else {\r\n        this.lock();\r\n      }\r\n\r\n      // console.log(this.x, this.y);\r\n    }\r\n    moveLeft() {\r\n      if (!this.collision(-1, 0, this.activeTetromino)) {\r\n        this.undraw();\r\n        this.x--;\r\n        this.draw();\r\n      }\r\n    }\r\n    moveRight() {\r\n      if (!this.collision(1, 0, this.activeTetromino)) {\r\n        this.undraw();\r\n        this.x++;\r\n        this.draw();\r\n      }\r\n    }\r\n    showNextTetromino(nextTetro: any) {\r\n      for (let row = 0; row < nextTetro.length; row++) {\r\n        for (let col = 0; col < nextTetro[row].length; col++) {\r\n          if (nextTetro[row][col]) {\r\n            drawSquare(13.4 + col, 3.2 + row, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  let blocks = [\r\n    iBlock,\r\n    lBlock,\r\n    lReverseBlock,\r\n    tBlock,\r\n    sBlock,\r\n    zBlock,\r\n    zReverseBlock,\r\n  ];\r\n\r\n  let piece = new Piece(blocks[4]);\r\n  let nextPiece = blocks[getRandomInt(0, 6)];\r\n\r\n  window.addEventListener(\"keydown\", function (e) {\r\n    control(e);\r\n  });\r\n  function control(e: any) {\r\n    if (e.keyCode === 37) {\r\n      piece.moveLeft();\r\n    } else if (e.keyCode === 38) {\r\n      piece.rotate();\r\n    } else if (e.keyCode === 39) {\r\n      piece.moveRight();\r\n    } else if (e.keyCode === 40) {\r\n      piece.moveDown();\r\n      piece.moveDown();\r\n    }\r\n  }\r\n\r\n  function getRandomInt(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  let map: any[] = [];\r\n  for (let row = 0; row < ROWS; row++) {\r\n    map[row] = [];\r\n    for (let col = 0; col < COLS; col++) {\r\n      drawSquare(col, row, 0);\r\n      map[row][col] = 0;\r\n    }\r\n  }\r\n  function drawMapGame() {\r\n    for (let row = 0; row < ROWS; row++) {\r\n      for (let col = 0; col < COLS; col++) {\r\n        drawSquare(col, row, map[row][col] === 1 ? 1 : 0);\r\n      }\r\n    }\r\n  }\r\n  // console.log(map);\r\n  function drawSquare(x: number, y: number, color?: any) {\r\n    batch.begin();\r\n    batch.draw(\r\n      color ? mainBlock : block, // 0 = gray // 1 = green\r\n      SQUARE_SIZE * x,\r\n      SQUARE_SIZE * y,\r\n      SQUARE_SIZE,\r\n      SQUARE_SIZE\r\n    );\r\n    batch.end();\r\n  }\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    delayTime += delta;\r\n    drawMapGame();\r\n\r\n    if (delayTime >= 0.5) {\r\n      delayTime = 0;\r\n      piece.moveDown();\r\n    }\r\n    //draw border\r\n    batch.setProjection(camera.projectionView.values);\r\n    batch.begin();\r\n    batch.draw(bgRight, 1000, 0, 500, 2000);\r\n\r\n    // font.draw(batch, \"score: \" + score, 1050, 700, 12123);\r\n\r\n    batch.end();\r\n    piece.fill(1);\r\n    console.log(nextPiece[0]);\r\n    piece.showNextTetromino(nextPiece[0]);\r\n  });\r\n};\r\n"],"mappings":"AAAA,SACEA,cADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,YAJF,EAKEC,OALF,EAMEC,UANF,QASO,OATP;AAWA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,UAAU,GAAG,IAAnB;AACA,MAAMC,WAAW,GAAG,IAApB;AAEA,OAAO,MAAMC,KAAK,GAAG,YAAY;EAC/B,MAAMC,KAAK,GAAGV,WAAW,EAAzB;EACA,MAAMW,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;EACA,MAAMC,QAAQ,GAAGZ,cAAc,CAACU,MAAD,EAASJ,UAAT,EAAqBC,WAArB,CAA/B;EACA,MAAMM,EAAE,GAAGD,QAAQ,CAACE,UAAT,EAAX;EACA,MAAMC,IAAI,GAAG,MAAMZ,UAAU,CAACa,IAAX,CAAgBH,EAAhB,EAAoB,eAApB,CAAnB;EACAI,OAAO,CAACC,GAAR,CAAY,QAAZ;EACA,MAAMC,KAAK,GAAG,IAAIlB,YAAJ,CAAiBY,EAAjB,CAAd;EACA,MAAMO,MAAM,GAAGR,QAAQ,CAACS,SAAT,EAAf;EACAF,KAAK,CAACG,QAAN,CAAe,IAAf;EACAF,MAAM,CAACE,QAAP,CAAgB,IAAhB;EAEA,MAAMC,OAAO,GAAG,MAAMrB,OAAO,CAACc,IAAR,CAAaH,EAAb,EAAiB,WAAjB,CAAtB;EACA,MAAMW,KAAK,GAAG,MAAMtB,OAAO,CAACc,IAAR,CAAaH,EAAb,EAAiB,mBAAjB,CAApB;EACA,MAAMY,SAAS,GAAG,MAAMvB,OAAO,CAACc,IAAR,CAAaH,EAAb,EAAiB,kBAAjB,CAAxB;EACA,MAAMa,WAAW,GAAG,EAApB;EAEA,IAAIC,SAAS,GAAG,CAAhB;EACA,IAAIC,KAAK,GAAG,CAAZ,CAlB+B,CAoB/B;EACA;;EACA,MAAMC,MAAM,GAAG,CACb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAHF,EAIE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAJF,CADa,EAOb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAHF,EAIE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAJF,CAPa,CAAf,CAtB+B,CAqC/B;;EACA,MAAMC,MAAM,GAAG,CACb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CADa,EAMb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CANa,EAWb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CAXa,EAgBb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CAhBa,CAAf,CAtC+B,CA6D/B;;EACA,MAAMC,aAAa,GAAG,CACpB,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CADoB,EAMpB,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CANoB,EAWpB,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CAXoB,EAgBpB,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CAhBoB,CAAtB,CA9D+B,CAqF/B;;EACA,MAAMC,MAAM,GAAG,CACb,CACE,CAAC,CAAD,EAAI,CAAJ,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,CAFF,CADa,CAAf,CAtF+B,CA6F/B;;EACA,MAAMC,MAAM,GAAG,CACb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CADa,EAMb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CANa,CAAf,CA9F+B,CA2G/B;;EACA,MAAMC,aAAa,GAAG,CACpB,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CADoB,EAMpB,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CANoB,CAAtB,CA5G+B,CAyH/B;;EACA,MAAMC,MAAM,GAAG,CACb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CADa,EAMb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CANa,EAWb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CAXa,EAgBb,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,EAGE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHF,CAhBa,CAAf,CA1H+B,CAgJ/B;;EAEA,MAAMC,KAAN,CAAY;IASVC,WAAW,CAACC,SAAD,EAAiBC,SAAjB,EAAkC;MAAA,KAR7CD,SAQ6C;MAAA,KAP7CE,KAO6C;MAAA,KAN7CC,UAM6C;MAAA,KAL7CC,eAK6C;MAAA,KAJ7CC,IAI6C;MAAA,KAH7CC,CAG6C;MAAA,KAF7CC,CAE6C;MAC3C,KAAKP,SAAL,GAAiBA,SAAjB;MACA,KAAKG,UAAL,GAAkB,CAAlB;MACA,KAAKC,eAAL,GAAuB,KAAKJ,SAAL,CAAe,KAAKG,UAApB,CAAvB;MAEA,KAAKG,CAAL,GAAS,CAAT;MACA,KAAKC,CAAL,GAAS,CAAT;IACD;;IAEDC,IAAI,CAACN,KAAD,EAAc;MAChB,KAAK,IAAIO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKL,eAAL,CAAqBM,MAA7C,EAAqDD,GAAG,EAAxD,EAA4D;QAC1D,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKP,eAAL,CAAqBM,MAA7C,EAAqDC,GAAG,EAAxD,EAA4D;UAC1D,IAAI,KAAKP,eAAL,CAAqBK,GAArB,EAA0BE,GAA1B,CAAJ,EAAoC;YAClCC,UAAU,CAAC,KAAKN,CAAL,GAASK,GAAV,EAAe,KAAKJ,CAAL,GAASE,GAAxB,EAA6BP,KAA7B,CAAV;UACD;QACF;MACF;IACF;;IAEDW,IAAI,GAAG;MACL,KAAKL,IAAL,CAAU,CAAV;IACD;;IACDM,MAAM,GAAG;MACP,KAAKN,IAAL,CAAU,CAAV;IACD;;IAEDO,IAAI,GAAG;MACL,KAAK,IAAIN,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKL,eAAL,CAAqBM,MAA7C,EAAqDD,GAAG,EAAxD,EAA4D;QAC1D,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKP,eAAL,CAAqBM,MAA7C,EAAqDC,GAAG,EAAxD,EAA4D;UAC1D,IAAI,CAAC,KAAKP,eAAL,CAAqBK,GAArB,EAA0BE,GAA1B,CAAL,EAAqC;YACnC;UACD;;UACDK,GAAG,CAAC,KAAKT,CAAL,GAASE,GAAV,CAAH,CAAkB,KAAKH,CAAL,GAASK,GAA3B,IAAkC,CAAlC;QACD,CANyD,CAO1D;;MACD,CATI,CAUL;;;MACA,KAAK,IAAIF,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG3C,IAAxB,EAA8B2C,GAAG,EAAjC,EAAqC;QACnC,IAAIQ,OAAgB,GAAG,IAAvB;;QACA,KAAK,IAAIN,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG5C,IAAxB,EAA8B4C,GAAG,EAAjC,EAAqC;UACnCM,OAAO,GAAGA,OAAO,IAAID,GAAG,CAACP,GAAD,CAAH,CAASE,GAAT,MAAkB,CAAvC;QACD;;QACD,IAAIM,OAAJ,EAAa;UACX,KAAK,IAAIV,CAAC,GAAGE,GAAb,EAAkBF,CAAC,GAAG,CAAtB,EAAyBA,CAAC,EAA1B,EAA8B;YAC5B,KAAK,IAAII,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG5C,IAAxB,EAA8B4C,GAAG,EAAjC,EAAqC;cACnCK,GAAG,CAACT,CAAD,CAAH,CAAOI,GAAP,IAAcK,GAAG,CAACT,CAAC,GAAG,CAAL,CAAH,CAAWI,GAAX,CAAd;YACD;UACF;;UACD,KAAK,IAAIA,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG5C,IAAxB,EAA8B4C,GAAG,EAAjC,EAAqC;YACnCK,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAP,IAAc,CAAd;UACD;QACF;MACF;;MACDO,KAAK,GAAG,IAAIpB,KAAJ,CAAUqB,SAAV,CAAR;MACAA,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAlB;MACA/B,KAAK,IAAI,EAAT;IACD;;IAEDgC,SAAS,CAAChB,CAAD,EAASC,CAAT,EAAiBW,KAAjB,EAA6B;MACpC,KAAK,IAAIT,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGS,KAAK,CAACR,MAA9B,EAAsCD,GAAG,EAAzC,EAA6C;QAC3C,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGO,KAAK,CAACR,MAA9B,EAAsCC,GAAG,EAAzC,EAA6C;UAC3C,IAAI,CAACO,KAAK,CAACT,GAAD,CAAL,CAAWE,GAAX,CAAL,EAAsB;YACpB;UACD;;UACD,IAAIY,IAAI,GAAG,KAAKjB,CAAL,GAASK,GAAT,GAAeL,CAA1B;UACA,IAAIkB,IAAI,GAAG,KAAKjB,CAAL,GAASE,GAAT,GAAeF,CAA1B;;UAEA,IAAIgB,IAAI,GAAG,CAAP,IAAYA,IAAI,IAAIxD,IAApB,IAA4ByD,IAAI,IAAI1D,IAAxC,EAA8C;YAC5C,OAAO,IAAP;UACD;;UAED,IAAI0D,IAAI,GAAG,CAAX,EAAc;YACZ;UACD;;UACD,IAAIR,GAAG,CAACQ,IAAD,CAAH,CAAUD,IAAV,MAAoB,CAAxB,EAA2B;YACzB,OAAO,IAAP;UACD;QACF;MACF;;MACD,OAAO,KAAP;IACD;;IAEDE,MAAM,GAAG;MACP,IAAIC,iBAAiB,GACnB,KAAK1B,SAAL,CAAe,KAAKG,UAAL,GAAkB,CAAjC,IAAsC,KAAKH,SAAL,CAAeU,MADvD;MAEA,IAAIiB,IAAI,GAAG,CAAX;;MACA,IAAI,KAAKL,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqBI,iBAArB,CAAJ,EAA6C;QAC3C,IAAI,KAAKpB,CAAL,GAASvC,IAAI,GAAG,CAApB,EAAuB;UACrB4D,IAAI,GAAG,CAAC,CAAR;QACD,CAFD,MAEO;UACLA,IAAI,GAAG,CAAP;QACD;MACF;;MACD,IAAI,CAAC,KAAKL,SAAL,CAAeK,IAAf,EAAqB,CAArB,EAAwBD,iBAAxB,CAAL,EAAiD;QAC/C,KAAKZ,MAAL;QACA,KAAKR,CAAL,IAAUqB,IAAV;QACA,KAAKxB,UAAL,GAAkB,CAAC,KAAKA,UAAL,GAAkB,CAAnB,IAAwB,KAAKH,SAAL,CAAeU,MAAzD;QACA,KAAKN,eAAL,GAAuB,KAAKJ,SAAL,CAAe,KAAKG,UAApB,CAAvB;QACA,KAAKU,IAAL;MACD;IACF;;IAEDe,QAAQ,GAAG;MACT,IAAI,KAAKrB,CAAL,IAAU,EAAd,EAAkB;QAChB,KAAKQ,IAAL;QACAG,KAAK,GAAG,IAAIpB,KAAJ,CAAUqB,SAAV,CAAR;QACAA,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAlB;MACD;;MACD,IAAI,CAAC,KAAKC,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAAKlB,eAA1B,CAAL,EAAiD;QAC/C,KAAKU,MAAL;QACA,KAAKP,CAAL;QACA,KAAKM,IAAL;MACD,CAJD,MAIO;QACL,KAAKE,IAAL;MACD,CAZQ,CAcT;;IACD;;IACDc,QAAQ,GAAG;MACT,IAAI,CAAC,KAAKP,SAAL,CAAe,CAAC,CAAhB,EAAmB,CAAnB,EAAsB,KAAKlB,eAA3B,CAAL,EAAkD;QAChD,KAAKU,MAAL;QACA,KAAKR,CAAL;QACA,KAAKO,IAAL;MACD;IACF;;IACDiB,SAAS,GAAG;MACV,IAAI,CAAC,KAAKR,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAAKlB,eAA1B,CAAL,EAAiD;QAC/C,KAAKU,MAAL;QACA,KAAKR,CAAL;QACA,KAAKO,IAAL;MACD;IACF;;IACDkB,iBAAiB,CAAC9B,SAAD,EAAiB;MAChC,KAAK,IAAIQ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGR,SAAS,CAACS,MAAlC,EAA0CD,GAAG,EAA7C,EAAiD;QAC/C,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGV,SAAS,CAACQ,GAAD,CAAT,CAAeC,MAAvC,EAA+CC,GAAG,EAAlD,EAAsD;UACpD,IAAIV,SAAS,CAACQ,GAAD,CAAT,CAAeE,GAAf,CAAJ,EAAyB;YACvBC,UAAU,CAAC,OAAOD,GAAR,EAAa,MAAMF,GAAnB,EAAwB,CAAxB,CAAV;UACD;QACF;MACF;IACF;;EArJS;;EAwJZ,IAAIW,MAAM,GAAG,CACX7B,MADW,EAEXC,MAFW,EAGXC,aAHW,EAIXI,MAJW,EAKXH,MALW,EAMXC,MANW,EAOXC,aAPW,CAAb;EAUA,IAAIsB,KAAK,GAAG,IAAIpB,KAAJ,CAAUsB,MAAM,CAAC,CAAD,CAAhB,CAAZ;EACA,IAAID,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAtB;EAEAW,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,UAAUC,CAAV,EAAa;IAC9CC,OAAO,CAACD,CAAD,CAAP;EACD,CAFD;;EAGA,SAASC,OAAT,CAAiBD,CAAjB,EAAyB;IACvB,IAAIA,CAAC,CAACE,OAAF,KAAc,EAAlB,EAAsB;MACpBlB,KAAK,CAACW,QAAN;IACD,CAFD,MAEO,IAAIK,CAAC,CAACE,OAAF,KAAc,EAAlB,EAAsB;MAC3BlB,KAAK,CAACO,MAAN;IACD,CAFM,MAEA,IAAIS,CAAC,CAACE,OAAF,KAAc,EAAlB,EAAsB;MAC3BlB,KAAK,CAACY,SAAN;IACD,CAFM,MAEA,IAAII,CAAC,CAACE,OAAF,KAAc,EAAlB,EAAsB;MAC3BlB,KAAK,CAACU,QAAN;MACAV,KAAK,CAACU,QAAN;IACD;EACF;;EAED,SAASP,YAAT,CAAsBgB,GAAtB,EAAmCC,GAAnC,EAAgD;IAC9C,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;EACD;;EAED,IAAIrB,GAAU,GAAG,EAAjB;;EACA,KAAK,IAAIP,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG3C,IAAxB,EAA8B2C,GAAG,EAAjC,EAAqC;IACnCO,GAAG,CAACP,GAAD,CAAH,GAAW,EAAX;;IACA,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG5C,IAAxB,EAA8B4C,GAAG,EAAjC,EAAqC;MACnCC,UAAU,CAACD,GAAD,EAAMF,GAAN,EAAW,CAAX,CAAV;MACAO,GAAG,CAACP,GAAD,CAAH,CAASE,GAAT,IAAgB,CAAhB;IACD;EACF;;EACD,SAAS+B,WAAT,GAAuB;IACrB,KAAK,IAAIjC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG3C,IAAxB,EAA8B2C,GAAG,EAAjC,EAAqC;MACnC,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG5C,IAAxB,EAA8B4C,GAAG,EAAjC,EAAqC;QACnCC,UAAU,CAACD,GAAD,EAAMF,GAAN,EAAWO,GAAG,CAACP,GAAD,CAAH,CAASE,GAAT,MAAkB,CAAlB,GAAsB,CAAtB,GAA0B,CAArC,CAAV;MACD;IACF;EACF,CAzV8B,CA0V/B;;;EACA,SAASC,UAAT,CAAoBN,CAApB,EAA+BC,CAA/B,EAA0CL,KAA1C,EAAuD;IACrDrB,KAAK,CAAC8D,KAAN;IACA9D,KAAK,CAACgC,IAAN,CACEX,KAAK,GAAGf,SAAH,GAAeD,KADtB,EAC6B;IAC3BE,WAAW,GAAGkB,CAFhB,EAGElB,WAAW,GAAGmB,CAHhB,EAIEnB,WAJF,EAKEA,WALF;IAOAP,KAAK,CAAC+D,GAAN;EACD;;EAEDpF,cAAc,CAAEqF,KAAD,IAAmB;IAChCtE,EAAE,CAACuE,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;IACAvE,EAAE,CAACwE,KAAH,CAASxE,EAAE,CAACyE,gBAAZ;IACA3D,SAAS,IAAIwD,KAAb;IACAH,WAAW;;IAEX,IAAIrD,SAAS,IAAI,GAAjB,EAAsB;MACpBA,SAAS,GAAG,CAAZ;MACA6B,KAAK,CAACU,QAAN;IACD,CAT+B,CAUhC;;;IACA/C,KAAK,CAACoE,aAAN,CAAoBnE,MAAM,CAACoE,cAAP,CAAsBC,MAA1C;IACAtE,KAAK,CAAC8D,KAAN;IACA9D,KAAK,CAACgC,IAAN,CAAW5B,OAAX,EAAoB,IAApB,EAA0B,CAA1B,EAA6B,GAA7B,EAAkC,IAAlC,EAbgC,CAehC;;IAEAJ,KAAK,CAAC+D,GAAN;IACA1B,KAAK,CAACV,IAAN,CAAW,CAAX;IACA7B,OAAO,CAACC,GAAR,CAAYuC,SAAS,CAAC,CAAD,CAArB;IACAD,KAAK,CAACa,iBAAN,CAAwBZ,SAAS,CAAC,CAAD,CAAjC;EACD,CArBa,CAAd;AAsBD,CA7XM"},"metadata":{},"sourceType":"module"}