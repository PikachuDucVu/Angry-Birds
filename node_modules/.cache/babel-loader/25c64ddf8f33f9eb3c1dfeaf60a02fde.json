{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Color } from \"gdxts\";\nconst BOARD_ROWS = 22;\nconst BOARD_COLS = 10;\nconst GAME_WIDTH = 1500;\nconst GAME_HEIGHT = 2000;\nexport const init2 = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const redBlock = await Texture.load(gl, \"./RedBlock.png\");\n  const board = []; //I\n\n  const iBlock = [[1], [1], [1], [1]]; //L\n\n  const lBlock = [[0, 0, 2], [2, 2, 2]]; //L-reverse\n\n  const lReverseBlock = [[3, 0, 0], [3, 3, 3]]; // Square\n\n  const sBlock = [[5, 5], [5, 5]]; // Z\n\n  const zBlock = [[0, 6, 6], [6, 6, 0]]; // Z-reverse\n\n  const zReverseBlock = [[7, 7, 0], [0, 7, 7]]; // T\n\n  const tBlock = [[0, 8, 0], [8, 8, 8]];\n  const blocks = [iBlock, lReverseBlock, lBlock, sBlock, zBlock, zReverseBlock, tBlock]; // generate board\n\n  for (let i = 0; i < BOARD_ROWS; i++) {\n    for (let j = 0; j < BOARD_COLS; j++) {\n      board.push(0);\n    }\n  }\n\n  let timeDelay = 0;\n  const black = new Color(0, 0, 0, 1);\n  createGameLoop(delta => {\n    timeDelay += delta;\n\n    if (timeDelay >= 0.5) {}\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end(); //draw border\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.end();\n  });\n};","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Color","BOARD_ROWS","BOARD_COLS","GAME_WIDTH","GAME_HEIGHT","init2","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","redBlock","load","board","iBlock","lBlock","lReverseBlock","sBlock","zBlock","zReverseBlock","tBlock","blocks","i","j","push","timeDelay","black","delta","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end"],"sources":["D:/projects/test-game/src/index2.ts"],"sourcesContent":["import {\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  Vector2,\r\n  BitmapFont,\r\n  TextureRegion,\r\n  Color,\r\n} from \"gdxts\";\r\n\r\nconst BOARD_ROWS = 22;\r\nconst BOARD_COLS = 10;\r\nconst GAME_WIDTH = 1500;\r\nconst GAME_HEIGHT = 2000;\r\n\r\nexport const init2 = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, 1500, 2000);\r\n  const gl = viewport.getContext();\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const batch = new PolygonBatch(gl);\r\n  const camera = viewport.getCamera();\r\n\r\n  const redBlock = await Texture.load(gl, \"./RedBlock.png\");\r\n\r\n  const board: number[] = [];\r\n\r\n  //I\r\n  const iBlock = [[1], [1], [1], [1]];\r\n\r\n  //L\r\n  const lBlock = [\r\n    [0, 0, 2],\r\n    [2, 2, 2],\r\n  ];\r\n\r\n  //L-reverse\r\n  const lReverseBlock = [\r\n    [3, 0, 0],\r\n    [3, 3, 3],\r\n  ];\r\n\r\n  // Square\r\n  const sBlock = [\r\n    [5, 5],\r\n    [5, 5],\r\n  ];\r\n\r\n  // Z\r\n  const zBlock = [\r\n    [0, 6, 6],\r\n    [6, 6, 0],\r\n  ];\r\n\r\n  // Z-reverse\r\n  const zReverseBlock = [\r\n    [7, 7, 0],\r\n    [0, 7, 7],\r\n  ];\r\n\r\n  // T\r\n  const tBlock = [\r\n    [0, 8, 0],\r\n    [8, 8, 8],\r\n  ];\r\n\r\n  const blocks = [\r\n    iBlock,\r\n    lReverseBlock,\r\n    lBlock,\r\n    sBlock,\r\n    zBlock,\r\n    zReverseBlock,\r\n    tBlock,\r\n  ];\r\n\r\n  // generate board\r\n  for (let i = 0; i < BOARD_ROWS; i++) {\r\n    for (let j = 0; j < BOARD_COLS; j++) {\r\n      board.push(0);\r\n    }\r\n  }\r\n\r\n  let timeDelay = 0;\r\n  const black = new Color(0, 0, 0, 1);\r\n\r\n  createGameLoop((delta: number) => {\r\n    timeDelay += delta;\r\n    if (timeDelay >= 0.5) {\r\n    }\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    shapeRenderer.setProjection(camera.projectionView.values);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\r\n    shapeRenderer.end();\r\n\r\n    //draw border\r\n    batch.setProjection(camera.projectionView.values);\r\n    batch.begin();\r\n    batch.end();\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}