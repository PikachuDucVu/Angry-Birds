{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Texture = exports.TextureWrap = exports.TextureFilter = void 0;\nvar TextureFilter;\n\n(function (TextureFilter) {\n  TextureFilter[TextureFilter[\"Nearest\"] = 9728] = \"Nearest\";\n  TextureFilter[TextureFilter[\"Linear\"] = 9729] = \"Linear\";\n  TextureFilter[TextureFilter[\"MipMap\"] = 9987] = \"MipMap\";\n  TextureFilter[TextureFilter[\"MipMapNearestNearest\"] = 9984] = \"MipMapNearestNearest\";\n  TextureFilter[TextureFilter[\"MipMapLinearNearest\"] = 9985] = \"MipMapLinearNearest\";\n  TextureFilter[TextureFilter[\"MipMapNearestLinear\"] = 9986] = \"MipMapNearestLinear\";\n  TextureFilter[TextureFilter[\"MipMapLinearLinear\"] = 9987] = \"MipMapLinearLinear\"; // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n})(TextureFilter = exports.TextureFilter || (exports.TextureFilter = {}));\n\nvar TextureWrap;\n\n(function (TextureWrap) {\n  TextureWrap[TextureWrap[\"MirroredRepeat\"] = 33648] = \"MirroredRepeat\";\n  TextureWrap[TextureWrap[\"ClampToEdge\"] = 33071] = \"ClampToEdge\";\n  TextureWrap[TextureWrap[\"Repeat\"] = 10497] = \"Repeat\"; // WebGLRenderingContext.REPEAT\n})(TextureWrap = exports.TextureWrap || (exports.TextureWrap = {}));\n\nclass Texture {\n  constructor(context, image) {\n    let useMipMaps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.texture = null;\n    this.boundUnit = 0;\n    this.useMipMaps = false;\n    this.width = 0;\n    this.height = 0;\n    this._image = image;\n    this.context = context;\n    this.useMipMaps = useMipMaps;\n    this.restore();\n    this.width = image.width;\n    this.height = image.height;\n  }\n\n  getImage() {\n    return this._image;\n  }\n\n  static load(gl, url) {\n    let useMipmaps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return new Promise(resolve => {\n      const image = new Image();\n\n      image.onload = () => {\n        resolve(new Texture(gl, image, useMipmaps));\n      };\n\n      image.src = url;\n    });\n  }\n\n  setFilters(minFilter, magFilter) {\n    let gl = this.context;\n    this.bind();\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, Texture.validateMagFilter(magFilter));\n  }\n\n  static validateMagFilter(magFilter) {\n    switch (magFilter) {\n      case TextureFilter.MipMap:\n      case TextureFilter.MipMapLinearLinear:\n      case TextureFilter.MipMapLinearNearest:\n      case TextureFilter.MipMapNearestLinear:\n      case TextureFilter.MipMapNearestNearest:\n        return TextureFilter.Linear;\n\n      default:\n        return magFilter;\n    }\n  }\n\n  setWraps(uWrap, vWrap) {\n    let gl = this.context;\n    this.bind();\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, uWrap);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, vWrap);\n  }\n\n  update(useMipMaps) {\n    let gl = this.context;\n    if (!this.texture) this.texture = this.context.createTexture();\n    this.bind();\n    if (Texture.DISABLE_UNPACK_PREMULTIPLIED_ALPHA_WEBGL) gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._image);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, useMipMaps ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    if (useMipMaps) gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  restore() {\n    this.texture = null;\n    this.update(this.useMipMaps);\n  }\n\n  bind() {\n    let unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let gl = this.context;\n    this.boundUnit = unit;\n    gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n  }\n\n  unbind() {\n    let gl = this.context;\n    gl.activeTexture(gl.TEXTURE0 + this.boundUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n\n  dispose() {\n    let gl = this.context;\n    gl.deleteTexture(this.texture);\n  }\n\n}\n\nexports.Texture = Texture;\nTexture.DISABLE_UNPACK_PREMULTIPLIED_ALPHA_WEBGL = false;","map":{"version":3,"names":["Object","defineProperty","exports","value","Texture","TextureWrap","TextureFilter","constructor","context","image","useMipMaps","texture","boundUnit","width","height","_image","restore","getImage","load","gl","url","useMipmaps","Promise","resolve","Image","onload","src","setFilters","minFilter","magFilter","bind","texParameteri","TEXTURE_2D","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","validateMagFilter","MipMap","MipMapLinearLinear","MipMapLinearNearest","MipMapNearestLinear","MipMapNearestNearest","Linear","setWraps","uWrap","vWrap","TEXTURE_WRAP_S","TEXTURE_WRAP_T","update","createTexture","DISABLE_UNPACK_PREMULTIPLIED_ALPHA_WEBGL","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","generateMipmap","unit","activeTexture","TEXTURE0","bindTexture","unbind","dispose","deleteTexture"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/Texture.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Texture = exports.TextureWrap = exports.TextureFilter = void 0;\nvar TextureFilter;\n(function (TextureFilter) {\n    TextureFilter[TextureFilter[\"Nearest\"] = 9728] = \"Nearest\";\n    TextureFilter[TextureFilter[\"Linear\"] = 9729] = \"Linear\";\n    TextureFilter[TextureFilter[\"MipMap\"] = 9987] = \"MipMap\";\n    TextureFilter[TextureFilter[\"MipMapNearestNearest\"] = 9984] = \"MipMapNearestNearest\";\n    TextureFilter[TextureFilter[\"MipMapLinearNearest\"] = 9985] = \"MipMapLinearNearest\";\n    TextureFilter[TextureFilter[\"MipMapNearestLinear\"] = 9986] = \"MipMapNearestLinear\";\n    TextureFilter[TextureFilter[\"MipMapLinearLinear\"] = 9987] = \"MipMapLinearLinear\"; // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n})(TextureFilter = exports.TextureFilter || (exports.TextureFilter = {}));\nvar TextureWrap;\n(function (TextureWrap) {\n    TextureWrap[TextureWrap[\"MirroredRepeat\"] = 33648] = \"MirroredRepeat\";\n    TextureWrap[TextureWrap[\"ClampToEdge\"] = 33071] = \"ClampToEdge\";\n    TextureWrap[TextureWrap[\"Repeat\"] = 10497] = \"Repeat\"; // WebGLRenderingContext.REPEAT\n})(TextureWrap = exports.TextureWrap || (exports.TextureWrap = {}));\nclass Texture {\n    constructor(context, image, useMipMaps = false) {\n        this.texture = null;\n        this.boundUnit = 0;\n        this.useMipMaps = false;\n        this.width = 0;\n        this.height = 0;\n        this._image = image;\n        this.context = context;\n        this.useMipMaps = useMipMaps;\n        this.restore();\n        this.width = image.width;\n        this.height = image.height;\n    }\n    getImage() {\n        return this._image;\n    }\n    static load(gl, url, useMipmaps = false) {\n        return new Promise(resolve => {\n            const image = new Image();\n            image.onload = () => {\n                resolve(new Texture(gl, image, useMipmaps));\n            };\n            image.src = url;\n        });\n    }\n    setFilters(minFilter, magFilter) {\n        let gl = this.context;\n        this.bind();\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, Texture.validateMagFilter(magFilter));\n    }\n    static validateMagFilter(magFilter) {\n        switch (magFilter) {\n            case TextureFilter.MipMap:\n            case TextureFilter.MipMapLinearLinear:\n            case TextureFilter.MipMapLinearNearest:\n            case TextureFilter.MipMapNearestLinear:\n            case TextureFilter.MipMapNearestNearest:\n                return TextureFilter.Linear;\n            default:\n                return magFilter;\n        }\n    }\n    setWraps(uWrap, vWrap) {\n        let gl = this.context;\n        this.bind();\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, uWrap);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, vWrap);\n    }\n    update(useMipMaps) {\n        let gl = this.context;\n        if (!this.texture)\n            this.texture = this.context.createTexture();\n        this.bind();\n        if (Texture.DISABLE_UNPACK_PREMULTIPLIED_ALPHA_WEBGL)\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._image);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, useMipMaps ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        if (useMipMaps)\n            gl.generateMipmap(gl.TEXTURE_2D);\n    }\n    restore() {\n        this.texture = null;\n        this.update(this.useMipMaps);\n    }\n    bind(unit = 0) {\n        let gl = this.context;\n        this.boundUnit = unit;\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    }\n    unbind() {\n        let gl = this.context;\n        gl.activeTexture(gl.TEXTURE0 + this.boundUnit);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n    dispose() {\n        let gl = this.context;\n        gl.deleteTexture(this.texture);\n    }\n}\nexports.Texture = Texture;\nTexture.DISABLE_UNPACK_PREMULTIPLIED_ALPHA_WEBGL = false;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,WAAR,GAAsBH,OAAO,CAACI,aAAR,GAAwB,KAAK,CAArE;AACA,IAAIA,aAAJ;;AACA,CAAC,UAAUA,aAAV,EAAyB;EACtBA,aAAa,CAACA,aAAa,CAAC,SAAD,CAAb,GAA2B,IAA5B,CAAb,GAAiD,SAAjD;EACAA,aAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,IAA3B,CAAb,GAAgD,QAAhD;EACAA,aAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,IAA3B,CAAb,GAAgD,QAAhD;EACAA,aAAa,CAACA,aAAa,CAAC,sBAAD,CAAb,GAAwC,IAAzC,CAAb,GAA8D,sBAA9D;EACAA,aAAa,CAACA,aAAa,CAAC,qBAAD,CAAb,GAAuC,IAAxC,CAAb,GAA6D,qBAA7D;EACAA,aAAa,CAACA,aAAa,CAAC,qBAAD,CAAb,GAAuC,IAAxC,CAAb,GAA6D,qBAA7D;EACAA,aAAa,CAACA,aAAa,CAAC,oBAAD,CAAb,GAAsC,IAAvC,CAAb,GAA4D,oBAA5D,CAPsB,CAO4D;AACrF,CARD,EAQGA,aAAa,GAAGJ,OAAO,CAACI,aAAR,KAA0BJ,OAAO,CAACI,aAAR,GAAwB,EAAlD,CARnB;;AASA,IAAID,WAAJ;;AACA,CAAC,UAAUA,WAAV,EAAuB;EACpBA,WAAW,CAACA,WAAW,CAAC,gBAAD,CAAX,GAAgC,KAAjC,CAAX,GAAqD,gBAArD;EACAA,WAAW,CAACA,WAAW,CAAC,aAAD,CAAX,GAA6B,KAA9B,CAAX,GAAkD,aAAlD;EACAA,WAAW,CAACA,WAAW,CAAC,QAAD,CAAX,GAAwB,KAAzB,CAAX,GAA6C,QAA7C,CAHoB,CAGmC;AAC1D,CAJD,EAIGA,WAAW,GAAGH,OAAO,CAACG,WAAR,KAAwBH,OAAO,CAACG,WAAR,GAAsB,EAA9C,CAJjB;;AAKA,MAAMD,OAAN,CAAc;EACVG,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAqC;IAAA,IAApBC,UAAoB,uEAAP,KAAO;IAC5C,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKC,SAAL,GAAiB,CAAjB;IACA,KAAKF,UAAL,GAAkB,KAAlB;IACA,KAAKG,KAAL,GAAa,CAAb;IACA,KAAKC,MAAL,GAAc,CAAd;IACA,KAAKC,MAAL,GAAcN,KAAd;IACA,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKE,UAAL,GAAkBA,UAAlB;IACA,KAAKM,OAAL;IACA,KAAKH,KAAL,GAAaJ,KAAK,CAACI,KAAnB;IACA,KAAKC,MAAL,GAAcL,KAAK,CAACK,MAApB;EACH;;EACDG,QAAQ,GAAG;IACP,OAAO,KAAKF,MAAZ;EACH;;EACU,OAAJG,IAAI,CAACC,EAAD,EAAKC,GAAL,EAA8B;IAAA,IAApBC,UAAoB,uEAAP,KAAO;IACrC,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;MAC1B,MAAMd,KAAK,GAAG,IAAIe,KAAJ,EAAd;;MACAf,KAAK,CAACgB,MAAN,GAAe,MAAM;QACjBF,OAAO,CAAC,IAAInB,OAAJ,CAAYe,EAAZ,EAAgBV,KAAhB,EAAuBY,UAAvB,CAAD,CAAP;MACH,CAFD;;MAGAZ,KAAK,CAACiB,GAAN,GAAYN,GAAZ;IACH,CANM,CAAP;EAOH;;EACDO,UAAU,CAACC,SAAD,EAAYC,SAAZ,EAAuB;IAC7B,IAAIV,EAAE,GAAG,KAAKX,OAAd;IACA,KAAKsB,IAAL;IACAX,EAAE,CAACY,aAAH,CAAiBZ,EAAE,CAACa,UAApB,EAAgCb,EAAE,CAACc,kBAAnC,EAAuDL,SAAvD;IACAT,EAAE,CAACY,aAAH,CAAiBZ,EAAE,CAACa,UAApB,EAAgCb,EAAE,CAACe,kBAAnC,EAAuD9B,OAAO,CAAC+B,iBAAR,CAA0BN,SAA1B,CAAvD;EACH;;EACuB,OAAjBM,iBAAiB,CAACN,SAAD,EAAY;IAChC,QAAQA,SAAR;MACI,KAAKvB,aAAa,CAAC8B,MAAnB;MACA,KAAK9B,aAAa,CAAC+B,kBAAnB;MACA,KAAK/B,aAAa,CAACgC,mBAAnB;MACA,KAAKhC,aAAa,CAACiC,mBAAnB;MACA,KAAKjC,aAAa,CAACkC,oBAAnB;QACI,OAAOlC,aAAa,CAACmC,MAArB;;MACJ;QACI,OAAOZ,SAAP;IARR;EAUH;;EACDa,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAe;IACnB,IAAIzB,EAAE,GAAG,KAAKX,OAAd;IACA,KAAKsB,IAAL;IACAX,EAAE,CAACY,aAAH,CAAiBZ,EAAE,CAACa,UAApB,EAAgCb,EAAE,CAAC0B,cAAnC,EAAmDF,KAAnD;IACAxB,EAAE,CAACY,aAAH,CAAiBZ,EAAE,CAACa,UAApB,EAAgCb,EAAE,CAAC2B,cAAnC,EAAmDF,KAAnD;EACH;;EACDG,MAAM,CAACrC,UAAD,EAAa;IACf,IAAIS,EAAE,GAAG,KAAKX,OAAd;IACA,IAAI,CAAC,KAAKG,OAAV,EACI,KAAKA,OAAL,GAAe,KAAKH,OAAL,CAAawC,aAAb,EAAf;IACJ,KAAKlB,IAAL;IACA,IAAI1B,OAAO,CAAC6C,wCAAZ,EACI9B,EAAE,CAAC+B,WAAH,CAAe/B,EAAE,CAACgC,8BAAlB,EAAkD,KAAlD;IACJhC,EAAE,CAACiC,UAAH,CAAcjC,EAAE,CAACa,UAAjB,EAA6B,CAA7B,EAAgCb,EAAE,CAACkC,IAAnC,EAAyClC,EAAE,CAACkC,IAA5C,EAAkDlC,EAAE,CAACmC,aAArD,EAAoE,KAAKvC,MAAzE;IACAI,EAAE,CAACY,aAAH,CAAiBZ,EAAE,CAACa,UAApB,EAAgCb,EAAE,CAACe,kBAAnC,EAAuDf,EAAE,CAACoC,MAA1D;IACApC,EAAE,CAACY,aAAH,CAAiBZ,EAAE,CAACa,UAApB,EAAgCb,EAAE,CAACc,kBAAnC,EAAuDvB,UAAU,GAAGS,EAAE,CAACqC,oBAAN,GAA6BrC,EAAE,CAACoC,MAAjG;IACApC,EAAE,CAACY,aAAH,CAAiBZ,EAAE,CAACa,UAApB,EAAgCb,EAAE,CAAC0B,cAAnC,EAAmD1B,EAAE,CAACsC,aAAtD;IACAtC,EAAE,CAACY,aAAH,CAAiBZ,EAAE,CAACa,UAApB,EAAgCb,EAAE,CAAC2B,cAAnC,EAAmD3B,EAAE,CAACsC,aAAtD;IACA,IAAI/C,UAAJ,EACIS,EAAE,CAACuC,cAAH,CAAkBvC,EAAE,CAACa,UAArB;EACP;;EACDhB,OAAO,GAAG;IACN,KAAKL,OAAL,GAAe,IAAf;IACA,KAAKoC,MAAL,CAAY,KAAKrC,UAAjB;EACH;;EACDoB,IAAI,GAAW;IAAA,IAAV6B,IAAU,uEAAH,CAAG;IACX,IAAIxC,EAAE,GAAG,KAAKX,OAAd;IACA,KAAKI,SAAL,GAAiB+C,IAAjB;IACAxC,EAAE,CAACyC,aAAH,CAAiBzC,EAAE,CAAC0C,QAAH,GAAcF,IAA/B;IACAxC,EAAE,CAAC2C,WAAH,CAAe3C,EAAE,CAACa,UAAlB,EAA8B,KAAKrB,OAAnC;EACH;;EACDoD,MAAM,GAAG;IACL,IAAI5C,EAAE,GAAG,KAAKX,OAAd;IACAW,EAAE,CAACyC,aAAH,CAAiBzC,EAAE,CAAC0C,QAAH,GAAc,KAAKjD,SAApC;IACAO,EAAE,CAAC2C,WAAH,CAAe3C,EAAE,CAACa,UAAlB,EAA8B,IAA9B;EACH;;EACDgC,OAAO,GAAG;IACN,IAAI7C,EAAE,GAAG,KAAKX,OAAd;IACAW,EAAE,CAAC8C,aAAH,CAAiB,KAAKtD,OAAtB;EACH;;AAnFS;;AAqFdT,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAA,OAAO,CAAC6C,wCAAR,GAAmD,KAAnD"},"metadata":{},"sourceType":"script"}