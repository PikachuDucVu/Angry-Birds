{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShapeRenderer = exports.ShapeType = void 0;\n\nvar Mesh_1 = require(\"./Mesh\");\n\nvar Shader_1 = require(\"./Shader\");\n\nvar Utils_1 = require(\"./Utils\");\n\nvar Vector2_1 = require(\"./Vector2\");\n\nvar ShapeType;\n\n(function (ShapeType) {\n  ShapeType[ShapeType[\"Point\"] = 0] = \"Point\";\n  ShapeType[ShapeType[\"Line\"] = 1] = \"Line\";\n  ShapeType[ShapeType[\"Filled\"] = 4] = \"Filled\";\n})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));\n\nvar ShapeRenderer = /*#__PURE__*/function () {\n  function ShapeRenderer(context) {\n    var maxVertices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10920;\n\n    _classCallCheck(this, ShapeRenderer);\n\n    this.isDrawing = false;\n    this.shapeType = ShapeType.Filled;\n    this.color = new Utils_1.Color(1, 1, 1, 1);\n    this.vertexIndex = 0;\n    this.tmp = new Vector2_1.Vector2();\n    this.projectionValues = new Float32Array(16);\n    if (maxVertices > 10920) throw new Error(\"Can't have more than 10920 triangles per batch: \" + maxVertices);\n    this.context = context;\n    this.mesh = new Mesh_1.Mesh(context, [new Mesh_1.Position2Attribute(), new Mesh_1.ColorAttribute()], maxVertices, 0);\n    var gl = this.context;\n    this.srcColorBlend = gl.SRC_ALPHA;\n    this.srcAlphaBlend = gl.ONE;\n    this.dstBlend = gl.ONE_MINUS_SRC_ALPHA;\n    this.shader = Shader_1.Shader.newColored(gl);\n  }\n\n  _createClass(ShapeRenderer, [{\n    key: \"setProjection\",\n    value: function setProjection(projectionValues) {\n      this.projectionValues = projectionValues;\n    }\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      if (this.isDrawing) throw new Error('ShapeRenderer.begin() has already been called');\n      this.vertexIndex = 0;\n      this.isDrawing = true;\n      this.shader.bind();\n      this.shader.setUniform4x4f(Shader_1.Shader.MVP_MATRIX, this.projectionValues);\n      var gl = this.context;\n      gl.enable(gl.BLEND);\n      gl.blendFuncSeparate(this.srcColorBlend, this.dstBlend, this.srcAlphaBlend, this.dstBlend);\n    }\n  }, {\n    key: \"setBlendMode\",\n    value: function setBlendMode(srcColorBlend, srcAlphaBlend, dstBlend) {\n      this.srcColorBlend = srcColorBlend;\n      this.srcAlphaBlend = srcAlphaBlend;\n      this.dstBlend = dstBlend;\n\n      if (this.isDrawing) {\n        this.flush();\n        var gl = this.context;\n        gl.blendFuncSeparate(srcColorBlend, dstBlend, srcAlphaBlend, dstBlend);\n      }\n    }\n  }, {\n    key: \"setColor\",\n    value: function setColor(color) {\n      this.color.setFromColor(color);\n    }\n  }, {\n    key: \"setColorWith\",\n    value: function setColorWith(r, g, b, a) {\n      this.color.set(r, g, b, a);\n    }\n  }, {\n    key: \"point\",\n    value: function point(x, y) {\n      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      this.check(ShapeType.Point, 1);\n      if (color === null) color = this.color;\n      this.vertex(x, y, color);\n    }\n  }, {\n    key: \"line\",\n    value: function line(x, y, x2, y2) {\n      var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      this.check(ShapeType.Line, 2);\n      if (color === null) color = this.color;\n      this.vertex(x, y, color);\n      this.vertex(x2, y2, color);\n    }\n  }, {\n    key: \"triangle\",\n    value: function triangle(filled, x, y, x2, y2, x3, y3) {\n      var color = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n      var color2 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n      var color3 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n      this.check(filled ? ShapeType.Filled : ShapeType.Line, 3);\n      if (color === null) color = this.color;\n      if (color2 === null) color2 = this.color;\n      if (color3 === null) color3 = this.color;\n\n      if (filled) {\n        this.vertex(x, y, color);\n        this.vertex(x2, y2, color2);\n        this.vertex(x3, y3, color3);\n      } else {\n        this.vertex(x, y, color);\n        this.vertex(x2, y2, color2);\n        this.vertex(x2, y2, color);\n        this.vertex(x3, y3, color2);\n        this.vertex(x3, y3, color);\n        this.vertex(x, y, color2);\n      }\n    }\n  }, {\n    key: \"quad\",\n    value: function quad(filled, x, y, x2, y2, x3, y3, x4, y4) {\n      var color = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n      var color2 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;\n      var color3 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : null;\n      var color4 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : null;\n      this.check(filled ? ShapeType.Filled : ShapeType.Line, 3);\n      if (color === null) color = this.color;\n      if (color2 === null) color2 = this.color;\n      if (color3 === null) color3 = this.color;\n      if (color4 === null) color4 = this.color;\n\n      if (filled) {\n        this.vertex(x, y, color);\n        this.vertex(x2, y2, color2);\n        this.vertex(x3, y3, color3);\n        this.vertex(x3, y3, color3);\n        this.vertex(x4, y4, color4);\n        this.vertex(x, y, color);\n      } else {\n        this.vertex(x, y, color);\n        this.vertex(x2, y2, color2);\n        this.vertex(x2, y2, color2);\n        this.vertex(x3, y3, color3);\n        this.vertex(x3, y3, color3);\n        this.vertex(x4, y4, color4);\n        this.vertex(x4, y4, color4);\n        this.vertex(x, y, color);\n      }\n    }\n  }, {\n    key: \"rect\",\n    value: function rect(filled, x, y, width, height) {\n      var color = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n      this.quad(filled, x, y, x + width, y, x + width, y + height, x, y + height, color, color, color, color);\n    }\n  }, {\n    key: \"rectLine\",\n    value: function rectLine(filled, x1, y1, x2, y2, width) {\n      var color = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n      this.check(filled ? ShapeType.Filled : ShapeType.Line, 8);\n      if (color === null) color = this.color;\n      var t = this.tmp.set(y2 - y1, x1 - x2);\n      t.nor();\n      width *= 0.5;\n      var tx = t.x * width;\n      var ty = t.y * width;\n\n      if (!filled) {\n        this.vertex(x1 + tx, y1 + ty, color);\n        this.vertex(x1 - tx, y1 - ty, color);\n        this.vertex(x2 + tx, y2 + ty, color);\n        this.vertex(x2 - tx, y2 - ty, color);\n        this.vertex(x2 + tx, y2 + ty, color);\n        this.vertex(x1 + tx, y1 + ty, color);\n        this.vertex(x2 - tx, y2 - ty, color);\n        this.vertex(x1 - tx, y1 - ty, color);\n      } else {\n        this.vertex(x1 + tx, y1 + ty, color);\n        this.vertex(x1 - tx, y1 - ty, color);\n        this.vertex(x2 + tx, y2 + ty, color);\n        this.vertex(x2 - tx, y2 - ty, color);\n        this.vertex(x2 + tx, y2 + ty, color);\n        this.vertex(x1 - tx, y1 - ty, color);\n      }\n    }\n  }, {\n    key: \"x\",\n    value: function x(_x, y, size) {\n      this.line(_x - size, y - size, _x + size, y + size);\n      this.line(_x - size, y + size, _x + size, y - size);\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(polygonVertices, offset, count) {\n      var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      if (count < 3) throw new Error('Polygon must contain at least 3 vertices');\n      this.check(ShapeType.Line, count * 2);\n      if (color === null) color = this.color;\n      offset <<= 1;\n      count <<= 1;\n      var firstX = polygonVertices[offset];\n      var firstY = polygonVertices[offset + 1];\n      var last = offset + count;\n\n      for (var i = offset, n = offset + count - 2; i < n; i += 2) {\n        var x1 = polygonVertices[i];\n        var y1 = polygonVertices[i + 1];\n        var x2 = 0;\n        var y2 = 0;\n\n        if (i + 2 >= last) {\n          x2 = firstX;\n          y2 = firstY;\n        } else {\n          x2 = polygonVertices[i + 2];\n          y2 = polygonVertices[i + 3];\n        }\n\n        this.vertex(x1, y1, color);\n        this.vertex(x2, y2, color);\n      }\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(filled, x, y, radius) {\n      var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var segments = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      if (segments === 0) segments = Math.max(1, 6 * Utils_1.MathUtils.cbrt(radius) | 0);\n      if (segments <= 0) throw new Error('segments must be > 0.');\n      if (color === null) color = this.color;\n      var angle = 2 * Utils_1.MathUtils.PI / segments;\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var cx = radius,\n          cy = 0;\n\n      if (!filled) {\n        this.check(ShapeType.Line, segments * 2 + 2);\n\n        for (var i = 0; i < segments; i++) {\n          this.vertex(x + cx, y + cy, color);\n          var temp = cx;\n          cx = cos * cx - sin * cy;\n          cy = sin * temp + cos * cy;\n          this.vertex(x + cx, y + cy, color);\n        } // Ensure the last segment is identical to the first.\n\n\n        this.vertex(x + cx, y + cy, color);\n      } else {\n        this.check(ShapeType.Filled, segments * 3 + 3);\n        segments--;\n\n        for (var _i = 0; _i < segments; _i++) {\n          this.vertex(x, y, color);\n          this.vertex(x + cx, y + cy, color);\n          var _temp = cx;\n          cx = cos * cx - sin * cy;\n          cy = sin * _temp + cos * cy;\n          this.vertex(x + cx, y + cy, color);\n        } // Ensure the last segment is identical to the first.\n\n\n        this.vertex(x, y, color);\n        this.vertex(x + cx, y + cy, color);\n      }\n\n      cx = radius;\n      cy = 0;\n      this.vertex(x + cx, y + cy, color);\n    }\n  }, {\n    key: \"curve\",\n    value: function curve(x1, y1, cx1, cy1, cx2, cy2, x2, y2, segments) {\n      var color = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n      this.check(ShapeType.Line, segments * 2 + 2);\n      if (color === null) color = this.color; // Algorithm from: http://www.antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION\n\n      var subdiv_step = 1 / segments;\n      var subdiv_step2 = subdiv_step * subdiv_step;\n      var subdiv_step3 = subdiv_step * subdiv_step * subdiv_step;\n      var pre1 = 3 * subdiv_step;\n      var pre2 = 3 * subdiv_step2;\n      var pre4 = 6 * subdiv_step2;\n      var pre5 = 6 * subdiv_step3;\n      var tmp1x = x1 - cx1 * 2 + cx2;\n      var tmp1y = y1 - cy1 * 2 + cy2;\n      var tmp2x = (cx1 - cx2) * 3 - x1 + x2;\n      var tmp2y = (cy1 - cy2) * 3 - y1 + y2;\n      var fx = x1;\n      var fy = y1;\n      var dfx = (cx1 - x1) * pre1 + tmp1x * pre2 + tmp2x * subdiv_step3;\n      var dfy = (cy1 - y1) * pre1 + tmp1y * pre2 + tmp2y * subdiv_step3;\n      var ddfx = tmp1x * pre4 + tmp2x * pre5;\n      var ddfy = tmp1y * pre4 + tmp2y * pre5;\n      var dddfx = tmp2x * pre5;\n      var dddfy = tmp2y * pre5;\n\n      while (segments-- > 0) {\n        this.vertex(fx, fy, color);\n        fx += dfx;\n        fy += dfy;\n        dfx += ddfx;\n        dfy += ddfy;\n        ddfx += dddfx;\n        ddfy += dddfy;\n        this.vertex(fx, fy, color);\n      }\n\n      this.vertex(fx, fy, color);\n      this.vertex(x2, y2, color);\n    }\n  }, {\n    key: \"vertex\",\n    value: function vertex(x, y, color) {\n      var idx = this.vertexIndex;\n      var vertices = this.mesh.getVertices();\n      vertices[idx++] = x;\n      vertices[idx++] = y;\n      vertices[idx++] = color.r;\n      vertices[idx++] = color.g;\n      vertices[idx++] = color.b;\n      vertices[idx++] = color.a;\n      this.vertexIndex = idx;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (!this.isDrawing) throw new Error('ShapeRenderer.begin() has not been called');\n      this.flush();\n      var gl = this.context;\n      gl.disable(gl.BLEND);\n      this.isDrawing = false;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (this.vertexIndex === 0) return;\n      this.mesh.setVerticesLength(this.vertexIndex);\n      this.mesh.draw(this.shader, this.shapeType);\n      this.vertexIndex = 0;\n    }\n  }, {\n    key: \"check\",\n    value: function check(shapeType, numVertices) {\n      if (!this.isDrawing) throw new Error('ShapeRenderer.begin() has not been called');\n\n      if (this.shapeType === shapeType) {\n        if (this.mesh.maxVertices() - this.mesh.numVertices() < numVertices) this.flush();else return;\n      } else {\n        this.flush();\n        this.shapeType = shapeType;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.mesh.dispose();\n    }\n  }]);\n\n  return ShapeRenderer;\n}();\n\nexports.ShapeRenderer = ShapeRenderer;","map":{"version":3,"names":["Object","defineProperty","exports","value","ShapeRenderer","ShapeType","Mesh_1","require","Shader_1","Utils_1","Vector2_1","context","maxVertices","isDrawing","shapeType","Filled","color","Color","vertexIndex","tmp","Vector2","projectionValues","Float32Array","Error","mesh","Mesh","Position2Attribute","ColorAttribute","gl","srcColorBlend","SRC_ALPHA","srcAlphaBlend","ONE","dstBlend","ONE_MINUS_SRC_ALPHA","shader","Shader","newColored","bind","setUniform4x4f","MVP_MATRIX","enable","BLEND","blendFuncSeparate","flush","setFromColor","r","g","b","a","set","x","y","check","Point","vertex","x2","y2","Line","filled","x3","y3","color2","color3","x4","y4","color4","width","height","quad","x1","y1","t","nor","tx","ty","size","line","polygonVertices","offset","count","firstX","firstY","last","i","n","radius","segments","Math","max","MathUtils","cbrt","angle","PI","cos","sin","cx","cy","temp","cx1","cy1","cx2","cy2","subdiv_step","subdiv_step2","subdiv_step3","pre1","pre2","pre4","pre5","tmp1x","tmp1y","tmp2x","tmp2y","fx","fy","dfx","dfy","ddfx","ddfy","dddfx","dddfy","idx","vertices","getVertices","disable","setVerticesLength","draw","numVertices","dispose"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/ShapeRenderer.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ShapeRenderer = exports.ShapeType = void 0;\r\nconst Mesh_1 = require(\"./Mesh\");\r\nconst Shader_1 = require(\"./Shader\");\r\nconst Utils_1 = require(\"./Utils\");\r\nconst Vector2_1 = require(\"./Vector2\");\r\nvar ShapeType;\r\n(function (ShapeType) {\r\n    ShapeType[ShapeType[\"Point\"] = 0] = \"Point\";\r\n    ShapeType[ShapeType[\"Line\"] = 1] = \"Line\";\r\n    ShapeType[ShapeType[\"Filled\"] = 4] = \"Filled\";\r\n})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));\r\nclass ShapeRenderer {\r\n    constructor(context, maxVertices = 10920) {\r\n        this.isDrawing = false;\r\n        this.shapeType = ShapeType.Filled;\r\n        this.color = new Utils_1.Color(1, 1, 1, 1);\r\n        this.vertexIndex = 0;\r\n        this.tmp = new Vector2_1.Vector2();\r\n        this.projectionValues = new Float32Array(16);\r\n        if (maxVertices > 10920)\r\n            throw new Error(\"Can't have more than 10920 triangles per batch: \" + maxVertices);\r\n        this.context = context;\r\n        this.mesh = new Mesh_1.Mesh(context, [new Mesh_1.Position2Attribute(), new Mesh_1.ColorAttribute()], maxVertices, 0);\r\n        let gl = this.context;\r\n        this.srcColorBlend = gl.SRC_ALPHA;\r\n        this.srcAlphaBlend = gl.ONE;\r\n        this.dstBlend = gl.ONE_MINUS_SRC_ALPHA;\r\n        this.shader = Shader_1.Shader.newColored(gl);\r\n    }\r\n    setProjection(projectionValues) {\r\n        this.projectionValues = projectionValues;\r\n    }\r\n    begin() {\r\n        if (this.isDrawing)\r\n            throw new Error('ShapeRenderer.begin() has already been called');\r\n        this.vertexIndex = 0;\r\n        this.isDrawing = true;\r\n        this.shader.bind();\r\n        this.shader.setUniform4x4f(Shader_1.Shader.MVP_MATRIX, this.projectionValues);\r\n        let gl = this.context;\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFuncSeparate(this.srcColorBlend, this.dstBlend, this.srcAlphaBlend, this.dstBlend);\r\n    }\r\n    setBlendMode(srcColorBlend, srcAlphaBlend, dstBlend) {\r\n        this.srcColorBlend = srcColorBlend;\r\n        this.srcAlphaBlend = srcAlphaBlend;\r\n        this.dstBlend = dstBlend;\r\n        if (this.isDrawing) {\r\n            this.flush();\r\n            let gl = this.context;\r\n            gl.blendFuncSeparate(srcColorBlend, dstBlend, srcAlphaBlend, dstBlend);\r\n        }\r\n    }\r\n    setColor(color) {\r\n        this.color.setFromColor(color);\r\n    }\r\n    setColorWith(r, g, b, a) {\r\n        this.color.set(r, g, b, a);\r\n    }\r\n    point(x, y, color = null) {\r\n        this.check(ShapeType.Point, 1);\r\n        if (color === null)\r\n            color = this.color;\r\n        this.vertex(x, y, color);\r\n    }\r\n    line(x, y, x2, y2, color = null) {\r\n        this.check(ShapeType.Line, 2);\r\n        if (color === null)\r\n            color = this.color;\r\n        this.vertex(x, y, color);\r\n        this.vertex(x2, y2, color);\r\n    }\r\n    triangle(filled, x, y, x2, y2, x3, y3, color = null, color2 = null, color3 = null) {\r\n        this.check(filled ? ShapeType.Filled : ShapeType.Line, 3);\r\n        if (color === null)\r\n            color = this.color;\r\n        if (color2 === null)\r\n            color2 = this.color;\r\n        if (color3 === null)\r\n            color3 = this.color;\r\n        if (filled) {\r\n            this.vertex(x, y, color);\r\n            this.vertex(x2, y2, color2);\r\n            this.vertex(x3, y3, color3);\r\n        }\r\n        else {\r\n            this.vertex(x, y, color);\r\n            this.vertex(x2, y2, color2);\r\n            this.vertex(x2, y2, color);\r\n            this.vertex(x3, y3, color2);\r\n            this.vertex(x3, y3, color);\r\n            this.vertex(x, y, color2);\r\n        }\r\n    }\r\n    quad(filled, x, y, x2, y2, x3, y3, x4, y4, color = null, color2 = null, color3 = null, color4 = null) {\r\n        this.check(filled ? ShapeType.Filled : ShapeType.Line, 3);\r\n        if (color === null)\r\n            color = this.color;\r\n        if (color2 === null)\r\n            color2 = this.color;\r\n        if (color3 === null)\r\n            color3 = this.color;\r\n        if (color4 === null)\r\n            color4 = this.color;\r\n        if (filled) {\r\n            this.vertex(x, y, color);\r\n            this.vertex(x2, y2, color2);\r\n            this.vertex(x3, y3, color3);\r\n            this.vertex(x3, y3, color3);\r\n            this.vertex(x4, y4, color4);\r\n            this.vertex(x, y, color);\r\n        }\r\n        else {\r\n            this.vertex(x, y, color);\r\n            this.vertex(x2, y2, color2);\r\n            this.vertex(x2, y2, color2);\r\n            this.vertex(x3, y3, color3);\r\n            this.vertex(x3, y3, color3);\r\n            this.vertex(x4, y4, color4);\r\n            this.vertex(x4, y4, color4);\r\n            this.vertex(x, y, color);\r\n        }\r\n    }\r\n    rect(filled, x, y, width, height, color = null) {\r\n        this.quad(filled, x, y, x + width, y, x + width, y + height, x, y + height, color, color, color, color);\r\n    }\r\n    rectLine(filled, x1, y1, x2, y2, width, color = null) {\r\n        this.check(filled ? ShapeType.Filled : ShapeType.Line, 8);\r\n        if (color === null)\r\n            color = this.color;\r\n        let t = this.tmp.set(y2 - y1, x1 - x2);\r\n        t.nor();\r\n        width *= 0.5;\r\n        let tx = t.x * width;\r\n        let ty = t.y * width;\r\n        if (!filled) {\r\n            this.vertex(x1 + tx, y1 + ty, color);\r\n            this.vertex(x1 - tx, y1 - ty, color);\r\n            this.vertex(x2 + tx, y2 + ty, color);\r\n            this.vertex(x2 - tx, y2 - ty, color);\r\n            this.vertex(x2 + tx, y2 + ty, color);\r\n            this.vertex(x1 + tx, y1 + ty, color);\r\n            this.vertex(x2 - tx, y2 - ty, color);\r\n            this.vertex(x1 - tx, y1 - ty, color);\r\n        }\r\n        else {\r\n            this.vertex(x1 + tx, y1 + ty, color);\r\n            this.vertex(x1 - tx, y1 - ty, color);\r\n            this.vertex(x2 + tx, y2 + ty, color);\r\n            this.vertex(x2 - tx, y2 - ty, color);\r\n            this.vertex(x2 + tx, y2 + ty, color);\r\n            this.vertex(x1 - tx, y1 - ty, color);\r\n        }\r\n    }\r\n    x(x, y, size) {\r\n        this.line(x - size, y - size, x + size, y + size);\r\n        this.line(x - size, y + size, x + size, y - size);\r\n    }\r\n    polygon(polygonVertices, offset, count, color = null) {\r\n        if (count < 3)\r\n            throw new Error('Polygon must contain at least 3 vertices');\r\n        this.check(ShapeType.Line, count * 2);\r\n        if (color === null)\r\n            color = this.color;\r\n        offset <<= 1;\r\n        count <<= 1;\r\n        let firstX = polygonVertices[offset];\r\n        let firstY = polygonVertices[offset + 1];\r\n        let last = offset + count;\r\n        for (let i = offset, n = offset + count - 2; i < n; i += 2) {\r\n            let x1 = polygonVertices[i];\r\n            let y1 = polygonVertices[i + 1];\r\n            let x2 = 0;\r\n            let y2 = 0;\r\n            if (i + 2 >= last) {\r\n                x2 = firstX;\r\n                y2 = firstY;\r\n            }\r\n            else {\r\n                x2 = polygonVertices[i + 2];\r\n                y2 = polygonVertices[i + 3];\r\n            }\r\n            this.vertex(x1, y1, color);\r\n            this.vertex(x2, y2, color);\r\n        }\r\n    }\r\n    circle(filled, x, y, radius, color = null, segments = 0) {\r\n        if (segments === 0)\r\n            segments = Math.max(1, (6 * Utils_1.MathUtils.cbrt(radius)) | 0);\r\n        if (segments <= 0)\r\n            throw new Error('segments must be > 0.');\r\n        if (color === null)\r\n            color = this.color;\r\n        let angle = (2 * Utils_1.MathUtils.PI) / segments;\r\n        let cos = Math.cos(angle);\r\n        let sin = Math.sin(angle);\r\n        let cx = radius, cy = 0;\r\n        if (!filled) {\r\n            this.check(ShapeType.Line, segments * 2 + 2);\r\n            for (let i = 0; i < segments; i++) {\r\n                this.vertex(x + cx, y + cy, color);\r\n                let temp = cx;\r\n                cx = cos * cx - sin * cy;\r\n                cy = sin * temp + cos * cy;\r\n                this.vertex(x + cx, y + cy, color);\r\n            }\r\n            // Ensure the last segment is identical to the first.\r\n            this.vertex(x + cx, y + cy, color);\r\n        }\r\n        else {\r\n            this.check(ShapeType.Filled, segments * 3 + 3);\r\n            segments--;\r\n            for (let i = 0; i < segments; i++) {\r\n                this.vertex(x, y, color);\r\n                this.vertex(x + cx, y + cy, color);\r\n                let temp = cx;\r\n                cx = cos * cx - sin * cy;\r\n                cy = sin * temp + cos * cy;\r\n                this.vertex(x + cx, y + cy, color);\r\n            }\r\n            // Ensure the last segment is identical to the first.\r\n            this.vertex(x, y, color);\r\n            this.vertex(x + cx, y + cy, color);\r\n        }\r\n        cx = radius;\r\n        cy = 0;\r\n        this.vertex(x + cx, y + cy, color);\r\n    }\r\n    curve(x1, y1, cx1, cy1, cx2, cy2, x2, y2, segments, color = null) {\r\n        this.check(ShapeType.Line, segments * 2 + 2);\r\n        if (color === null)\r\n            color = this.color;\r\n        // Algorithm from: http://www.antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION\r\n        let subdiv_step = 1 / segments;\r\n        let subdiv_step2 = subdiv_step * subdiv_step;\r\n        let subdiv_step3 = subdiv_step * subdiv_step * subdiv_step;\r\n        let pre1 = 3 * subdiv_step;\r\n        let pre2 = 3 * subdiv_step2;\r\n        let pre4 = 6 * subdiv_step2;\r\n        let pre5 = 6 * subdiv_step3;\r\n        let tmp1x = x1 - cx1 * 2 + cx2;\r\n        let tmp1y = y1 - cy1 * 2 + cy2;\r\n        let tmp2x = (cx1 - cx2) * 3 - x1 + x2;\r\n        let tmp2y = (cy1 - cy2) * 3 - y1 + y2;\r\n        let fx = x1;\r\n        let fy = y1;\r\n        let dfx = (cx1 - x1) * pre1 + tmp1x * pre2 + tmp2x * subdiv_step3;\r\n        let dfy = (cy1 - y1) * pre1 + tmp1y * pre2 + tmp2y * subdiv_step3;\r\n        let ddfx = tmp1x * pre4 + tmp2x * pre5;\r\n        let ddfy = tmp1y * pre4 + tmp2y * pre5;\r\n        let dddfx = tmp2x * pre5;\r\n        let dddfy = tmp2y * pre5;\r\n        while (segments-- > 0) {\r\n            this.vertex(fx, fy, color);\r\n            fx += dfx;\r\n            fy += dfy;\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            this.vertex(fx, fy, color);\r\n        }\r\n        this.vertex(fx, fy, color);\r\n        this.vertex(x2, y2, color);\r\n    }\r\n    vertex(x, y, color) {\r\n        let idx = this.vertexIndex;\r\n        let vertices = this.mesh.getVertices();\r\n        vertices[idx++] = x;\r\n        vertices[idx++] = y;\r\n        vertices[idx++] = color.r;\r\n        vertices[idx++] = color.g;\r\n        vertices[idx++] = color.b;\r\n        vertices[idx++] = color.a;\r\n        this.vertexIndex = idx;\r\n    }\r\n    end() {\r\n        if (!this.isDrawing)\r\n            throw new Error('ShapeRenderer.begin() has not been called');\r\n        this.flush();\r\n        let gl = this.context;\r\n        gl.disable(gl.BLEND);\r\n        this.isDrawing = false;\r\n    }\r\n    flush() {\r\n        if (this.vertexIndex === 0)\r\n            return;\r\n        this.mesh.setVerticesLength(this.vertexIndex);\r\n        this.mesh.draw(this.shader, this.shapeType);\r\n        this.vertexIndex = 0;\r\n    }\r\n    check(shapeType, numVertices) {\r\n        if (!this.isDrawing)\r\n            throw new Error('ShapeRenderer.begin() has not been called');\r\n        if (this.shapeType === shapeType) {\r\n            if (this.mesh.maxVertices() - this.mesh.numVertices() < numVertices)\r\n                this.flush();\r\n            else\r\n                return;\r\n        }\r\n        else {\r\n            this.flush();\r\n            this.shapeType = shapeType;\r\n        }\r\n    }\r\n    dispose() {\r\n        this.mesh.dispose();\r\n    }\r\n}\r\nexports.ShapeRenderer = ShapeRenderer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}