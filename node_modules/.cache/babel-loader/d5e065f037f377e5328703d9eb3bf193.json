{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fastbitset_1 = __importDefault(require(\"fastbitset\"));\n\nvar ComponentMapper_1 = require(\"./ComponentMapper\");\n\nvar World = /*#__PURE__*/function () {\n  function World() {\n    _classCallCheck(this, World);\n\n    this.index = 0;\n    this.mappers = {};\n    this.componentBitsMap = [];\n    this.componentIndices = new Map();\n    this.currentComponentIndex = 0;\n    this.activeSystems = [];\n    this.passiveSystems = [];\n    this.injectionRegistry = {};\n    this.delta = 0;\n  }\n\n  _createClass(World, [{\n    key: \"getNewId\",\n    value: function getNewId() {\n      return this.index++;\n    }\n  }, {\n    key: \"createEntity\",\n    value: function createEntity() {\n      var id = this.getNewId();\n      return id;\n    }\n  }, {\n    key: \"getComponentBits\",\n    value: function getComponentBits(entityId) {\n      if (!this.componentBitsMap[entityId]) {\n        this.componentBitsMap[entityId] = new fastbitset_1.default();\n      }\n\n      return this.componentBitsMap[entityId];\n    }\n  }, {\n    key: \"getMapper\",\n    value: function getMapper(type) {\n      var typeIndex = this.getComponentIndex(type);\n      return this.getMapperByIndex(typeIndex);\n    }\n  }, {\n    key: \"getMapperByIndex\",\n    value: function getMapperByIndex(typeIndex) {\n      if (!this.mappers[typeIndex]) {\n        this.mappers[typeIndex] = new ComponentMapper_1.ComponentMapper();\n      }\n\n      return this.mappers[typeIndex];\n    }\n  }, {\n    key: \"getComponentIndex\",\n    value: function getComponentIndex(type) {\n      var index = this.componentIndices.get(type);\n\n      if (index === undefined) {\n        index = this.currentComponentIndex++;\n        this.componentIndices.set(type, index);\n      }\n\n      return index;\n    }\n  }, {\n    key: \"createEntityByArchetype\",\n    value: function createEntityByArchetype(archetype) {\n      var _this = this;\n\n      var id = this.getNewId();\n      archetype.componentTypes.forEach(function (type) {\n        var component = new type();\n\n        if (!archetype.componentBitsInitialized) {\n          archetype.componentBits.add(_this.getComponentIndex(type));\n        }\n\n        _this.addComponent(id, component, false);\n      });\n      this.componentBitsMap[id] = archetype.componentBits;\n      return id;\n    }\n  }, {\n    key: \"addComponent\",\n    value: function addComponent(entityId, component) {\n      var updateComponentBits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var typeIndex = this.getComponentIndex(component.constructor);\n      var mapper = this.getMapperByIndex(typeIndex);\n      mapper.add(entityId, component);\n      if (updateComponentBits) this.getComponentBits(entityId).add(typeIndex);\n      return component;\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(entityId, type) {\n      var mapper = this.getMapper(type);\n      return mapper.get(entityId);\n    }\n  }, {\n    key: \"getEntities\",\n    value: function getEntities(componentBits, iterator) {\n      for (var i = 0; i < this.componentBitsMap.length; i++) {\n        if (this.componentBitsMap[i]) {\n          var entityComponentBits = this.componentBitsMap[i];\n\n          if (componentBits.union_size(entityComponentBits) === entityComponentBits.size()) {\n            iterator(i);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"addSystem\",\n    value: function addSystem(system) {\n      var active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      active ? this.activeSystems.push(system) : this.passiveSystems.push(system);\n      system.setWorld(this);\n      this.injectMapper(system);\n      this.inject(system);\n      system.initialized();\n    }\n  }, {\n    key: \"injectMapper\",\n    value: function injectMapper(system) {\n      var type = system.constructor;\n      var injectPoints = type.__injectMapper__ || {};\n\n      for (var injectKey in injectPoints) {\n        var componentType = injectPoints[injectKey];\n        system[injectKey] = this.getMapper(componentType);\n      }\n    }\n  }, {\n    key: \"register\",\n    value: function register(name, value) {\n      this.injectionRegistry[name] = value;\n    }\n  }, {\n    key: \"inject\",\n    value: function inject(object) {\n      var type = object.constructor;\n      var injectPoints = type.__inject__ || {};\n\n      for (var injectKey in injectPoints) {\n        var injectName = injectPoints[injectKey];\n        object[injectKey] = this.injectionRegistry[injectName];\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _iterator = _createForOfIteratorHelper(this.activeSystems),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var system = _step.value;\n          system.dispose();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.passiveSystems),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _system = _step2.value;\n\n          _system.dispose();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"setDelta\",\n    value: function setDelta(delta) {\n      this.delta = delta;\n    }\n  }, {\n    key: \"processActiveSystem\",\n    value: function processActiveSystem() {\n      var _iterator3 = _createForOfIteratorHelper(this.activeSystems),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var system = _step3.value;\n          system.process();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"processPassiveSystem\",\n    value: function processPassiveSystem() {\n      var _iterator4 = _createForOfIteratorHelper(this.passiveSystems),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var system = _step4.value;\n          system.process();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"deleteEntity\",\n    value: function deleteEntity(entityId) {\n      for (var type in this.mappers) {\n        this.mappers[type].remove(entityId);\n      }\n\n      delete this.componentBitsMap[entityId];\n    }\n  }, {\n    key: \"isEntityActive\",\n    value: function isEntityActive(entityId) {\n      return !!this.componentBitsMap[entityId];\n    }\n  }]);\n\n  return World;\n}();\n\nexports.default = World;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","fastbitset_1","require","ComponentMapper_1","World","index","mappers","componentBitsMap","componentIndices","Map","currentComponentIndex","activeSystems","passiveSystems","injectionRegistry","delta","id","getNewId","entityId","default","type","typeIndex","getComponentIndex","getMapperByIndex","ComponentMapper","get","undefined","set","archetype","componentTypes","forEach","component","componentBitsInitialized","componentBits","add","addComponent","updateComponentBits","constructor","mapper","getComponentBits","getMapper","iterator","i","length","entityComponentBits","union_size","size","system","active","push","setWorld","injectMapper","inject","initialized","injectPoints","__injectMapper__","injectKey","componentType","name","object","__inject__","injectName","dispose","process","remove"],"sources":["D:/projects/test-game/node_modules/flat-ecs/lib/World.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fastbitset_1 = __importDefault(require(\"fastbitset\"));\nconst ComponentMapper_1 = require(\"./ComponentMapper\");\nclass World {\n    constructor() {\n        this.index = 0;\n        this.mappers = {};\n        this.componentBitsMap = [];\n        this.componentIndices = new Map();\n        this.currentComponentIndex = 0;\n        this.activeSystems = [];\n        this.passiveSystems = [];\n        this.injectionRegistry = {};\n        this.delta = 0;\n    }\n    getNewId() {\n        return this.index++;\n    }\n    createEntity() {\n        const id = this.getNewId();\n        return id;\n    }\n    getComponentBits(entityId) {\n        if (!this.componentBitsMap[entityId]) {\n            this.componentBitsMap[entityId] = new fastbitset_1.default();\n        }\n        return this.componentBitsMap[entityId];\n    }\n    getMapper(type) {\n        const typeIndex = this.getComponentIndex(type);\n        return this.getMapperByIndex(typeIndex);\n    }\n    getMapperByIndex(typeIndex) {\n        if (!this.mappers[typeIndex]) {\n            this.mappers[typeIndex] = new ComponentMapper_1.ComponentMapper();\n        }\n        return this.mappers[typeIndex];\n    }\n    getComponentIndex(type) {\n        let index = this.componentIndices.get(type);\n        if (index === undefined) {\n            index = this.currentComponentIndex++;\n            this.componentIndices.set(type, index);\n        }\n        return index;\n    }\n    createEntityByArchetype(archetype) {\n        const id = this.getNewId();\n        archetype.componentTypes.forEach(type => {\n            const component = new type();\n            if (!archetype.componentBitsInitialized) {\n                archetype.componentBits.add(this.getComponentIndex(type));\n            }\n            this.addComponent(id, component, false);\n        });\n        this.componentBitsMap[id] = archetype.componentBits;\n        return id;\n    }\n    addComponent(entityId, component, updateComponentBits = true) {\n        const typeIndex = this.getComponentIndex(component.constructor);\n        const mapper = this.getMapperByIndex(typeIndex);\n        mapper.add(entityId, component);\n        if (updateComponentBits)\n            this.getComponentBits(entityId).add(typeIndex);\n        return component;\n    }\n    getComponent(entityId, type) {\n        const mapper = this.getMapper(type);\n        return mapper.get(entityId);\n    }\n    getEntities(componentBits, iterator) {\n        for (let i = 0; i < this.componentBitsMap.length; i++) {\n            if (this.componentBitsMap[i]) {\n                const entityComponentBits = this.componentBitsMap[i];\n                if (componentBits.union_size(entityComponentBits) === entityComponentBits.size()) {\n                    iterator(i);\n                }\n            }\n        }\n    }\n    addSystem(system, active = true) {\n        active ? this.activeSystems.push(system) : this.passiveSystems.push(system);\n        system.setWorld(this);\n        this.injectMapper(system);\n        this.inject(system);\n        system.initialized();\n    }\n    injectMapper(system) {\n        const type = system.constructor;\n        const injectPoints = type.__injectMapper__ || {};\n        for (let injectKey in injectPoints) {\n            const componentType = injectPoints[injectKey];\n            system[injectKey] = this.getMapper(componentType);\n        }\n    }\n    register(name, value) {\n        this.injectionRegistry[name] = value;\n    }\n    inject(object) {\n        const type = object.constructor;\n        const injectPoints = type.__inject__ || {};\n        for (let injectKey in injectPoints) {\n            const injectName = injectPoints[injectKey];\n            object[injectKey] = this.injectionRegistry[injectName];\n        }\n    }\n    dispose() {\n        for (let system of this.activeSystems) {\n            system.dispose();\n        }\n        for (let system of this.passiveSystems) {\n            system.dispose();\n        }\n    }\n    setDelta(delta) {\n        this.delta = delta;\n    }\n    processActiveSystem() {\n        for (let system of this.activeSystems) {\n            system.process();\n        }\n    }\n    processPassiveSystem() {\n        for (let system of this.passiveSystems) {\n            system.process();\n        }\n    }\n    deleteEntity(entityId) {\n        for (let type in this.mappers) {\n            this.mappers[type].remove(entityId);\n        }\n        delete this.componentBitsMap[entityId];\n    }\n    isEntityActive(entityId) {\n        return !!this.componentBitsMap[entityId];\n    }\n}\nexports.default = World;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}