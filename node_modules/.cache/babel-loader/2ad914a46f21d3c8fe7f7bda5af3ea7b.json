{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Vector2, Color } from \"gdxts\";\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const border = await Texture.load(gl, \"./border.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const black = new Color(0, 0, 0, 1);\n  let map = new Array(); //tetromino\n\n  const squareBlock = [[1, 1], [1, 1]]; //I\n\n  const iBlock2 = [[1], [1], [1], [1]]; //J\n\n  const jBlock1 = [[1, 0, 0], [1, 1, 1]];\n  const jBlock2 = [[1, 1], [1, 0], [1, 0]];\n  const jBlock3 = [[1, 1, 1], [0, 0, 1]]; //L\n\n  const LBlock1 = [[0, 0, 1], [1, 1, 1]];\n  const LBlock2 = [[1, 1], [0, 1], [0, 1]]; //s\n\n  const sBlock1 = [[0, 1, 1], [1, 1, 0]];\n  const sBlock2 = [[1, 0], [1, 1], [0, 1]]; //t\n\n  const tBlock1 = [[0, 1, 0], [1, 1, 1]];\n  const tBlock2 = [[1, 0], [1, 1], [1, 0]];\n  const tBlock3 = [[1, 1, 1], [0, 1, 0]];\n  const tBlock4 = [[0, 1], [1, 1], [0, 1]]; //z\n\n  const zBlock1 = [[1, 1, 0], [0, 1, 1]];\n  const zBlock2 = [[1, 0], [1, 1], [0, 1]]; //config game\n\n  let blockPosition = new Vector2(83, 83);\n  let currentBlock = squareBlock; // error multidimensional array\n\n  let timeDelay = 0;\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // draw the map\n\n\n  for (let row = 0; row < 24; row++) {\n    //12x24\n    map[row] = new Array();\n\n    for (let col = 0; col < 12; col++) {\n      if (row >= 1) {\n        map[row].push(0);\n      } else {\n        map[row].push(1);\n      }\n    }\n\n    for (let col = 0; col < map[row].length; col++) {\n      map[row][0] = 1;\n      map[row][11] = 1;\n    }\n  }\n\n  function blockTracking() {\n    for (let row = 0; row < currentBlock.length; row++) {\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[22 - row][5 + col] = currentBlock[row][col];\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0 && map[row][col] !== 9) {\n          batch.draw(block, col * blockPosition.x, row * blockPosition.y, 83, 83);\n        } // scan to draw\n\n      }\n    }\n  }\n\n  window.addEventListener(\"keypress\", function (e) {\n    if (e) {}\n  });\n  blockTracking();\n  createGameLoop(delta => {\n    timeDelay += delta;\n\n    if (timeDelay >= 1) {\n      timeDelay = 0;\n\n      for (let row = 1; row < map.length; row++) {\n        for (let col = 1; col < map[row].length - 1; col++) {\n          if (map[row - 1][col] === 0 && map[row][col] !== 0) {\n            map[row - 1][col] = 1;\n            map[row - 1][col + 1] = 1;\n            map[row + 1][col] = 0;\n            map[row + 1][col + 1] = 0;\n          } else {\n            console.log(\"dcmdcm\");\n          }\n        }\n      }\n\n      console.log(map);\n    }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end(); //draw border\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin(); // batch.draw(background, 0, 0, 1000, 2000);\n\n    drawTetromino(); // batch.draw(border, 0, 0, 1000, 2000);\n\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\ninit(); // init2();","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Vector2","Color","init","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","background","load","border","bgRight","block","black","map","Array","squareBlock","iBlock2","jBlock1","jBlock2","jBlock3","LBlock1","LBlock2","sBlock1","sBlock2","tBlock1","tBlock2","tBlock3","tBlock4","zBlock1","zBlock2","blockPosition","currentBlock","timeDelay","getRandomInt","min","max","Math","floor","random","row","col","push","length","blockTracking","drawTetromino","draw","x","y","window","addEventListener","e","delta","console","log","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\n  createGameLoop,\n  createStage,\n  createViewport,\n  PolygonBatch,\n  ShapeRenderer,\n  Texture,\n  Vector2,\n  BitmapFont,\n  TextureRegion,\n  Color,\n} from \"gdxts\";\n\nimport { init2 } from \"./index2\";\n\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const border = await Texture.load(gl, \"./border.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const black = new Color(0, 0, 0, 1);\n\n  let map = new Array();\n\n  //tetromino\n  const squareBlock = [\n    [1, 1],\n    [1, 1],\n  ];\n  //I\n  const iBlock2 = [[1], [1], [1], [1]];\n\n  //J\n  const jBlock1 = [\n    [1, 0, 0],\n    [1, 1, 1],\n  ];\n  const jBlock2 = [\n    [1, 1],\n    [1, 0],\n    [1, 0],\n  ];\n  const jBlock3 = [\n    [1, 1, 1],\n    [0, 0, 1],\n  ];\n  //L\n  const LBlock1 = [\n    [0, 0, 1],\n    [1, 1, 1],\n  ];\n  const LBlock2 = [\n    [1, 1],\n    [0, 1],\n    [0, 1],\n  ];\n  //s\n  const sBlock1 = [\n    [0, 1, 1],\n    [1, 1, 0],\n  ];\n  const sBlock2 = [\n    [1, 0],\n    [1, 1],\n    [0, 1],\n  ];\n  //t\n  const tBlock1 = [\n    [0, 1, 0],\n    [1, 1, 1],\n  ];\n  const tBlock2 = [\n    [1, 0],\n    [1, 1],\n    [1, 0],\n  ];\n  const tBlock3 = [\n    [1, 1, 1],\n    [0, 1, 0],\n  ];\n  const tBlock4 = [\n    [0, 1],\n    [1, 1],\n    [0, 1],\n  ];\n  //z\n  const zBlock1 = [\n    [1, 1, 0],\n    [0, 1, 1],\n  ];\n  const zBlock2 = [\n    [1, 0],\n    [1, 1],\n    [0, 1],\n  ];\n\n  //config game\n\n  let blockPosition = new Vector2(83, 83);\n  let currentBlock = squareBlock; // error multidimensional array\n  let timeDelay = 0;\n\n  function getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n  // draw the map\n  for (let row = 0; row < 24; row++) {\n    //12x24\n    map[row] = new Array();\n    for (let col = 0; col < 12; col++) {\n      if (row >= 1) {\n        map[row].push(0);\n      } else {\n        map[row].push(1);\n      }\n    }\n    for (let col = 0; col < map[row].length; col++) {\n      map[row][0] = 1;\n      map[row][11] = 1;\n    }\n  }\n\n  function blockTracking() {\n    for (let row = 0; row < currentBlock.length; row++) {\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[22 - row][5 + col] = currentBlock[row][col];\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0 && map[row][col] !== 9) {\n          batch.draw(\n            block,\n            col * blockPosition.x,\n            row * blockPosition.y,\n            83,\n            83\n          );\n        } // scan to draw\n      }\n    }\n  }\n\n  window.addEventListener(\"keypress\", function (e) {\n    if (e) {\n    }\n  });\n\n  blockTracking();\n  createGameLoop((delta: number) => {\n    timeDelay += delta;\n    if (timeDelay >= 1) {\n      timeDelay = 0;\n\n      for (let row = 1; row < map.length; row++) {\n        for (let col = 1; col < map[row].length - 1; col++) {\n          if (map[row - 1][col] === 0 && map[row][col] !== 0) {\n            map[row - 1][col] = 1;\n            map[row - 1][col + 1] = 1;\n            map[row + 1][col] = 0;\n            map[row + 1][col + 1] = 0;\n          } else {\n            console.log(\"dcmdcm\");\n          }\n        }\n      }\n      console.log(map);\n    }\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end();\n\n    //draw border\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n\n    // batch.draw(background, 0, 0, 1000, 2000);\n    drawTetromino();\n    // batch.draw(border, 0, 0, 1000, 2000);\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\n\ninit();\n// init2();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}