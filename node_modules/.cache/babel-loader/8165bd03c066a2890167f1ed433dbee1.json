{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShapeRenderer = exports.ShapeType = void 0;\n\nconst Mesh_1 = require(\"./Mesh\");\n\nconst Shader_1 = require(\"./Shader\");\n\nconst Utils_1 = require(\"./Utils\");\n\nconst WebGL_1 = require(\"./WebGL\");\n\nvar ShapeType;\n\n(function (ShapeType) {\n  ShapeType[ShapeType[\"Point\"] = 0] = \"Point\";\n  ShapeType[ShapeType[\"Line\"] = 1] = \"Line\";\n  ShapeType[ShapeType[\"Filled\"] = 4] = \"Filled\";\n})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));\n\nclass ShapeRenderer {\n  constructor(context) {\n    let maxVertices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10920;\n    this.isDrawing = false;\n    this.shapeType = ShapeType.Filled;\n    this.color = new Utils_1.Color(1, 1, 1, 1);\n    this.vertexIndex = 0;\n    this.tmp = new Utils_1.Vector2();\n    this.projectionValues = new Float32Array(16);\n    if (maxVertices > 10920) throw new Error(\"Can't have more than 10920 triangles per batch: \" + maxVertices);\n    this.context = context instanceof WebGL_1.ManagedWebGLRenderingContext ? context : new WebGL_1.ManagedWebGLRenderingContext(context);\n    this.mesh = new Mesh_1.Mesh(context, [new Mesh_1.Position2Attribute(), new Mesh_1.ColorAttribute()], maxVertices, 0);\n    let gl = this.context.gl;\n    this.srcColorBlend = gl.SRC_ALPHA;\n    this.srcAlphaBlend = gl.ONE;\n    this.dstBlend = gl.ONE_MINUS_SRC_ALPHA;\n    this.shader = Shader_1.Shader.newColored(gl);\n  }\n\n  setProjection(projectionValues) {\n    this.projectionValues = projectionValues;\n  }\n\n  begin() {\n    if (this.isDrawing) throw new Error(\"ShapeRenderer.begin() has already been called\");\n    this.vertexIndex = 0;\n    this.isDrawing = true;\n    this.shader.bind();\n    this.shader.setUniform4x4f(Shader_1.Shader.MVP_MATRIX, this.projectionValues);\n    let gl = this.context.gl;\n    gl.enable(gl.BLEND);\n    gl.blendFuncSeparate(this.srcColorBlend, this.dstBlend, this.srcAlphaBlend, this.dstBlend);\n  }\n\n  setBlendMode(srcColorBlend, srcAlphaBlend, dstBlend) {\n    this.srcColorBlend = srcColorBlend;\n    this.srcAlphaBlend = srcAlphaBlend;\n    this.dstBlend = dstBlend;\n\n    if (this.isDrawing) {\n      this.flush();\n      let gl = this.context.gl;\n      gl.blendFuncSeparate(srcColorBlend, dstBlend, srcAlphaBlend, dstBlend);\n    }\n  }\n\n  setColor(color) {\n    this.color.setFromColor(color);\n  }\n\n  setColorWith(r, g, b, a) {\n    this.color.set(r, g, b, a);\n  }\n\n  point(x, y) {\n    let color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    this.check(ShapeType.Point, 1);\n    if (color === null) color = this.color;\n    this.vertex(x, y, color);\n  }\n\n  line(x, y, x2, y2) {\n    let color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    this.check(ShapeType.Line, 2);\n    if (color === null) color = this.color;\n    this.vertex(x, y, color);\n    this.vertex(x2, y2, color);\n  }\n\n  triangle(filled, x, y, x2, y2, x3, y3) {\n    let color = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n    let color2 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n    let color3 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n    this.check(filled ? ShapeType.Filled : ShapeType.Line, 3);\n    if (color === null) color = this.color;\n    if (color2 === null) color2 = this.color;\n    if (color3 === null) color3 = this.color;\n\n    if (filled) {\n      this.vertex(x, y, color);\n      this.vertex(x2, y2, color2);\n      this.vertex(x3, y3, color3);\n    } else {\n      this.vertex(x, y, color);\n      this.vertex(x2, y2, color2);\n      this.vertex(x2, y2, color);\n      this.vertex(x3, y3, color2);\n      this.vertex(x3, y3, color);\n      this.vertex(x, y, color2);\n    }\n  }\n\n  quad(filled, x, y, x2, y2, x3, y3, x4, y4) {\n    let color = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n    let color2 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;\n    let color3 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : null;\n    let color4 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : null;\n    this.check(filled ? ShapeType.Filled : ShapeType.Line, 3);\n    if (color === null) color = this.color;\n    if (color2 === null) color2 = this.color;\n    if (color3 === null) color3 = this.color;\n    if (color4 === null) color4 = this.color;\n\n    if (filled) {\n      this.vertex(x, y, color);\n      this.vertex(x2, y2, color2);\n      this.vertex(x3, y3, color3);\n      this.vertex(x3, y3, color3);\n      this.vertex(x4, y4, color4);\n      this.vertex(x, y, color);\n    } else {\n      this.vertex(x, y, color);\n      this.vertex(x2, y2, color2);\n      this.vertex(x2, y2, color2);\n      this.vertex(x3, y3, color3);\n      this.vertex(x3, y3, color3);\n      this.vertex(x4, y4, color4);\n      this.vertex(x4, y4, color4);\n      this.vertex(x, y, color);\n    }\n  }\n\n  rect(filled, x, y, width, height) {\n    let color = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    this.quad(filled, x, y, x + width, y, x + width, y + height, x, y + height, color, color, color, color);\n  }\n\n  rectLine(filled, x1, y1, x2, y2, width) {\n    let color = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    this.check(filled ? ShapeType.Filled : ShapeType.Line, 8);\n    if (color === null) color = this.color;\n    let t = this.tmp.set(y2 - y1, x1 - x2);\n    t.normalize();\n    width *= 0.5;\n    let tx = t.x * width;\n    let ty = t.y * width;\n\n    if (!filled) {\n      this.vertex(x1 + tx, y1 + ty, color);\n      this.vertex(x1 - tx, y1 - ty, color);\n      this.vertex(x2 + tx, y2 + ty, color);\n      this.vertex(x2 - tx, y2 - ty, color);\n      this.vertex(x2 + tx, y2 + ty, color);\n      this.vertex(x1 + tx, y1 + ty, color);\n      this.vertex(x2 - tx, y2 - ty, color);\n      this.vertex(x1 - tx, y1 - ty, color);\n    } else {\n      this.vertex(x1 + tx, y1 + ty, color);\n      this.vertex(x1 - tx, y1 - ty, color);\n      this.vertex(x2 + tx, y2 + ty, color);\n      this.vertex(x2 - tx, y2 - ty, color);\n      this.vertex(x2 + tx, y2 + ty, color);\n      this.vertex(x1 - tx, y1 - ty, color);\n    }\n  }\n\n  x(x, y, size) {\n    this.line(x - size, y - size, x + size, y + size);\n    this.line(x - size, y + size, x + size, y - size);\n  }\n\n  polygon(polygonVertices, offset, count) {\n    let color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    if (count < 3) throw new Error(\"Polygon must contain at least 3 vertices\");\n    this.check(ShapeType.Line, count * 2);\n    if (color === null) color = this.color;\n    offset <<= 1;\n    count <<= 1;\n    let firstX = polygonVertices[offset];\n    let firstY = polygonVertices[offset + 1];\n    let last = offset + count;\n\n    for (let i = offset, n = offset + count - 2; i < n; i += 2) {\n      let x1 = polygonVertices[i];\n      let y1 = polygonVertices[i + 1];\n      let x2 = 0;\n      let y2 = 0;\n\n      if (i + 2 >= last) {\n        x2 = firstX;\n        y2 = firstY;\n      } else {\n        x2 = polygonVertices[i + 2];\n        y2 = polygonVertices[i + 3];\n      }\n\n      this.vertex(x1, y1, color);\n      this.vertex(x2, y2, color);\n    }\n  }\n\n  circle(filled, x, y, radius) {\n    let color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let segments = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    if (segments === 0) segments = Math.max(1, 6 * Utils_1.MathUtils.cbrt(radius) | 0);\n    if (segments <= 0) throw new Error(\"segments must be > 0.\");\n    if (color === null) color = this.color;\n    let angle = 2 * Utils_1.MathUtils.PI / segments;\n    let cos = Math.cos(angle);\n    let sin = Math.sin(angle);\n    let cx = radius,\n        cy = 0;\n\n    if (!filled) {\n      this.check(ShapeType.Line, segments * 2 + 2);\n\n      for (let i = 0; i < segments; i++) {\n        this.vertex(x + cx, y + cy, color);\n        let temp = cx;\n        cx = cos * cx - sin * cy;\n        cy = sin * temp + cos * cy;\n        this.vertex(x + cx, y + cy, color);\n      } // Ensure the last segment is identical to the first.\n\n\n      this.vertex(x + cx, y + cy, color);\n    } else {\n      this.check(ShapeType.Filled, segments * 3 + 3);\n      segments--;\n\n      for (let i = 0; i < segments; i++) {\n        this.vertex(x, y, color);\n        this.vertex(x + cx, y + cy, color);\n        let temp = cx;\n        cx = cos * cx - sin * cy;\n        cy = sin * temp + cos * cy;\n        this.vertex(x + cx, y + cy, color);\n      } // Ensure the last segment is identical to the first.\n\n\n      this.vertex(x, y, color);\n      this.vertex(x + cx, y + cy, color);\n    }\n\n    cx = radius;\n    cy = 0;\n    this.vertex(x + cx, y + cy, color);\n  }\n\n  curve(x1, y1, cx1, cy1, cx2, cy2, x2, y2, segments) {\n    let color = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n    this.check(ShapeType.Line, segments * 2 + 2);\n    if (color === null) color = this.color; // Algorithm from: http://www.antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION\n\n    let subdiv_step = 1 / segments;\n    let subdiv_step2 = subdiv_step * subdiv_step;\n    let subdiv_step3 = subdiv_step * subdiv_step * subdiv_step;\n    let pre1 = 3 * subdiv_step;\n    let pre2 = 3 * subdiv_step2;\n    let pre4 = 6 * subdiv_step2;\n    let pre5 = 6 * subdiv_step3;\n    let tmp1x = x1 - cx1 * 2 + cx2;\n    let tmp1y = y1 - cy1 * 2 + cy2;\n    let tmp2x = (cx1 - cx2) * 3 - x1 + x2;\n    let tmp2y = (cy1 - cy2) * 3 - y1 + y2;\n    let fx = x1;\n    let fy = y1;\n    let dfx = (cx1 - x1) * pre1 + tmp1x * pre2 + tmp2x * subdiv_step3;\n    let dfy = (cy1 - y1) * pre1 + tmp1y * pre2 + tmp2y * subdiv_step3;\n    let ddfx = tmp1x * pre4 + tmp2x * pre5;\n    let ddfy = tmp1y * pre4 + tmp2y * pre5;\n    let dddfx = tmp2x * pre5;\n    let dddfy = tmp2y * pre5;\n\n    while (segments-- > 0) {\n      this.vertex(fx, fy, color);\n      fx += dfx;\n      fy += dfy;\n      dfx += ddfx;\n      dfy += ddfy;\n      ddfx += dddfx;\n      ddfy += dddfy;\n      this.vertex(fx, fy, color);\n    }\n\n    this.vertex(fx, fy, color);\n    this.vertex(x2, y2, color);\n  }\n\n  vertex(x, y, color) {\n    let idx = this.vertexIndex;\n    let vertices = this.mesh.getVertices();\n    vertices[idx++] = x;\n    vertices[idx++] = y;\n    vertices[idx++] = color.r;\n    vertices[idx++] = color.g;\n    vertices[idx++] = color.b;\n    vertices[idx++] = color.a;\n    this.vertexIndex = idx;\n  }\n\n  end() {\n    if (!this.isDrawing) throw new Error(\"ShapeRenderer.begin() has not been called\");\n    this.flush();\n    let gl = this.context.gl;\n    gl.disable(gl.BLEND);\n    this.isDrawing = false;\n  }\n\n  flush() {\n    if (this.vertexIndex === 0) return;\n    this.mesh.setVerticesLength(this.vertexIndex);\n    this.mesh.draw(this.shader, this.shapeType);\n    this.vertexIndex = 0;\n  }\n\n  check(shapeType, numVertices) {\n    if (!this.isDrawing) throw new Error(\"ShapeRenderer.begin() has not been called\");\n\n    if (this.shapeType === shapeType) {\n      if (this.mesh.maxVertices() - this.mesh.numVertices() < numVertices) this.flush();else return;\n    } else {\n      this.flush();\n      this.shapeType = shapeType;\n    }\n  }\n\n  dispose() {\n    this.mesh.dispose();\n  }\n\n}\n\nexports.ShapeRenderer = ShapeRenderer;","map":{"version":3,"names":["Object","defineProperty","exports","value","ShapeRenderer","ShapeType","Mesh_1","require","Shader_1","Utils_1","WebGL_1","constructor","context","maxVertices","isDrawing","shapeType","Filled","color","Color","vertexIndex","tmp","Vector2","projectionValues","Float32Array","Error","ManagedWebGLRenderingContext","mesh","Mesh","Position2Attribute","ColorAttribute","gl","srcColorBlend","SRC_ALPHA","srcAlphaBlend","ONE","dstBlend","ONE_MINUS_SRC_ALPHA","shader","Shader","newColored","setProjection","begin","bind","setUniform4x4f","MVP_MATRIX","enable","BLEND","blendFuncSeparate","setBlendMode","flush","setColor","setFromColor","setColorWith","r","g","b","a","set","point","x","y","check","Point","vertex","line","x2","y2","Line","triangle","filled","x3","y3","color2","color3","quad","x4","y4","color4","rect","width","height","rectLine","x1","y1","t","normalize","tx","ty","size","polygon","polygonVertices","offset","count","firstX","firstY","last","i","n","circle","radius","segments","Math","max","MathUtils","cbrt","angle","PI","cos","sin","cx","cy","temp","curve","cx1","cy1","cx2","cy2","subdiv_step","subdiv_step2","subdiv_step3","pre1","pre2","pre4","pre5","tmp1x","tmp1y","tmp2x","tmp2y","fx","fy","dfx","dfy","ddfx","ddfy","dddfx","dddfy","idx","vertices","getVertices","end","disable","setVerticesLength","draw","numVertices","dispose"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/ShapeRenderer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShapeRenderer = exports.ShapeType = void 0;\nconst Mesh_1 = require(\"./Mesh\");\nconst Shader_1 = require(\"./Shader\");\nconst Utils_1 = require(\"./Utils\");\nconst WebGL_1 = require(\"./WebGL\");\nvar ShapeType;\n(function (ShapeType) {\n    ShapeType[ShapeType[\"Point\"] = 0] = \"Point\";\n    ShapeType[ShapeType[\"Line\"] = 1] = \"Line\";\n    ShapeType[ShapeType[\"Filled\"] = 4] = \"Filled\";\n})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));\nclass ShapeRenderer {\n    constructor(context, maxVertices = 10920) {\n        this.isDrawing = false;\n        this.shapeType = ShapeType.Filled;\n        this.color = new Utils_1.Color(1, 1, 1, 1);\n        this.vertexIndex = 0;\n        this.tmp = new Utils_1.Vector2();\n        this.projectionValues = new Float32Array(16);\n        if (maxVertices > 10920)\n            throw new Error(\"Can't have more than 10920 triangles per batch: \" + maxVertices);\n        this.context =\n            context instanceof WebGL_1.ManagedWebGLRenderingContext\n                ? context\n                : new WebGL_1.ManagedWebGLRenderingContext(context);\n        this.mesh = new Mesh_1.Mesh(context, [new Mesh_1.Position2Attribute(), new Mesh_1.ColorAttribute()], maxVertices, 0);\n        let gl = this.context.gl;\n        this.srcColorBlend = gl.SRC_ALPHA;\n        this.srcAlphaBlend = gl.ONE;\n        this.dstBlend = gl.ONE_MINUS_SRC_ALPHA;\n        this.shader = Shader_1.Shader.newColored(gl);\n    }\n    setProjection(projectionValues) {\n        this.projectionValues = projectionValues;\n    }\n    begin() {\n        if (this.isDrawing)\n            throw new Error(\"ShapeRenderer.begin() has already been called\");\n        this.vertexIndex = 0;\n        this.isDrawing = true;\n        this.shader.bind();\n        this.shader.setUniform4x4f(Shader_1.Shader.MVP_MATRIX, this.projectionValues);\n        let gl = this.context.gl;\n        gl.enable(gl.BLEND);\n        gl.blendFuncSeparate(this.srcColorBlend, this.dstBlend, this.srcAlphaBlend, this.dstBlend);\n    }\n    setBlendMode(srcColorBlend, srcAlphaBlend, dstBlend) {\n        this.srcColorBlend = srcColorBlend;\n        this.srcAlphaBlend = srcAlphaBlend;\n        this.dstBlend = dstBlend;\n        if (this.isDrawing) {\n            this.flush();\n            let gl = this.context.gl;\n            gl.blendFuncSeparate(srcColorBlend, dstBlend, srcAlphaBlend, dstBlend);\n        }\n    }\n    setColor(color) {\n        this.color.setFromColor(color);\n    }\n    setColorWith(r, g, b, a) {\n        this.color.set(r, g, b, a);\n    }\n    point(x, y, color = null) {\n        this.check(ShapeType.Point, 1);\n        if (color === null)\n            color = this.color;\n        this.vertex(x, y, color);\n    }\n    line(x, y, x2, y2, color = null) {\n        this.check(ShapeType.Line, 2);\n        if (color === null)\n            color = this.color;\n        this.vertex(x, y, color);\n        this.vertex(x2, y2, color);\n    }\n    triangle(filled, x, y, x2, y2, x3, y3, color = null, color2 = null, color3 = null) {\n        this.check(filled ? ShapeType.Filled : ShapeType.Line, 3);\n        if (color === null)\n            color = this.color;\n        if (color2 === null)\n            color2 = this.color;\n        if (color3 === null)\n            color3 = this.color;\n        if (filled) {\n            this.vertex(x, y, color);\n            this.vertex(x2, y2, color2);\n            this.vertex(x3, y3, color3);\n        }\n        else {\n            this.vertex(x, y, color);\n            this.vertex(x2, y2, color2);\n            this.vertex(x2, y2, color);\n            this.vertex(x3, y3, color2);\n            this.vertex(x3, y3, color);\n            this.vertex(x, y, color2);\n        }\n    }\n    quad(filled, x, y, x2, y2, x3, y3, x4, y4, color = null, color2 = null, color3 = null, color4 = null) {\n        this.check(filled ? ShapeType.Filled : ShapeType.Line, 3);\n        if (color === null)\n            color = this.color;\n        if (color2 === null)\n            color2 = this.color;\n        if (color3 === null)\n            color3 = this.color;\n        if (color4 === null)\n            color4 = this.color;\n        if (filled) {\n            this.vertex(x, y, color);\n            this.vertex(x2, y2, color2);\n            this.vertex(x3, y3, color3);\n            this.vertex(x3, y3, color3);\n            this.vertex(x4, y4, color4);\n            this.vertex(x, y, color);\n        }\n        else {\n            this.vertex(x, y, color);\n            this.vertex(x2, y2, color2);\n            this.vertex(x2, y2, color2);\n            this.vertex(x3, y3, color3);\n            this.vertex(x3, y3, color3);\n            this.vertex(x4, y4, color4);\n            this.vertex(x4, y4, color4);\n            this.vertex(x, y, color);\n        }\n    }\n    rect(filled, x, y, width, height, color = null) {\n        this.quad(filled, x, y, x + width, y, x + width, y + height, x, y + height, color, color, color, color);\n    }\n    rectLine(filled, x1, y1, x2, y2, width, color = null) {\n        this.check(filled ? ShapeType.Filled : ShapeType.Line, 8);\n        if (color === null)\n            color = this.color;\n        let t = this.tmp.set(y2 - y1, x1 - x2);\n        t.normalize();\n        width *= 0.5;\n        let tx = t.x * width;\n        let ty = t.y * width;\n        if (!filled) {\n            this.vertex(x1 + tx, y1 + ty, color);\n            this.vertex(x1 - tx, y1 - ty, color);\n            this.vertex(x2 + tx, y2 + ty, color);\n            this.vertex(x2 - tx, y2 - ty, color);\n            this.vertex(x2 + tx, y2 + ty, color);\n            this.vertex(x1 + tx, y1 + ty, color);\n            this.vertex(x2 - tx, y2 - ty, color);\n            this.vertex(x1 - tx, y1 - ty, color);\n        }\n        else {\n            this.vertex(x1 + tx, y1 + ty, color);\n            this.vertex(x1 - tx, y1 - ty, color);\n            this.vertex(x2 + tx, y2 + ty, color);\n            this.vertex(x2 - tx, y2 - ty, color);\n            this.vertex(x2 + tx, y2 + ty, color);\n            this.vertex(x1 - tx, y1 - ty, color);\n        }\n    }\n    x(x, y, size) {\n        this.line(x - size, y - size, x + size, y + size);\n        this.line(x - size, y + size, x + size, y - size);\n    }\n    polygon(polygonVertices, offset, count, color = null) {\n        if (count < 3)\n            throw new Error(\"Polygon must contain at least 3 vertices\");\n        this.check(ShapeType.Line, count * 2);\n        if (color === null)\n            color = this.color;\n        offset <<= 1;\n        count <<= 1;\n        let firstX = polygonVertices[offset];\n        let firstY = polygonVertices[offset + 1];\n        let last = offset + count;\n        for (let i = offset, n = offset + count - 2; i < n; i += 2) {\n            let x1 = polygonVertices[i];\n            let y1 = polygonVertices[i + 1];\n            let x2 = 0;\n            let y2 = 0;\n            if (i + 2 >= last) {\n                x2 = firstX;\n                y2 = firstY;\n            }\n            else {\n                x2 = polygonVertices[i + 2];\n                y2 = polygonVertices[i + 3];\n            }\n            this.vertex(x1, y1, color);\n            this.vertex(x2, y2, color);\n        }\n    }\n    circle(filled, x, y, radius, color = null, segments = 0) {\n        if (segments === 0)\n            segments = Math.max(1, (6 * Utils_1.MathUtils.cbrt(radius)) | 0);\n        if (segments <= 0)\n            throw new Error(\"segments must be > 0.\");\n        if (color === null)\n            color = this.color;\n        let angle = (2 * Utils_1.MathUtils.PI) / segments;\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        let cx = radius, cy = 0;\n        if (!filled) {\n            this.check(ShapeType.Line, segments * 2 + 2);\n            for (let i = 0; i < segments; i++) {\n                this.vertex(x + cx, y + cy, color);\n                let temp = cx;\n                cx = cos * cx - sin * cy;\n                cy = sin * temp + cos * cy;\n                this.vertex(x + cx, y + cy, color);\n            }\n            // Ensure the last segment is identical to the first.\n            this.vertex(x + cx, y + cy, color);\n        }\n        else {\n            this.check(ShapeType.Filled, segments * 3 + 3);\n            segments--;\n            for (let i = 0; i < segments; i++) {\n                this.vertex(x, y, color);\n                this.vertex(x + cx, y + cy, color);\n                let temp = cx;\n                cx = cos * cx - sin * cy;\n                cy = sin * temp + cos * cy;\n                this.vertex(x + cx, y + cy, color);\n            }\n            // Ensure the last segment is identical to the first.\n            this.vertex(x, y, color);\n            this.vertex(x + cx, y + cy, color);\n        }\n        cx = radius;\n        cy = 0;\n        this.vertex(x + cx, y + cy, color);\n    }\n    curve(x1, y1, cx1, cy1, cx2, cy2, x2, y2, segments, color = null) {\n        this.check(ShapeType.Line, segments * 2 + 2);\n        if (color === null)\n            color = this.color;\n        // Algorithm from: http://www.antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION\n        let subdiv_step = 1 / segments;\n        let subdiv_step2 = subdiv_step * subdiv_step;\n        let subdiv_step3 = subdiv_step * subdiv_step * subdiv_step;\n        let pre1 = 3 * subdiv_step;\n        let pre2 = 3 * subdiv_step2;\n        let pre4 = 6 * subdiv_step2;\n        let pre5 = 6 * subdiv_step3;\n        let tmp1x = x1 - cx1 * 2 + cx2;\n        let tmp1y = y1 - cy1 * 2 + cy2;\n        let tmp2x = (cx1 - cx2) * 3 - x1 + x2;\n        let tmp2y = (cy1 - cy2) * 3 - y1 + y2;\n        let fx = x1;\n        let fy = y1;\n        let dfx = (cx1 - x1) * pre1 + tmp1x * pre2 + tmp2x * subdiv_step3;\n        let dfy = (cy1 - y1) * pre1 + tmp1y * pre2 + tmp2y * subdiv_step3;\n        let ddfx = tmp1x * pre4 + tmp2x * pre5;\n        let ddfy = tmp1y * pre4 + tmp2y * pre5;\n        let dddfx = tmp2x * pre5;\n        let dddfy = tmp2y * pre5;\n        while (segments-- > 0) {\n            this.vertex(fx, fy, color);\n            fx += dfx;\n            fy += dfy;\n            dfx += ddfx;\n            dfy += ddfy;\n            ddfx += dddfx;\n            ddfy += dddfy;\n            this.vertex(fx, fy, color);\n        }\n        this.vertex(fx, fy, color);\n        this.vertex(x2, y2, color);\n    }\n    vertex(x, y, color) {\n        let idx = this.vertexIndex;\n        let vertices = this.mesh.getVertices();\n        vertices[idx++] = x;\n        vertices[idx++] = y;\n        vertices[idx++] = color.r;\n        vertices[idx++] = color.g;\n        vertices[idx++] = color.b;\n        vertices[idx++] = color.a;\n        this.vertexIndex = idx;\n    }\n    end() {\n        if (!this.isDrawing)\n            throw new Error(\"ShapeRenderer.begin() has not been called\");\n        this.flush();\n        let gl = this.context.gl;\n        gl.disable(gl.BLEND);\n        this.isDrawing = false;\n    }\n    flush() {\n        if (this.vertexIndex === 0)\n            return;\n        this.mesh.setVerticesLength(this.vertexIndex);\n        this.mesh.draw(this.shader, this.shapeType);\n        this.vertexIndex = 0;\n    }\n    check(shapeType, numVertices) {\n        if (!this.isDrawing)\n            throw new Error(\"ShapeRenderer.begin() has not been called\");\n        if (this.shapeType === shapeType) {\n            if (this.mesh.maxVertices() - this.mesh.numVertices() < numVertices)\n                this.flush();\n            else\n                return;\n        }\n        else {\n            this.flush();\n            this.shapeType = shapeType;\n        }\n    }\n    dispose() {\n        this.mesh.dispose();\n    }\n}\nexports.ShapeRenderer = ShapeRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}