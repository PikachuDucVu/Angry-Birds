{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { Animation, Color, createGameLoop, createStage, createViewport, InputEvent, PolygonBatch, ShapeRenderer, Texture, TextureRegion, Vector2, ViewportInputHandler } from \"gdxts\";\nconst WORLD_WIDTH = 1000;\nconst WORLD_HEIGHT = 500;\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\n  const circle = new b2CircleShape();\n  circle.m_radius = radius;\n  const fixtureDef = new b2FixtureDef();\n  fixtureDef.shape = circle;\n  fixtureDef.density = 1;\n  fixtureDef.restitution = 0.2; // bounce ball\n\n  fixtureDef.friction = 0.7;\n  const body = world.CreateBody(bodyDef);\n  body.CreateFixture(fixtureDef);\n  body.CreateFixture(circle);\n  return body;\n};\n\nconst createBox = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.5, height * 0.5);\n  body.SetAwake(false);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const pig = await Texture.load(gl, \"./pig.png\");\n  const bird = await Texture.load(gl, \"./bird.png\");\n  const slingShot = await Texture.load(gl, \"./slingshot.png\");\n  const background = await Texture.load(gl, \"./background.png\");\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const shapeRenderer = new ShapeRenderer(gl);\n  const world = new b2World({\n    x: 0,\n    y: 10\n  });\n  const boxTexture = await Texture.load(gl, \"./boxAsset.png\");\n  const regions = TextureRegion.splitTexture(boxTexture, 1, 4);\n  const testAnimation = new Animation(regions.slice(1, 3), 0.25);\n\n  for (let wall of wallData) {\n    createWall(world, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  let spaceOfEachBoxes = 0;\n  const BOX_SIZE = 0.5;\n  const boxes = [];\n\n  for (let i = 0; i < 3; i++) {\n    boxes.push(createBox(world, 8, spaceOfEachBoxes += 1, BOX_SIZE, BOX_SIZE));\n  }\n\n  const BALL_RADIUS = 0.2;\n  const ball = createBall(world, 2, 3.5, BALL_RADIUS);\n  let hasBirdOnSlingShot = true;\n  const originPosition = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  let slingPos = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  const inputHandler = new ViewportInputHandler(viewport);\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\n    if (inputHandler.isTouched()) {\n      slingPos = inputHandler.getTouchedWorldCoord();\n    }\n  });\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n    if (hasBirdOnSlingShot) {\n      ball.SetType(b2BodyType.b2_dynamicBody);\n      ball.ApplyLinearImpulseToCenter({\n        x: (originPosition.x - slingPos.x) / METER_TO_WORLD,\n        y: (originPosition.y - slingPos.y) / METER_TO_WORLD\n      }, true);\n      hasBirdOnSlingShot = false;\n    }\n  });\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    world.Step(delta, 8, 3);\n    batch.setProjection(camera.combined);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    }\n\n    shapeRenderer.rect(true, 2 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD, Color.MAGENTA);\n    shapeRenderer.circle(true, ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD, BALL_RADIUS * METER_TO_WORLD, Color.RED);\n    shapeRenderer.end();\n    batch.begin();\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\n    batch.end();\n    shapeRenderer.begin();\n    shapeRenderer.circle(true, slingPos.x, slingPos.y, 0.1 * METER_TO_WORLD, Color.BLUE);\n\n    for (let box of boxes) {// shapeRenderer.rect(\n      //   true,\n      //   box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n      //   box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n      //   BOX_SIZE * METER_TO_WORLD,\n      //   BOX_SIZE * METER_TO_WORLD,\n      //   Color.GREEN\n      // );\n      // console.log(box.GetContactList());\n    }\n\n    shapeRenderer.end();\n    batch.begin();\n    batch.draw(slingShot, 2 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD);\n\n    for (let box of boxes) {\n      batch.draw(pig, box.GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, box.GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD); // console.log(box.GetContactList());\n    }\n\n    batch.draw(bird, ball.GetPosition().x * METER_TO_WORLD - 25, ball.GetPosition().y * METER_TO_WORLD - 25, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    batch.draw(testAnimation, 350, 350, 200, 200);\n    batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2FixtureDef","b2PolygonShape","b2World","Animation","Color","createGameLoop","createStage","createViewport","InputEvent","PolygonBatch","ShapeRenderer","Texture","TextureRegion","Vector2","ViewportInputHandler","WORLD_WIDTH","WORLD_HEIGHT","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","CreateFixture","createBall","radius","circle","m_radius","fixtureDef","density","restitution","friction","createBox","b2_dynamicBody","SetAwake","WALL_COLOR","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","batch","setYDown","pig","load","bird","slingShot","background","mapData","fetch","then","res","json","wallData","layers","find","l","name","objects","shapeRenderer","boxTexture","regions","splitTexture","testAnimation","slice","wall","spaceOfEachBoxes","BOX_SIZE","boxes","i","push","BALL_RADIUS","ball","hasBirdOnSlingShot","originPosition","GetPosition","slingPos","inputHandler","addEventListener","TouchMove","isTouched","getTouchedWorldCoord","TouchEnd","SetType","ApplyLinearImpulseToCenter","clearColor","delta","clear","COLOR_BUFFER_BIT","Step","setProjection","combined","begin","rect","WHITE","MAGENTA","RED","end","draw","BLUE","box"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n  b2_pi,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Animation,\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  TextureRegion,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 1000;\r\nconst WORLD_HEIGHT = 500;\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n  fixtureDef.density = 1;\r\n  fixtureDef.restitution = 0.2; // bounce ball\r\n  fixtureDef.friction = 0.7;\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.CreateFixture(circle);\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.5, height * 0.5);\r\n  body.SetAwake(false);\r\n  body.CreateFixture(shape);\r\n\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const pig = await Texture.load(gl, \"./pig.png\");\r\n  const bird = await Texture.load(gl, \"./bird.png\");\r\n  const slingShot = await Texture.load(gl, \"./slingshot.png\");\r\n  const background = await Texture.load(gl, \"./background.png\");\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n\r\n  const boxTexture = await Texture.load(gl, \"./boxAsset.png\");\r\n  const regions = TextureRegion.splitTexture(boxTexture, 1, 4);\r\n  const testAnimation = new Animation(regions.slice(1, 3), 0.25);\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      world,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n\r\n  let spaceOfEachBoxes = 0;\r\n  const BOX_SIZE = 0.5;\r\n  const boxes: b2Body[] = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    boxes.push(\r\n      createBox(world, 8, (spaceOfEachBoxes += 1), BOX_SIZE, BOX_SIZE)\r\n    );\r\n  }\r\n\r\n  const BALL_RADIUS = 0.2;\r\n  const ball = createBall(world, 2, 3.5, BALL_RADIUS);\r\n  let hasBirdOnSlingShot = true;\r\n  const originPosition = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n  let slingPos = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n    if (inputHandler.isTouched()) {\r\n      slingPos = inputHandler.getTouchedWorldCoord();\r\n    }\r\n  });\r\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n    if (hasBirdOnSlingShot) {\r\n      ball.SetType(b2BodyType.b2_dynamicBody);\r\n      ball.ApplyLinearImpulseToCenter(\r\n        {\r\n          x: (originPosition.x - slingPos.x) / METER_TO_WORLD,\r\n          y: (originPosition.y - slingPos.y) / METER_TO_WORLD,\r\n        },\r\n        true\r\n      );\r\n      hasBirdOnSlingShot = false;\r\n    }\r\n  });\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    world.Step(delta, 8, 3);\r\n    batch.setProjection(camera.combined);\r\n\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n    shapeRenderer.rect(\r\n      true,\r\n      2 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD,\r\n      Color.MAGENTA\r\n    );\r\n    shapeRenderer.circle(\r\n      true,\r\n      ball.GetPosition().x * METER_TO_WORLD,\r\n      ball.GetPosition().y * METER_TO_WORLD,\r\n      BALL_RADIUS * METER_TO_WORLD,\r\n      Color.RED\r\n    );\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\r\n    batch.end();\r\n\r\n    shapeRenderer.begin();\r\n    shapeRenderer.circle(\r\n      true,\r\n      slingPos.x,\r\n      slingPos.y,\r\n      0.1 * METER_TO_WORLD,\r\n      Color.BLUE\r\n    );\r\n\r\n    for (let box of boxes) {\r\n      // shapeRenderer.rect(\r\n      //   true,\r\n      //   box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      //   box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      //   BOX_SIZE * METER_TO_WORLD,\r\n      //   BOX_SIZE * METER_TO_WORLD,\r\n      //   Color.GREEN\r\n      // );\r\n      // console.log(box.GetContactList());\r\n    }\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n    batch.draw(\r\n      slingShot,\r\n      2 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD\r\n    );\r\n    for (let box of boxes) {\r\n      batch.draw(\r\n        pig,\r\n        box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n        box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD\r\n      );\r\n      // console.log(box.GetContactList());\r\n    }\r\n\r\n    batch.draw(\r\n      bird,\r\n      ball.GetPosition().x * METER_TO_WORLD - 25,\r\n      ball.GetPosition().y * METER_TO_WORLD - 25,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n    batch.draw(testAnimation, 350, 350, 200, 200);\r\n    batch.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}