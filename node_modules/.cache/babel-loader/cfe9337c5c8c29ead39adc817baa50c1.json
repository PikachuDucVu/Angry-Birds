{"ast":null,"code":"import { loadTexture, TextureRegion } from 'gdxjs';\nimport { Vector2 } from 'gdxjs';\n\nconst checkKerning = (id1, id2, kerningsData) => {\n  let amount = 0;\n\n  for (let kerning of kerningsData) {\n    if (kerning.first === id1 && kerning.second === id2) {\n      amount = kerning.amount;\n      break;\n    }\n  }\n\n  return amount;\n};\n\nclass TextRenderer {\n  constructor(pageImage, regions, keringsData, displayWidth) {\n    this.pageImage = pageImage;\n    this.regions = regions;\n    this.kerningsData = keringsData;\n    this.align = 2;\n    this.lineHeight = pageImage.lineHeight;\n    this.baseLine = pageImage.base;\n    this.fixedWidth = displayWidth;\n    this.position = new Vector2(0, 0);\n    this.scale = 0;\n    this.newBase = 0;\n    this.oriWidth = 0;\n    this.oriHeight = 0;\n    this.positionBreak = []; // list of break-position's index\n\n    this.lastBreakIndex = 0; // pre draw\n\n    this.cache = [];\n    this.preDraw = true; // pre char sequence\n\n    this.preSequence = '';\n    this.x = 0;\n    this.y = 0;\n    this.rgba = [1, 1, 1, 1];\n  }\n\n  setColor(r, g, b, a) {\n    this.rgba[0] = r;\n    this.rgba[1] = g;\n    this.rgba[2] = b;\n    this.rgba[3] = a;\n  }\n\n  addToCache(line, px, py, lineBreak, lineH) {\n    let xAdvance = 0;\n\n    for (let index = 0; index < line.length; index++) {\n      const currChar = line.charCodeAt(index);\n      const preChar = line.charCodeAt(index - 1);\n      let key = this.findRegions(currChar);\n      let kerningAmount = checkKerning(preChar, currChar, this.kerningsData);\n      this.cache.push({\n        key: key,\n        x: px + xAdvance + key.xoffset * this.scale + kerningAmount * this.scale,\n        y: py + key.yoffset * this.scale + lineBreak * this.scale + lineH,\n        width: key.width * this.scale,\n        height: key.height * this.scale\n      });\n      xAdvance += key.xadvance * this.scale;\n    }\n  }\n\n  beforeDrawing(posX, posY, fontSize, CharSequence) {\n    if (this.preDraw) {\n      let spaceXadvance = 0;\n      let tmpLength = 0;\n      let tmplist = []; // find longest sequence\n\n      for (let i = 0; i < CharSequence.length; i++) {\n        const char = CharSequence.charCodeAt(i);\n        const key = this.findRegions(char);\n\n        if (char !== 32) {\n          tmpLength += key.xadvance * this.scale;\n        } else {\n          spaceXadvance = key.xadvance * this.scale;\n          tmplist.push(tmpLength);\n          tmpLength = 0;\n        }\n      }\n\n      let maxSeq = Math.max(...tmplist) + spaceXadvance; //////////////////\n\n      this.newbase = fontSize;\n      this.scale = this.newbase / this.baseLine;\n      CharSequence = CharSequence.trim(); // split string when meet \"/n\" char\n\n      let listCharSeq = CharSequence.split('/n').map(s => s.trim());\n      let lineH = 0;\n\n      for (let si = 0; si < listCharSeq.length; si++) {\n        CharSequence = listCharSeq[si]; // find new origin Width for each line\n\n        this.oriWidth = 0;\n\n        for (let i = 0; i < CharSequence.length; i++) {\n          const char = CharSequence.charCodeAt(i);\n          const preChar = CharSequence.charCodeAt(i - 1);\n          const key = this.findRegions(char);\n          let kerningAmount = checkKerning(preChar, char, this.kerningsData);\n          this.oriWidth += kerningAmount * this.scale;\n          this.oriWidth += key.xadvance * this.scale;\n        }\n\n        let tmpRatio = this.oriWidth / this.fixedWidth;\n        lineH = this.lineHeight * this.scale * si;\n        let accumulate = 0;\n        let tmpChar = '';\n        let lineBreak = 0; // finding position break and length of each line\n        // only execute if oriWidth > fixedWidth and fixedWidth > longest seq\n\n        if (tmpRatio > 1 && this.fixedWidth > maxSeq) {\n          for (let i = 0; i < CharSequence.length; i++) {\n            tmpChar += CharSequence[i];\n            const char = CharSequence.charCodeAt(i);\n            const key = this.findRegions(char);\n            accumulate += key.xadvance * this.scale; // every line before last line\n\n            if (accumulate >= this.fixedWidth) {\n              let j = i;\n\n              while (j >= 0) {\n                i--;\n                j--;\n                const key2 = this.findRegions(CharSequence.charCodeAt(i));\n                accumulate -= key2.xadvance * this.scale;\n                tmpChar = tmpChar.substring(0, tmpChar.length - 1);\n\n                if (accumulate <= this.fixedWidth && key2.id === 32) {\n                  lineBreak = this.lineHeight * this.positionBreak.length;\n                  this.positionBreak.push(i); ///\n\n                  this.lastBreakIndex = i;\n                  const line = tmpChar.trim();\n                  let tmp = 0;\n                  let key3 = 0;\n\n                  for (let index = 0; index < line.length; index++) {\n                    key3 = this.findRegions(line.charCodeAt(index));\n\n                    if (index === line.length - 1) {\n                      tmp += key3.width * this.scale;\n                    } else {\n                      tmp += key3.xadvance * this.scale;\n                    }\n                  }\n\n                  let [px, py] = this.getPositionBasedOnMode(posX, posY, tmp);\n                  this.addToCache(line, px, py, lineBreak, lineH);\n                  accumulate = 0;\n                  j = -1;\n                  tmpChar = '';\n                }\n              }\n            } // last line\n\n\n            if (i === CharSequence.length - 1 && accumulate < this.oriWidth) {\n              let tmpChar = '';\n\n              for (let j = this.lastBreakIndex; j <= i; j++) {\n                tmpChar += CharSequence[j];\n              }\n\n              const lastLine = tmpChar.trim();\n              let tmpXadvance = 0;\n              let lastKey = 0;\n\n              for (let index = 0; index < lastLine.length; index++) {\n                lastKey = this.findRegions(lastLine.charCodeAt(index));\n\n                if (index === lastLine.length - 1) {\n                  tmpXadvance += lastKey.width * this.scale;\n                } else {\n                  tmpXadvance += lastKey.xadvance * this.scale;\n                }\n              }\n\n              let [px, py] = this.getPositionBasedOnMode(posX, posY, tmpXadvance);\n              lineBreak = this.lineHeight * this.positionBreak.length;\n              this.addToCache(lastLine, px, py, lineBreak, lineH);\n            }\n          }\n        } // if originWidth < fixedWidth or fixedWidth < longest sequence\n\n\n        if (tmpRatio <= 1 || this.fixedWidth < maxSeq) {\n          let [px, py] = this.getPositionBasedOnMode(posX, posY, this.oriWidth);\n          this.addToCache(CharSequence, px, py, 0, lineH);\n        }\n      }\n\n      this.preDraw = false;\n      this.oriHeight = this.newbase;\n    }\n  }\n\n  getPositionBasedOnMode(posX, posY, oriWidth) {\n    if (this.align === 0) {\n      // posY -= Math.round(this.oriHeight / 2);\n      posX = posX + this.fixedWidth / 2 - oriWidth / 2;\n    } else if (this.align === 1) {\n      posX = posX + this.fixedWidth - oriWidth;\n    } else {\n      posX = posX;\n    }\n\n    return [posX, posY];\n  }\n\n  getTextWidth() {\n    // goi tu ngoai\n    return this.oriWidth;\n  }\n\n  setAlignMode(mode) {\n    // goi tu ngoai\n    this.align = mode;\n  }\n\n  setLineHeight(lineHeight) {\n    // goi tu ngoai (config line distance)\n    this.lineHeight = lineHeight;\n  }\n\n  setDisplayWidth(fixedW) {\n    this.fixedWidth = fixedW; // this.fixedHeight = fixedH;\n  }\n\n  findRegions(id) {\n    // em thay khong can thiet\n    for (let i = 0; i < this.regions.length; i++) {\n      if (this.regions[i].id === id) {\n        return this.regions[i];\n      }\n    }\n  }\n\n  draw(batch, charSequence, posX, posY) {\n    let fontSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.baseLine;\n\n    if (charSequence !== this.preSequence || posX !== this.x || posY !== this.y) {\n      this.preDraw = true;\n      this.cache.length = 0;\n      this.positionBreak.length = 0;\n      this.beforeDrawing(posX, posY, fontSize, charSequence);\n    }\n\n    const prevColor = batch.color;\n    batch.setColor(...this.rgba);\n\n    for (let i = 0; i < this.cache.length; i++) {\n      let cache = this.cache[i];\n      cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\n    }\n\n    batch.color = prevColor;\n    this.preSequence = charSequence;\n    this.x = posX;\n    this.y = posY;\n  }\n\n}\n\nexport const AlignMode = {\n  center: 0,\n  right: 1,\n  left: 2\n};\n\nfunction concatAndResolveUrl(url, concat) {\n  let url1 = url.split('/');\n  let url2 = concat.split('/');\n  let url3 = [];\n\n  for (let i = 0, l = url1.length; i < l; i++) {\n    if (url1[i] === '..') {\n      url3.pop();\n    } else if (url1[i] === '.') {\n      continue;\n    } else {\n      url3.push(url1[i]);\n    }\n  }\n\n  for (let i = 0, l = url2.length; i < l; i++) {\n    if (url2[i] === '..') {\n      url3.pop();\n    } else if (url2[i] === '.') {\n      continue;\n    } else {\n      url3.push(url2[i]);\n    }\n  }\n\n  return url3.join('/');\n}\n\nexport default (async (gl, packFileUrl, textureOptions) => {\n  const packFileContent = await fetch(packFileUrl).then(res => res.text());\n  const pages = [];\n  const regionsData = [];\n  const kerningsData = [];\n  let pageImage = null;\n  const lines = packFileContent.split('\\n').map(s => s.trim());\n  let i = 0;\n  let tuple;\n  let tmp_array = [];\n  let push_to_kerning = false;\n  let numOfPages = 0;\n  let startPageLine = 2;\n\n  while (true) {\n    let line = lines[startPageLine];\n    tmp_array.length = 0;\n    tuple = line.split(' ').map(s => s.trim());\n\n    if (tuple[0] === 'page') {\n      numOfPages += 1;\n    } else {\n      break;\n    }\n\n    startPageLine += 1;\n  }\n\n  let pageCounter = -1;\n  let saveIndex = 2 + numOfPages + 1; //starting line's index to find region data\n\n  while (true) {\n    let line = lines[i];\n\n    if (line === undefined) {\n      push_to_kerning = false;\n      break;\n    }\n\n    if (line.split(' ').length === 2) {\n      const tmp = line.split(' ');\n\n      if (tmp[0] === 'kernings') {\n        push_to_kerning = true;\n      }\n\n      i++;\n      line = lines[i];\n    }\n\n    if (push_to_kerning && pageImage !== null) {\n      tuple = line.split(' ').map(s => s.trim());\n      tuple = tuple.filter(item => item !== '');\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const first = parseInt(tmp_array[0], 10);\n      const second = parseInt(tmp_array[1], 10);\n      const amount = parseInt(tmp_array[2], 10);\n      kerningsData.push({\n        first,\n        second,\n        amount\n      });\n    }\n\n    if (pageImage === null) {\n      pageCounter += 1;\n      tmp_array.length = 0;\n      tuple = line.split(' ').map(s => s.trim());\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const face = tmp_array[0];\n      const size = parseInt(tmp_array[1], 10);\n      const bold = parseInt(tmp_array[2], 10) === 0 ? false : true;\n      const italic = parseInt(tmp_array[3], 10) === 0 ? false : true;\n      const charset = tmp_array[4];\n      const unicode = parseInt(tmp_array[5], 10);\n      const stretchH = parseInt(tmp_array[6], 10); // percentage\n\n      const smooth = parseInt(tmp_array[7], 10);\n      const aa = parseInt(tmp_array[8], 10);\n      const padding = tmp_array[9].split(',').map(i => parseInt(i, 10));\n      const spacing = tmp_array[10].split(',').map(i => parseInt(i, 10));\n      const outline = parseInt(tmp_array[11], 10);\n      i++;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(' ').map(s => s.trim());\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const lineHeight = parseInt(tmp_array[0], 10);\n      const base = parseInt(tmp_array[1], 10);\n      const scaleW = parseInt(tmp_array[2], 10);\n      const scaleH = parseInt(tmp_array[3], 10);\n      const num_of_pages = parseInt(tmp_array[4], 10);\n      const packed = parseInt(tmp_array[5], 10);\n      const alphaChnl = parseInt(tmp_array[6], 10);\n      const redChnl = parseInt(tmp_array[7], 10);\n      const greenChnl = parseInt(tmp_array[8], 10);\n      const blueChnl = parseInt(tmp_array[9], 10);\n      i = i + pageCounter + 1;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(' ').map(s => s.trim());\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const page_id = parseInt(tmp_array[0], 10);\n      const url = tmp_array[1].split('\"');\n      const file = concatAndResolveUrl(packFileUrl, `../${url[1]}`);\n      pageImage = {\n        file,\n        page_id,\n        face,\n        size,\n        bold,\n        italic,\n        charset,\n        unicode,\n        stretchH,\n        smooth,\n        aa,\n        padding,\n        spacing,\n        outline,\n        lineHeight,\n        base,\n        scaleW,\n        scaleH,\n        num_of_pages,\n        packed,\n        alphaChnl,\n        redChnl,\n        greenChnl,\n        blueChnl\n      };\n      pages.push(pageImage);\n      i = saveIndex;\n      line = lines[i];\n    }\n\n    if (!push_to_kerning && pageImage !== null) {\n      tuple = line.split(' ').map(s => s.trim());\n      tuple = tuple.filter(item => item !== '');\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const id = parseInt(tmp_array[0], 10);\n      const left = parseInt(tmp_array[1], 10);\n      const top = parseInt(tmp_array[2], 10);\n      const width = parseInt(tmp_array[3], 10);\n      const height = parseInt(tmp_array[4], 10);\n      const xoffset = parseInt(tmp_array[5], 10);\n      const yoffset = parseInt(tmp_array[6], 10);\n      const xadvance = parseInt(tmp_array[7], 10);\n      const page = parseInt(tmp_array[8], 10);\n      const region = {\n        id,\n        left,\n        top,\n        width,\n        height,\n        xoffset,\n        yoffset,\n        xadvance,\n        page: pageImage,\n        id_page: page\n      };\n\n      if (region.id_page === pageCounter) {\n        regionsData.push(region);\n      } else {\n        if (pageCounter === numOfPages - 1) {\n          push_to_kerning = true;\n        } else {\n          saveIndex = i;\n          i = -1;\n          pageImage = null;\n        }\n      }\n    }\n\n    i++;\n  }\n\n  for (let page of pages) {\n    page.texture = await loadTexture(gl, page.file, textureOptions);\n    page.invTextWidth = 1 / page.texture.width;\n    page.invTextHeight = 1 / page.texture.height;\n  }\n\n  const regions = [];\n\n  for (let regionData of regionsData) {\n    const left = regionData.left;\n    const top = regionData.top;\n    const width = regionData.width;\n    const height = regionData.height;\n    const {\n      texture,\n      invTexWidth,\n      invTexHeight\n    } = regionData.page;\n    const region = new TextureRegion(texture, left, top, width, height, regionData, invTexWidth, invTexHeight);\n    region.originalWidth = width;\n    region.originalHeight = height;\n    region.offsetX = 0;\n    region.offsetY = 0;\n    regions.push(region);\n  }\n\n  return {\n    getLineHeight() {\n      return pageImage.lineHeight;\n    },\n\n    getPages() {\n      return pages;\n    },\n\n    getRegions() {\n      return regions;\n    },\n\n    createRenderer(displayWidth) {\n      return new TextRenderer(pageImage, regions, kerningsData, displayWidth);\n    }\n\n  };\n});","map":{"version":3,"names":["loadTexture","TextureRegion","Vector2","checkKerning","id1","id2","kerningsData","amount","kerning","first","second","TextRenderer","constructor","pageImage","regions","keringsData","displayWidth","align","lineHeight","baseLine","base","fixedWidth","position","scale","newBase","oriWidth","oriHeight","positionBreak","lastBreakIndex","cache","preDraw","preSequence","x","y","rgba","setColor","r","g","b","a","addToCache","line","px","py","lineBreak","lineH","xAdvance","index","length","currChar","charCodeAt","preChar","key","findRegions","kerningAmount","push","xoffset","yoffset","width","height","xadvance","beforeDrawing","posX","posY","fontSize","CharSequence","spaceXadvance","tmpLength","tmplist","i","char","maxSeq","Math","max","newbase","trim","listCharSeq","split","map","s","si","tmpRatio","accumulate","tmpChar","j","key2","substring","id","tmp","key3","getPositionBasedOnMode","lastLine","tmpXadvance","lastKey","getTextWidth","setAlignMode","mode","setLineHeight","setDisplayWidth","fixedW","draw","batch","charSequence","prevColor","color","AlignMode","center","right","left","concatAndResolveUrl","url","concat","url1","url2","url3","l","pop","join","gl","packFileUrl","textureOptions","packFileContent","fetch","then","res","text","pages","regionsData","lines","tuple","tmp_array","push_to_kerning","numOfPages","startPageLine","pageCounter","saveIndex","undefined","filter","item","parseInt","face","size","bold","italic","charset","unicode","stretchH","smooth","aa","padding","spacing","outline","scaleW","scaleH","num_of_pages","packed","alphaChnl","redChnl","greenChnl","blueChnl","page_id","file","top","page","region","id_page","texture","invTextWidth","invTextHeight","regionData","invTexWidth","invTexHeight","originalWidth","originalHeight","offsetX","offsetY","getLineHeight","getPages","getRegions","createRenderer"],"sources":["D:/projects/test-game/node_modules/gdxjs/lib/loadFont.js"],"sourcesContent":["import { loadTexture, TextureRegion } from 'gdxjs';\nimport { Vector2 } from 'gdxjs';\n\nconst checkKerning = (id1, id2, kerningsData) => {\n  let amount = 0;\n\n  for (let kerning of kerningsData) {\n    if (kerning.first === id1 && kerning.second === id2) {\n      amount = kerning.amount;\n      break;\n    }\n  }\n\n  return amount;\n};\n\nclass TextRenderer {\n  constructor(pageImage, regions, keringsData, displayWidth) {\n    this.pageImage = pageImage;\n    this.regions = regions;\n    this.kerningsData = keringsData;\n    this.align = 2;\n    this.lineHeight = pageImage.lineHeight;\n    this.baseLine = pageImage.base;\n    this.fixedWidth = displayWidth;\n    this.position = new Vector2(0, 0);\n    this.scale = 0;\n    this.newBase = 0;\n    this.oriWidth = 0;\n    this.oriHeight = 0;\n    this.positionBreak = []; // list of break-position's index\n\n    this.lastBreakIndex = 0; // pre draw\n\n    this.cache = [];\n    this.preDraw = true; // pre char sequence\n\n    this.preSequence = '';\n    this.x = 0;\n    this.y = 0;\n    this.rgba = [1, 1, 1, 1];\n  }\n\n  setColor(r, g, b, a) {\n    this.rgba[0] = r;\n    this.rgba[1] = g;\n    this.rgba[2] = b;\n    this.rgba[3] = a;\n  }\n\n  addToCache(line, px, py, lineBreak, lineH) {\n    let xAdvance = 0;\n\n    for (let index = 0; index < line.length; index++) {\n      const currChar = line.charCodeAt(index);\n      const preChar = line.charCodeAt(index - 1);\n      let key = this.findRegions(currChar);\n      let kerningAmount = checkKerning(preChar, currChar, this.kerningsData);\n      this.cache.push({\n        key: key,\n        x: px + xAdvance + key.xoffset * this.scale + kerningAmount * this.scale,\n        y: py + key.yoffset * this.scale + lineBreak * this.scale + lineH,\n        width: key.width * this.scale,\n        height: key.height * this.scale\n      });\n      xAdvance += key.xadvance * this.scale;\n    }\n  }\n\n  beforeDrawing(posX, posY, fontSize, CharSequence) {\n    if (this.preDraw) {\n      let spaceXadvance = 0;\n      let tmpLength = 0;\n      let tmplist = []; // find longest sequence\n\n      for (let i = 0; i < CharSequence.length; i++) {\n        const char = CharSequence.charCodeAt(i);\n        const key = this.findRegions(char);\n\n        if (char !== 32) {\n          tmpLength += key.xadvance * this.scale;\n        } else {\n          spaceXadvance = key.xadvance * this.scale;\n          tmplist.push(tmpLength);\n          tmpLength = 0;\n        }\n      }\n\n      let maxSeq = Math.max(...tmplist) + spaceXadvance; //////////////////\n\n      this.newbase = fontSize;\n      this.scale = this.newbase / this.baseLine;\n      CharSequence = CharSequence.trim(); // split string when meet \"/n\" char\n\n      let listCharSeq = CharSequence.split('/n').map(s => s.trim());\n      let lineH = 0;\n\n      for (let si = 0; si < listCharSeq.length; si++) {\n        CharSequence = listCharSeq[si]; // find new origin Width for each line\n\n        this.oriWidth = 0;\n\n        for (let i = 0; i < CharSequence.length; i++) {\n          const char = CharSequence.charCodeAt(i);\n          const preChar = CharSequence.charCodeAt(i - 1);\n          const key = this.findRegions(char);\n          let kerningAmount = checkKerning(preChar, char, this.kerningsData);\n          this.oriWidth += kerningAmount * this.scale;\n          this.oriWidth += key.xadvance * this.scale;\n        }\n\n        let tmpRatio = this.oriWidth / this.fixedWidth;\n        lineH = this.lineHeight * this.scale * si;\n        let accumulate = 0;\n        let tmpChar = '';\n        let lineBreak = 0; // finding position break and length of each line\n        // only execute if oriWidth > fixedWidth and fixedWidth > longest seq\n\n        if (tmpRatio > 1 && this.fixedWidth > maxSeq) {\n          for (let i = 0; i < CharSequence.length; i++) {\n            tmpChar += CharSequence[i];\n            const char = CharSequence.charCodeAt(i);\n            const key = this.findRegions(char);\n            accumulate += key.xadvance * this.scale; // every line before last line\n\n            if (accumulate >= this.fixedWidth) {\n              let j = i;\n\n              while (j >= 0) {\n                i--;\n                j--;\n                const key2 = this.findRegions(CharSequence.charCodeAt(i));\n                accumulate -= key2.xadvance * this.scale;\n                tmpChar = tmpChar.substring(0, tmpChar.length - 1);\n\n                if (accumulate <= this.fixedWidth && key2.id === 32) {\n                  lineBreak = this.lineHeight * this.positionBreak.length;\n                  this.positionBreak.push(i); ///\n\n                  this.lastBreakIndex = i;\n                  const line = tmpChar.trim();\n                  let tmp = 0;\n                  let key3 = 0;\n\n                  for (let index = 0; index < line.length; index++) {\n                    key3 = this.findRegions(line.charCodeAt(index));\n\n                    if (index === line.length - 1) {\n                      tmp += key3.width * this.scale;\n                    } else {\n                      tmp += key3.xadvance * this.scale;\n                    }\n                  }\n\n                  let [px, py] = this.getPositionBasedOnMode(posX, posY, tmp);\n                  this.addToCache(line, px, py, lineBreak, lineH);\n                  accumulate = 0;\n                  j = -1;\n                  tmpChar = '';\n                }\n              }\n            } // last line\n\n\n            if (i === CharSequence.length - 1 && accumulate < this.oriWidth) {\n              let tmpChar = '';\n\n              for (let j = this.lastBreakIndex; j <= i; j++) {\n                tmpChar += CharSequence[j];\n              }\n\n              const lastLine = tmpChar.trim();\n              let tmpXadvance = 0;\n              let lastKey = 0;\n\n              for (let index = 0; index < lastLine.length; index++) {\n                lastKey = this.findRegions(lastLine.charCodeAt(index));\n\n                if (index === lastLine.length - 1) {\n                  tmpXadvance += lastKey.width * this.scale;\n                } else {\n                  tmpXadvance += lastKey.xadvance * this.scale;\n                }\n              }\n\n              let [px, py] = this.getPositionBasedOnMode(posX, posY, tmpXadvance);\n              lineBreak = this.lineHeight * this.positionBreak.length;\n              this.addToCache(lastLine, px, py, lineBreak, lineH);\n            }\n          }\n        } // if originWidth < fixedWidth or fixedWidth < longest sequence\n\n\n        if (tmpRatio <= 1 || this.fixedWidth < maxSeq) {\n          let [px, py] = this.getPositionBasedOnMode(posX, posY, this.oriWidth);\n          this.addToCache(CharSequence, px, py, 0, lineH);\n        }\n      }\n\n      this.preDraw = false;\n      this.oriHeight = this.newbase;\n    }\n  }\n\n  getPositionBasedOnMode(posX, posY, oriWidth) {\n    if (this.align === 0) {\n      // posY -= Math.round(this.oriHeight / 2);\n      posX = posX + this.fixedWidth / 2 - oriWidth / 2;\n    } else if (this.align === 1) {\n      posX = posX + this.fixedWidth - oriWidth;\n    } else {\n      posX = posX;\n    }\n\n    return [posX, posY];\n  }\n\n  getTextWidth() {\n    // goi tu ngoai\n    return this.oriWidth;\n  }\n\n  setAlignMode(mode) {\n    // goi tu ngoai\n    this.align = mode;\n  }\n\n  setLineHeight(lineHeight) {\n    // goi tu ngoai (config line distance)\n    this.lineHeight = lineHeight;\n  }\n\n  setDisplayWidth(fixedW) {\n    this.fixedWidth = fixedW; // this.fixedHeight = fixedH;\n  }\n\n  findRegions(id) {\n    // em thay khong can thiet\n    for (let i = 0; i < this.regions.length; i++) {\n      if (this.regions[i].id === id) {\n        return this.regions[i];\n      }\n    }\n  }\n\n  draw(batch, charSequence, posX, posY, fontSize = this.baseLine) {\n    if (charSequence !== this.preSequence || posX !== this.x || posY !== this.y) {\n      this.preDraw = true;\n      this.cache.length = 0;\n      this.positionBreak.length = 0;\n      this.beforeDrawing(posX, posY, fontSize, charSequence);\n    }\n\n    const prevColor = batch.color;\n    batch.setColor(...this.rgba);\n\n    for (let i = 0; i < this.cache.length; i++) {\n      let cache = this.cache[i];\n      cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\n    }\n\n    batch.color = prevColor;\n    this.preSequence = charSequence;\n    this.x = posX;\n    this.y = posY;\n  }\n\n}\n\nexport const AlignMode = {\n  center: 0,\n  right: 1,\n  left: 2\n};\n\nfunction concatAndResolveUrl(url, concat) {\n  let url1 = url.split('/');\n  let url2 = concat.split('/');\n  let url3 = [];\n\n  for (let i = 0, l = url1.length; i < l; i++) {\n    if (url1[i] === '..') {\n      url3.pop();\n    } else if (url1[i] === '.') {\n      continue;\n    } else {\n      url3.push(url1[i]);\n    }\n  }\n\n  for (let i = 0, l = url2.length; i < l; i++) {\n    if (url2[i] === '..') {\n      url3.pop();\n    } else if (url2[i] === '.') {\n      continue;\n    } else {\n      url3.push(url2[i]);\n    }\n  }\n\n  return url3.join('/');\n}\n\nexport default (async (gl, packFileUrl, textureOptions) => {\n  const packFileContent = await fetch(packFileUrl).then(res => res.text());\n  const pages = [];\n  const regionsData = [];\n  const kerningsData = [];\n  let pageImage = null;\n  const lines = packFileContent.split('\\n').map(s => s.trim());\n  let i = 0;\n  let tuple;\n  let tmp_array = [];\n  let push_to_kerning = false;\n  let numOfPages = 0;\n  let startPageLine = 2;\n\n  while (true) {\n    let line = lines[startPageLine];\n    tmp_array.length = 0;\n    tuple = line.split(' ').map(s => s.trim());\n\n    if (tuple[0] === 'page') {\n      numOfPages += 1;\n    } else {\n      break;\n    }\n\n    startPageLine += 1;\n  }\n\n  let pageCounter = -1;\n  let saveIndex = 2 + numOfPages + 1; //starting line's index to find region data\n\n  while (true) {\n    let line = lines[i];\n\n    if (line === undefined) {\n      push_to_kerning = false;\n      break;\n    }\n\n    if (line.split(' ').length === 2) {\n      const tmp = line.split(' ');\n\n      if (tmp[0] === 'kernings') {\n        push_to_kerning = true;\n      }\n\n      i++;\n      line = lines[i];\n    }\n\n    if (push_to_kerning && pageImage !== null) {\n      tuple = line.split(' ').map(s => s.trim());\n      tuple = tuple.filter(item => item !== '');\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const first = parseInt(tmp_array[0], 10);\n      const second = parseInt(tmp_array[1], 10);\n      const amount = parseInt(tmp_array[2], 10);\n      kerningsData.push({\n        first,\n        second,\n        amount\n      });\n    }\n\n    if (pageImage === null) {\n      pageCounter += 1;\n      tmp_array.length = 0;\n      tuple = line.split(' ').map(s => s.trim());\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const face = tmp_array[0];\n      const size = parseInt(tmp_array[1], 10);\n      const bold = parseInt(tmp_array[2], 10) === 0 ? false : true;\n      const italic = parseInt(tmp_array[3], 10) === 0 ? false : true;\n      const charset = tmp_array[4];\n      const unicode = parseInt(tmp_array[5], 10);\n      const stretchH = parseInt(tmp_array[6], 10); // percentage\n\n      const smooth = parseInt(tmp_array[7], 10);\n      const aa = parseInt(tmp_array[8], 10);\n      const padding = tmp_array[9].split(',').map(i => parseInt(i, 10));\n      const spacing = tmp_array[10].split(',').map(i => parseInt(i, 10));\n      const outline = parseInt(tmp_array[11], 10);\n      i++;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(' ').map(s => s.trim());\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const lineHeight = parseInt(tmp_array[0], 10);\n      const base = parseInt(tmp_array[1], 10);\n      const scaleW = parseInt(tmp_array[2], 10);\n      const scaleH = parseInt(tmp_array[3], 10);\n      const num_of_pages = parseInt(tmp_array[4], 10);\n      const packed = parseInt(tmp_array[5], 10);\n      const alphaChnl = parseInt(tmp_array[6], 10);\n      const redChnl = parseInt(tmp_array[7], 10);\n      const greenChnl = parseInt(tmp_array[8], 10);\n      const blueChnl = parseInt(tmp_array[9], 10);\n      i = i + pageCounter + 1;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(' ').map(s => s.trim());\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const page_id = parseInt(tmp_array[0], 10);\n      const url = tmp_array[1].split('\"');\n      const file = concatAndResolveUrl(packFileUrl, `../${url[1]}`);\n      pageImage = {\n        file,\n        page_id,\n        face,\n        size,\n        bold,\n        italic,\n        charset,\n        unicode,\n        stretchH,\n        smooth,\n        aa,\n        padding,\n        spacing,\n        outline,\n        lineHeight,\n        base,\n        scaleW,\n        scaleH,\n        num_of_pages,\n        packed,\n        alphaChnl,\n        redChnl,\n        greenChnl,\n        blueChnl\n      };\n      pages.push(pageImage);\n      i = saveIndex;\n      line = lines[i];\n    }\n\n    if (!push_to_kerning && pageImage !== null) {\n      tuple = line.split(' ').map(s => s.trim());\n      tuple = tuple.filter(item => item !== '');\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n\n      const id = parseInt(tmp_array[0], 10);\n      const left = parseInt(tmp_array[1], 10);\n      const top = parseInt(tmp_array[2], 10);\n      const width = parseInt(tmp_array[3], 10);\n      const height = parseInt(tmp_array[4], 10);\n      const xoffset = parseInt(tmp_array[5], 10);\n      const yoffset = parseInt(tmp_array[6], 10);\n      const xadvance = parseInt(tmp_array[7], 10);\n      const page = parseInt(tmp_array[8], 10);\n      const region = {\n        id,\n        left,\n        top,\n        width,\n        height,\n        xoffset,\n        yoffset,\n        xadvance,\n        page: pageImage,\n        id_page: page\n      };\n\n      if (region.id_page === pageCounter) {\n        regionsData.push(region);\n      } else {\n        if (pageCounter === numOfPages - 1) {\n          push_to_kerning = true;\n        } else {\n          saveIndex = i;\n          i = -1;\n          pageImage = null;\n        }\n      }\n    }\n\n    i++;\n  }\n\n  for (let page of pages) {\n    page.texture = await loadTexture(gl, page.file, textureOptions);\n    page.invTextWidth = 1 / page.texture.width;\n    page.invTextHeight = 1 / page.texture.height;\n  }\n\n  const regions = [];\n\n  for (let regionData of regionsData) {\n    const left = regionData.left;\n    const top = regionData.top;\n    const width = regionData.width;\n    const height = regionData.height;\n    const {\n      texture,\n      invTexWidth,\n      invTexHeight\n    } = regionData.page;\n    const region = new TextureRegion(texture, left, top, width, height, regionData, invTexWidth, invTexHeight);\n    region.originalWidth = width;\n    region.originalHeight = height;\n    region.offsetX = 0;\n    region.offsetY = 0;\n    regions.push(region);\n  }\n\n  return {\n    getLineHeight() {\n      return pageImage.lineHeight;\n    },\n\n    getPages() {\n      return pages;\n    },\n\n    getRegions() {\n      return regions;\n    },\n\n    createRenderer(displayWidth) {\n      return new TextRenderer(pageImage, regions, kerningsData, displayWidth);\n    }\n\n  };\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}