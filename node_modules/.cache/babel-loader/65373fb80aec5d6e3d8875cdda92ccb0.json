{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sprite = void 0;\n\nvar Utils_1 = require(\"./Utils\");\n\nvar Vector2_1 = require(\"./Vector2\");\n/* eslint-disable */\n\n\nvar X1 = 0;\nvar Y1 = 1;\nvar C1R = 2;\nvar C1G = 3;\nvar C1B = 4;\nvar C1A = 5;\nvar U1 = 6;\nvar V1 = 7;\nvar C1R2 = 8;\nvar C1G2 = 9;\nvar C1B2 = 10;\nvar C1A2 = 11;\nvar X2 = 12;\nvar Y2 = 13;\nvar C2R = 14;\nvar C2G = 15;\nvar C2B = 16;\nvar C2A = 17;\nvar U2 = 18;\nvar V2 = 19;\nvar C2R2 = 20;\nvar C2G2 = 21;\nvar C2B2 = 22;\nvar C2A2 = 23;\nvar X3 = 24;\nvar Y3 = 25;\nvar C3R = 26;\nvar C3G = 27;\nvar C3B = 28;\nvar C3A = 29;\nvar U3 = 30;\nvar V3 = 31;\nvar C3R2 = 32;\nvar C3G2 = 33;\nvar C3B2 = 34;\nvar C3A2 = 35;\nvar X4 = 36;\nvar Y4 = 37;\nvar C4R = 38;\nvar C4G = 39;\nvar C4B = 40;\nvar C4A = 41;\nvar U4 = 42;\nvar V4 = 43;\nvar C4R2 = 44;\nvar C4G2 = 45;\nvar C4B2 = 46;\nvar C4A2 = 47;\n/* eslint-enable */\n\n/**\r\n * An unoptimized version of Sprite. Always calculate all vertices, never update partially. Will improve later after refactoring the SpriteBatch.\r\n */\n\nvar Sprite = /*#__PURE__*/function () {\n  function Sprite(region) {\n    _classCallCheck(this, Sprite);\n\n    this.region = region;\n    this.dirty = false;\n    this.position = new Vector2_1.Vector2(0, 0);\n    this.size = new Vector2_1.Vector2(0, 0);\n    this.origin = new Vector2_1.Vector2(0, 0);\n    this.scale = new Vector2_1.Vector2(1, 1);\n    this.color = new Utils_1.Color(1, 1, 1, 1);\n    this.rotation = 0;\n    this.vertices = new Float32Array(48);\n    this.bounds = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    this.setSize(region.width, region.height);\n    this.setOrigin(region.width / 2, region.height / 2);\n  }\n\n  _createClass(Sprite, [{\n    key: \"set\",\n    value: function set(sprite) {\n      this.region = sprite.region;\n      this.position.setVector(sprite.position);\n      this.size.setVector(sprite.size);\n      this.origin.setVector(sprite.origin);\n      this.rotation = sprite.rotation;\n      this.scale.setVector(sprite.scale);\n      this.color.setFromColor(sprite.color);\n      this.dirty = true;\n    }\n  }, {\n    key: \"setBounds\",\n    value: function setBounds(x, y, width, height) {\n      this.setPosition(x, y);\n      this.setSize(x, y);\n      this.dirty = true;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.size.set(width, height);\n      this.dirty = true;\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(x, y) {\n      this.position.set(x, y);\n      this.dirty = true;\n    }\n  }, {\n    key: \"setOriginBasedPosition\",\n    value: function setOriginBasedPosition(x, y) {\n      this.setPosition(x - this.origin.x, y - this.origin.y);\n    }\n  }, {\n    key: \"setX\",\n    value: function setX(x) {\n      this.position.x = x;\n      this.dirty = true;\n    }\n  }, {\n    key: \"setY\",\n    value: function setY(y) {\n      this.position.y = y;\n      this.dirty = true;\n    }\n    /** Sets the x position so that it is centered on the given x parameter */\n\n  }, {\n    key: \"setCenterX\",\n    value: function setCenterX(x) {\n      this.setX(x - this.size.x / 2);\n    }\n    /** Sets the y position so that it is centered on the given y parameter */\n\n  }, {\n    key: \"setCenterY\",\n    value: function setCenterY(y) {\n      this.setY(y - this.size.y / 2);\n    }\n    /** Sets the position so that the sprite is centered on (x, y) */\n\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(x, y) {\n      this.setPosition(x - this.size.x / 2, y - this.size.y / 2);\n    }\n    /** Sets the x position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are\r\n     * changed, it is slightly more efficient to translate after those operations. */\n\n  }, {\n    key: \"translateX\",\n    value: function translateX(xAmount) {\n      this.translate(xAmount, 0);\n    }\n    /** Sets the y position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are\r\n     * changed, it is slightly more efficient to translate after those operations. */\n\n  }, {\n    key: \"translateY\",\n    value: function translateY(yAmount) {\n      this.translate(0, yAmount);\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(xAmount, yAmount) {\n      this.position.add(xAmount, yAmount);\n      this.dirty = true;\n    }\n    /** Sets the color used to tint this sprite. Default is {@link Color#WHITE}. */\n\n  }, {\n    key: \"setColor\",\n    value: function setColor(tint) {\n      this.color.setFromColor(tint);\n      this.dirty = true;\n    }\n    /** Sets the alpha portion of the color used to tint this sprite. */\n\n  }, {\n    key: \"setAlpha\",\n    value: function setAlpha(a) {\n      this.color.a = a;\n      this.dirty = true;\n    }\n    /** Sets the origin in relation to the sprite's position for scaling and rotation. */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(originX, originY) {\n      this.origin.set(originX, originY);\n      this.dirty = true;\n    }\n    /** Place origin in the center of the sprite */\n\n  }, {\n    key: \"setOriginCenter\",\n    value: function setOriginCenter() {\n      this.origin.set(this.size.x / 2, this.size.y / 2);\n      this.dirty = true;\n    }\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rad) {\n      this.rotation = rad;\n      this.dirty = true;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.rotation;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(rad) {\n      if (rad === 0) return;\n      this.rotation += rad;\n      this.dirty = true;\n    }\n    /** Sets the sprite's scale for both X and Y. The sprite scales out from the origin. This will not affect the values returned\r\n     * by {@link #getWidth()} and {@link #getHeight()} */\n\n  }, {\n    key: \"setScale\",\n    value: function setScale(scaleX, scaleY) {\n      this.scale.set(scaleX, scaleY);\n      this.dirty = true;\n    }\n    /** Sets the sprite's scale relative to the current scale. for example: original scale 2 -> sprite.scale(4) -> final scale 6.\r\n     * The sprite scales out from the origin. This will not affect the values returned by {@link #getWidth()} and\r\n     * {@link #getHeight()} */\n\n  }, {\n    key: \"applyScale\",\n    value: function applyScale(amount) {\n      this.scale.scale(amount);\n      this.dirty = true;\n    }\n    /** Returns the packed vertices, colors, and texture coordinates for this sprite. */\n\n  }, {\n    key: \"getVertices\",\n    value: function getVertices() {\n      var yDown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var vertices = this.vertices,\n          region = this.region;\n\n      if (!this.dirty) {\n        return vertices;\n      }\n\n      var x = this.position.x;\n      var y = this.position.y;\n      var width = this.size.x;\n      var height = this.size.y;\n      var originX = this.origin.x;\n      var originY = this.origin.y;\n      var rotation = this.rotation;\n      var scaleX = this.scale.x;\n      var scaleY = this.scale.y;\n      var ou1 = region.u;\n      var ov1 = region.v;\n      var ou2 = region.u2;\n      var ov2 = region.v2;\n      var color = this.color;\n      var rotate = region.rotated;\n      var xRatio = width / region.originalWidth;\n      var yRatio = height / region.originalHeight;\n      var drawWidth = region.width * xRatio;\n      var drawHeight = region.height * yRatio;\n      var drawX = x + region.offsetX * xRatio;\n      var drawY = 0;\n\n      if (yDown) {\n        drawY = y + height - region.offsetY * yRatio - drawHeight;\n      } else {\n        drawY = y + region.offsetY * yRatio;\n      }\n\n      x = drawX;\n      y = drawY;\n      width = drawWidth;\n      height = drawHeight;\n\n      if (yDown) {\n        var tmpV1 = ov1;\n        ov1 = ov2;\n        ov2 = tmpV1;\n      }\n\n      var x1 = -originX;\n      var x2 = width - originX;\n      var x3 = width - originX;\n      var x4 = -originX;\n      var y1 = -originY;\n      var y2 = -originY;\n      var y3 = height - originY;\n      var y4 = height - originY;\n\n      if (scaleX !== 1) {\n        x1 = x1 * scaleX;\n        x2 = x2 * scaleX;\n        x3 = x3 * scaleX;\n        x4 = x4 * scaleX;\n      }\n\n      if (scaleY !== 1) {\n        y1 = y1 * scaleY;\n        y2 = y2 * scaleY;\n        y3 = y3 * scaleY;\n        y4 = y4 * scaleY;\n      }\n\n      if (rotation !== 0) {\n        var cos = Math.cos(rotation);\n        var sin = Math.sin(rotation);\n        var rotatedX1 = cos * x1 - sin * y1;\n        var rotatedY1 = sin * x1 + cos * y1;\n        var rotatedX2 = cos * x2 - sin * y2;\n        var rotatedY2 = sin * x2 + cos * y2;\n        var rotatedX3 = cos * x3 - sin * y3;\n        var rotatedY3 = sin * x3 + cos * y3;\n        var rotatedX4 = cos * x4 - sin * y4;\n        var rotatedY4 = sin * x4 + cos * y4;\n        x1 = rotatedX1;\n        x2 = rotatedX2;\n        x3 = rotatedX3;\n        x4 = rotatedX4;\n        y1 = rotatedY1;\n        y2 = rotatedY2;\n        y3 = rotatedY3;\n        y4 = rotatedY4;\n      }\n\n      x1 += x + originX;\n      x2 += x + originX;\n      x3 += x + originX;\n      x4 += x + originX;\n      y1 += y + originY;\n      y2 += y + originY;\n      y3 += y + originY;\n      y4 += y + originY;\n      var u1 = ou1;\n      var v1 = ov1;\n      var u2 = ou2;\n      var v2 = ov2;\n      var u3 = u2;\n      var v3 = v1;\n      var u4 = u1;\n      var v4 = v2;\n\n      if (rotate) {\n        if (yDown) {\n          u1 = ou1;\n          v1 = ov2;\n          u2 = ou2;\n          v2 = ov1;\n          u3 = ou1;\n          v3 = ov1;\n          u4 = ou2;\n          v4 = ov2;\n        } else {\n          u1 = ou2;\n          v1 = ov1;\n          u2 = ou1;\n          v2 = ov2;\n          u3 = ou2;\n          v3 = ov2;\n          u4 = ou1;\n          v4 = ov1;\n        }\n      }\n\n      var i = 0;\n      vertices[i++] = x1;\n      vertices[i++] = y1;\n      vertices[i++] = color.r;\n      vertices[i++] = color.g;\n      vertices[i++] = color.b;\n      vertices[i++] = color.a;\n      vertices[i++] = u1;\n      vertices[i++] = v1;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = x2;\n      vertices[i++] = y2;\n      vertices[i++] = color.r;\n      vertices[i++] = color.g;\n      vertices[i++] = color.b;\n      vertices[i++] = color.a;\n      vertices[i++] = u3;\n      vertices[i++] = v3;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = x3;\n      vertices[i++] = y3;\n      vertices[i++] = color.r;\n      vertices[i++] = color.g;\n      vertices[i++] = color.b;\n      vertices[i++] = color.a;\n      vertices[i++] = u2;\n      vertices[i++] = v2;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = x4;\n      vertices[i++] = y4;\n      vertices[i++] = color.r;\n      vertices[i++] = color.g;\n      vertices[i++] = color.b;\n      vertices[i++] = color.a;\n      vertices[i++] = u4;\n      vertices[i++] = v4;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i++] = 0;\n      vertices[i] = 0;\n      return vertices;\n    }\n    /** Returns the bounding axis aligned {@link Rectangle} that bounds this sprite. The rectangles x and y coordinates describe\r\n     * its bottom left corner. If you change the position or size of the sprite, you have to fetch the triangle again for it to be\r\n     * recomputed.\r\n     *\r\n     * @return the bounding Rectangle */\n\n  }, {\n    key: \"getBoundingRectangle\",\n    value: function getBoundingRectangle() {\n      var vertices = this.vertices;\n      var minx = vertices[X1];\n      var miny = vertices[Y1];\n      var maxx = vertices[X1];\n      var maxy = vertices[Y1];\n      minx = minx > vertices[X2] ? vertices[X2] : minx;\n      minx = minx > vertices[X3] ? vertices[X3] : minx;\n      minx = minx > vertices[X4] ? vertices[X4] : minx;\n      maxx = maxx < vertices[X2] ? vertices[X2] : maxx;\n      maxx = maxx < vertices[X3] ? vertices[X3] : maxx;\n      maxx = maxx < vertices[X4] ? vertices[X4] : maxx;\n      miny = miny > vertices[Y2] ? vertices[Y2] : miny;\n      miny = miny > vertices[Y3] ? vertices[Y3] : miny;\n      miny = miny > vertices[Y4] ? vertices[Y4] : miny;\n      maxy = maxy < vertices[Y2] ? vertices[Y2] : maxy;\n      maxy = maxy < vertices[Y3] ? vertices[Y3] : maxy;\n      maxy = maxy < vertices[Y4] ? vertices[Y4] : maxy;\n      this.bounds.x = minx;\n      this.bounds.y = miny;\n      this.bounds.width = maxx - minx;\n      this.bounds.height = maxy - miny;\n      return this.bounds;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(batch) {\n      batch.drawVertices(this.region.texture, this.getVertices(batch.yDown));\n    }\n  }, {\n    key: \"drawWithAlpha\",\n    value: function drawWithAlpha(batch, alphaModulation) {\n      var oldAlpha = this.getColor().a;\n      this.setAlpha(oldAlpha * alphaModulation);\n      this.draw(batch);\n      this.setAlpha(oldAlpha);\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      return this.position.x;\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      return this.position.y;\n    }\n    /** @return the width of the sprite, not accounting for scale. */\n\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.size.x;\n    }\n    /** @return the height of the sprite, not accounting for scale. */\n\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.size.y;\n    }\n    /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of\r\n     * scaling {@link #setScale(float, float)} */\n\n  }, {\n    key: \"getOriginX\",\n    value: function getOriginX() {\n      return this.origin.x;\n    }\n    /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of\r\n     * scaling {@link #setScale(float, float)} */\n\n  }, {\n    key: \"getOriginY\",\n    value: function getOriginY() {\n      return this.origin.y;\n    }\n    /** X scale of the sprite, independent of size set by {@link #setSize(float, float)} */\n\n  }, {\n    key: \"getScaleX\",\n    value: function getScaleX() {\n      return this.scale.x;\n    }\n    /** Y scale of the sprite, independent of size set by {@link #setSize(float, float)} */\n\n  }, {\n    key: \"getScaleY\",\n    value: function getScaleY() {\n      return this.scale.y;\n    }\n    /** Returns the color of this sprite. If the returned instance is manipulated, {@link #setColor(Color)} must be called\r\n     * afterward. */\n\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      return this.color;\n    }\n  }]);\n\n  return Sprite;\n}();\n\nexports.Sprite = Sprite;","map":{"version":3,"names":["Object","defineProperty","exports","value","Sprite","Utils_1","require","Vector2_1","X1","Y1","C1R","C1G","C1B","C1A","U1","V1","C1R2","C1G2","C1B2","C1A2","X2","Y2","C2R","C2G","C2B","C2A","U2","V2","C2R2","C2G2","C2B2","C2A2","X3","Y3","C3R","C3G","C3B","C3A","U3","V3","C3R2","C3G2","C3B2","C3A2","X4","Y4","C4R","C4G","C4B","C4A","U4","V4","C4R2","C4G2","C4B2","C4A2","region","dirty","position","Vector2","size","origin","scale","color","Color","rotation","vertices","Float32Array","bounds","x","y","width","height","setSize","setOrigin","sprite","setVector","setFromColor","setPosition","set","setX","setY","xAmount","translate","yAmount","add","tint","a","originX","originY","rad","scaleX","scaleY","amount","yDown","ou1","u","ov1","v","ou2","u2","ov2","v2","rotate","rotated","xRatio","originalWidth","yRatio","originalHeight","drawWidth","drawHeight","drawX","offsetX","drawY","offsetY","tmpV1","x1","x2","x3","x4","y1","y2","y3","y4","cos","Math","sin","rotatedX1","rotatedY1","rotatedX2","rotatedY2","rotatedX3","rotatedY3","rotatedX4","rotatedY4","u1","v1","u3","v3","u4","v4","i","r","g","b","minx","miny","maxx","maxy","batch","drawVertices","texture","getVertices","alphaModulation","oldAlpha","getColor","setAlpha","draw"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/Sprite.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Sprite = void 0;\r\nconst Utils_1 = require(\"./Utils\");\r\nconst Vector2_1 = require(\"./Vector2\");\r\n/* eslint-disable */\r\nconst X1 = 0;\r\nconst Y1 = 1;\r\nconst C1R = 2;\r\nconst C1G = 3;\r\nconst C1B = 4;\r\nconst C1A = 5;\r\nconst U1 = 6;\r\nconst V1 = 7;\r\nconst C1R2 = 8;\r\nconst C1G2 = 9;\r\nconst C1B2 = 10;\r\nconst C1A2 = 11;\r\nconst X2 = 12;\r\nconst Y2 = 13;\r\nconst C2R = 14;\r\nconst C2G = 15;\r\nconst C2B = 16;\r\nconst C2A = 17;\r\nconst U2 = 18;\r\nconst V2 = 19;\r\nconst C2R2 = 20;\r\nconst C2G2 = 21;\r\nconst C2B2 = 22;\r\nconst C2A2 = 23;\r\nconst X3 = 24;\r\nconst Y3 = 25;\r\nconst C3R = 26;\r\nconst C3G = 27;\r\nconst C3B = 28;\r\nconst C3A = 29;\r\nconst U3 = 30;\r\nconst V3 = 31;\r\nconst C3R2 = 32;\r\nconst C3G2 = 33;\r\nconst C3B2 = 34;\r\nconst C3A2 = 35;\r\nconst X4 = 36;\r\nconst Y4 = 37;\r\nconst C4R = 38;\r\nconst C4G = 39;\r\nconst C4B = 40;\r\nconst C4A = 41;\r\nconst U4 = 42;\r\nconst V4 = 43;\r\nconst C4R2 = 44;\r\nconst C4G2 = 45;\r\nconst C4B2 = 46;\r\nconst C4A2 = 47;\r\n/* eslint-enable */\r\n/**\r\n * An unoptimized version of Sprite. Always calculate all vertices, never update partially. Will improve later after refactoring the SpriteBatch.\r\n */\r\nclass Sprite {\r\n    constructor(region) {\r\n        this.region = region;\r\n        this.dirty = false;\r\n        this.position = new Vector2_1.Vector2(0, 0);\r\n        this.size = new Vector2_1.Vector2(0, 0);\r\n        this.origin = new Vector2_1.Vector2(0, 0);\r\n        this.scale = new Vector2_1.Vector2(1, 1);\r\n        this.color = new Utils_1.Color(1, 1, 1, 1);\r\n        this.rotation = 0;\r\n        this.vertices = new Float32Array(48);\r\n        this.bounds = {\r\n            x: 0,\r\n            y: 0,\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        this.setSize(region.width, region.height);\r\n        this.setOrigin(region.width / 2, region.height / 2);\r\n    }\r\n    set(sprite) {\r\n        this.region = sprite.region;\r\n        this.position.setVector(sprite.position);\r\n        this.size.setVector(sprite.size);\r\n        this.origin.setVector(sprite.origin);\r\n        this.rotation = sprite.rotation;\r\n        this.scale.setVector(sprite.scale);\r\n        this.color.setFromColor(sprite.color);\r\n        this.dirty = true;\r\n    }\r\n    setBounds(x, y, width, height) {\r\n        this.setPosition(x, y);\r\n        this.setSize(x, y);\r\n        this.dirty = true;\r\n    }\r\n    setSize(width, height) {\r\n        this.size.set(width, height);\r\n        this.dirty = true;\r\n    }\r\n    setPosition(x, y) {\r\n        this.position.set(x, y);\r\n        this.dirty = true;\r\n    }\r\n    setOriginBasedPosition(x, y) {\r\n        this.setPosition(x - this.origin.x, y - this.origin.y);\r\n    }\r\n    setX(x) {\r\n        this.position.x = x;\r\n        this.dirty = true;\r\n    }\r\n    setY(y) {\r\n        this.position.y = y;\r\n        this.dirty = true;\r\n    }\r\n    /** Sets the x position so that it is centered on the given x parameter */\r\n    setCenterX(x) {\r\n        this.setX(x - this.size.x / 2);\r\n    }\r\n    /** Sets the y position so that it is centered on the given y parameter */\r\n    setCenterY(y) {\r\n        this.setY(y - this.size.y / 2);\r\n    }\r\n    /** Sets the position so that the sprite is centered on (x, y) */\r\n    setCenter(x, y) {\r\n        this.setPosition(x - this.size.x / 2, y - this.size.y / 2);\r\n    }\r\n    /** Sets the x position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are\r\n     * changed, it is slightly more efficient to translate after those operations. */\r\n    translateX(xAmount) {\r\n        this.translate(xAmount, 0);\r\n    }\r\n    /** Sets the y position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are\r\n     * changed, it is slightly more efficient to translate after those operations. */\r\n    translateY(yAmount) {\r\n        this.translate(0, yAmount);\r\n    }\r\n    translate(xAmount, yAmount) {\r\n        this.position.add(xAmount, yAmount);\r\n        this.dirty = true;\r\n    }\r\n    /** Sets the color used to tint this sprite. Default is {@link Color#WHITE}. */\r\n    setColor(tint) {\r\n        this.color.setFromColor(tint);\r\n        this.dirty = true;\r\n    }\r\n    /** Sets the alpha portion of the color used to tint this sprite. */\r\n    setAlpha(a) {\r\n        this.color.a = a;\r\n        this.dirty = true;\r\n    }\r\n    /** Sets the origin in relation to the sprite's position for scaling and rotation. */\r\n    setOrigin(originX, originY) {\r\n        this.origin.set(originX, originY);\r\n        this.dirty = true;\r\n    }\r\n    /** Place origin in the center of the sprite */\r\n    setOriginCenter() {\r\n        this.origin.set(this.size.x / 2, this.size.y / 2);\r\n        this.dirty = true;\r\n    }\r\n    setRotation(rad) {\r\n        this.rotation = rad;\r\n        this.dirty = true;\r\n    }\r\n    getRotation() {\r\n        return this.rotation;\r\n    }\r\n    rotate(rad) {\r\n        if (rad === 0)\r\n            return;\r\n        this.rotation += rad;\r\n        this.dirty = true;\r\n    }\r\n    /** Sets the sprite's scale for both X and Y. The sprite scales out from the origin. This will not affect the values returned\r\n     * by {@link #getWidth()} and {@link #getHeight()} */\r\n    setScale(scaleX, scaleY) {\r\n        this.scale.set(scaleX, scaleY);\r\n        this.dirty = true;\r\n    }\r\n    /** Sets the sprite's scale relative to the current scale. for example: original scale 2 -> sprite.scale(4) -> final scale 6.\r\n     * The sprite scales out from the origin. This will not affect the values returned by {@link #getWidth()} and\r\n     * {@link #getHeight()} */\r\n    applyScale(amount) {\r\n        this.scale.scale(amount);\r\n        this.dirty = true;\r\n    }\r\n    /** Returns the packed vertices, colors, and texture coordinates for this sprite. */\r\n    getVertices(yDown = false) {\r\n        const { vertices, region } = this;\r\n        if (!this.dirty) {\r\n            return vertices;\r\n        }\r\n        let x = this.position.x;\r\n        let y = this.position.y;\r\n        let width = this.size.x;\r\n        let height = this.size.y;\r\n        let originX = this.origin.x;\r\n        let originY = this.origin.y;\r\n        let rotation = this.rotation;\r\n        let scaleX = this.scale.x;\r\n        let scaleY = this.scale.y;\r\n        let ou1 = region.u;\r\n        let ov1 = region.v;\r\n        let ou2 = region.u2;\r\n        let ov2 = region.v2;\r\n        const color = this.color;\r\n        let rotate = region.rotated;\r\n        const xRatio = width / region.originalWidth;\r\n        const yRatio = height / region.originalHeight;\r\n        const drawWidth = region.width * xRatio;\r\n        const drawHeight = region.height * yRatio;\r\n        const drawX = x + region.offsetX * xRatio;\r\n        let drawY = 0;\r\n        if (yDown) {\r\n            drawY = y + height - region.offsetY * yRatio - drawHeight;\r\n        }\r\n        else {\r\n            drawY = y + region.offsetY * yRatio;\r\n        }\r\n        x = drawX;\r\n        y = drawY;\r\n        width = drawWidth;\r\n        height = drawHeight;\r\n        if (yDown) {\r\n            const tmpV1 = ov1;\r\n            ov1 = ov2;\r\n            ov2 = tmpV1;\r\n        }\r\n        let x1 = -originX;\r\n        let x2 = width - originX;\r\n        let x3 = width - originX;\r\n        let x4 = -originX;\r\n        let y1 = -originY;\r\n        let y2 = -originY;\r\n        let y3 = height - originY;\r\n        let y4 = height - originY;\r\n        if (scaleX !== 1) {\r\n            x1 = x1 * scaleX;\r\n            x2 = x2 * scaleX;\r\n            x3 = x3 * scaleX;\r\n            x4 = x4 * scaleX;\r\n        }\r\n        if (scaleY !== 1) {\r\n            y1 = y1 * scaleY;\r\n            y2 = y2 * scaleY;\r\n            y3 = y3 * scaleY;\r\n            y4 = y4 * scaleY;\r\n        }\r\n        if (rotation !== 0) {\r\n            var cos = Math.cos(rotation);\r\n            var sin = Math.sin(rotation);\r\n            var rotatedX1 = cos * x1 - sin * y1;\r\n            var rotatedY1 = sin * x1 + cos * y1;\r\n            var rotatedX2 = cos * x2 - sin * y2;\r\n            var rotatedY2 = sin * x2 + cos * y2;\r\n            var rotatedX3 = cos * x3 - sin * y3;\r\n            var rotatedY3 = sin * x3 + cos * y3;\r\n            var rotatedX4 = cos * x4 - sin * y4;\r\n            var rotatedY4 = sin * x4 + cos * y4;\r\n            x1 = rotatedX1;\r\n            x2 = rotatedX2;\r\n            x3 = rotatedX3;\r\n            x4 = rotatedX4;\r\n            y1 = rotatedY1;\r\n            y2 = rotatedY2;\r\n            y3 = rotatedY3;\r\n            y4 = rotatedY4;\r\n        }\r\n        x1 += x + originX;\r\n        x2 += x + originX;\r\n        x3 += x + originX;\r\n        x4 += x + originX;\r\n        y1 += y + originY;\r\n        y2 += y + originY;\r\n        y3 += y + originY;\r\n        y4 += y + originY;\r\n        let u1 = ou1;\r\n        let v1 = ov1;\r\n        let u2 = ou2;\r\n        let v2 = ov2;\r\n        let u3 = u2;\r\n        let v3 = v1;\r\n        let u4 = u1;\r\n        let v4 = v2;\r\n        if (rotate) {\r\n            if (yDown) {\r\n                u1 = ou1;\r\n                v1 = ov2;\r\n                u2 = ou2;\r\n                v2 = ov1;\r\n                u3 = ou1;\r\n                v3 = ov1;\r\n                u4 = ou2;\r\n                v4 = ov2;\r\n            }\r\n            else {\r\n                u1 = ou2;\r\n                v1 = ov1;\r\n                u2 = ou1;\r\n                v2 = ov2;\r\n                u3 = ou2;\r\n                v3 = ov2;\r\n                u4 = ou1;\r\n                v4 = ov1;\r\n            }\r\n        }\r\n        var i = 0;\r\n        vertices[i++] = x1;\r\n        vertices[i++] = y1;\r\n        vertices[i++] = color.r;\r\n        vertices[i++] = color.g;\r\n        vertices[i++] = color.b;\r\n        vertices[i++] = color.a;\r\n        vertices[i++] = u1;\r\n        vertices[i++] = v1;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = x2;\r\n        vertices[i++] = y2;\r\n        vertices[i++] = color.r;\r\n        vertices[i++] = color.g;\r\n        vertices[i++] = color.b;\r\n        vertices[i++] = color.a;\r\n        vertices[i++] = u3;\r\n        vertices[i++] = v3;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = x3;\r\n        vertices[i++] = y3;\r\n        vertices[i++] = color.r;\r\n        vertices[i++] = color.g;\r\n        vertices[i++] = color.b;\r\n        vertices[i++] = color.a;\r\n        vertices[i++] = u2;\r\n        vertices[i++] = v2;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = x4;\r\n        vertices[i++] = y4;\r\n        vertices[i++] = color.r;\r\n        vertices[i++] = color.g;\r\n        vertices[i++] = color.b;\r\n        vertices[i++] = color.a;\r\n        vertices[i++] = u4;\r\n        vertices[i++] = v4;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i++] = 0;\r\n        vertices[i] = 0;\r\n        return vertices;\r\n    }\r\n    /** Returns the bounding axis aligned {@link Rectangle} that bounds this sprite. The rectangles x and y coordinates describe\r\n     * its bottom left corner. If you change the position or size of the sprite, you have to fetch the triangle again for it to be\r\n     * recomputed.\r\n     *\r\n     * @return the bounding Rectangle */\r\n    getBoundingRectangle() {\r\n        const vertices = this.vertices;\r\n        let minx = vertices[X1];\r\n        let miny = vertices[Y1];\r\n        let maxx = vertices[X1];\r\n        let maxy = vertices[Y1];\r\n        minx = minx > vertices[X2] ? vertices[X2] : minx;\r\n        minx = minx > vertices[X3] ? vertices[X3] : minx;\r\n        minx = minx > vertices[X4] ? vertices[X4] : minx;\r\n        maxx = maxx < vertices[X2] ? vertices[X2] : maxx;\r\n        maxx = maxx < vertices[X3] ? vertices[X3] : maxx;\r\n        maxx = maxx < vertices[X4] ? vertices[X4] : maxx;\r\n        miny = miny > vertices[Y2] ? vertices[Y2] : miny;\r\n        miny = miny > vertices[Y3] ? vertices[Y3] : miny;\r\n        miny = miny > vertices[Y4] ? vertices[Y4] : miny;\r\n        maxy = maxy < vertices[Y2] ? vertices[Y2] : maxy;\r\n        maxy = maxy < vertices[Y3] ? vertices[Y3] : maxy;\r\n        maxy = maxy < vertices[Y4] ? vertices[Y4] : maxy;\r\n        this.bounds.x = minx;\r\n        this.bounds.y = miny;\r\n        this.bounds.width = maxx - minx;\r\n        this.bounds.height = maxy - miny;\r\n        return this.bounds;\r\n    }\r\n    draw(batch) {\r\n        batch.drawVertices(this.region.texture, this.getVertices(batch.yDown));\r\n    }\r\n    drawWithAlpha(batch, alphaModulation) {\r\n        const oldAlpha = this.getColor().a;\r\n        this.setAlpha(oldAlpha * alphaModulation);\r\n        this.draw(batch);\r\n        this.setAlpha(oldAlpha);\r\n    }\r\n    getX() {\r\n        return this.position.x;\r\n    }\r\n    getY() {\r\n        return this.position.y;\r\n    }\r\n    /** @return the width of the sprite, not accounting for scale. */\r\n    getWidth() {\r\n        return this.size.x;\r\n    }\r\n    /** @return the height of the sprite, not accounting for scale. */\r\n    getHeight() {\r\n        return this.size.y;\r\n    }\r\n    /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of\r\n     * scaling {@link #setScale(float, float)} */\r\n    getOriginX() {\r\n        return this.origin.x;\r\n    }\r\n    /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of\r\n     * scaling {@link #setScale(float, float)} */\r\n    getOriginY() {\r\n        return this.origin.y;\r\n    }\r\n    /** X scale of the sprite, independent of size set by {@link #setSize(float, float)} */\r\n    getScaleX() {\r\n        return this.scale.x;\r\n    }\r\n    /** Y scale of the sprite, independent of size set by {@link #setSize(float, float)} */\r\n    getScaleY() {\r\n        return this.scale.y;\r\n    }\r\n    /** Returns the color of this sprite. If the returned instance is manipulated, {@link #setColor(Color)} must be called\r\n     * afterward. */\r\n    getColor() {\r\n        return this.color;\r\n    }\r\n}\r\nexports.Sprite = Sprite;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}