{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, ViewportInputHandler } from \"gdxts\";\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport);\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = shapeRenderer.rect(true, 0, 0, 84, 84);\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000);\n    shapeRenderer.end(); //draw background\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background, 0, 0, 1000, 2000);\n    batch.draw(block, 100, 100, 84, 84);\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","ViewportInputHandler","init","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","inputHandler","background","load","bgRight","block","rect","getRandomInt","min","max","Math","floor","random","delta","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","end","draw"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\n  createGameLoop,\n  createStage,\n  createViewport,\n  InputEvent,\n  PolygonBatch,\n  ShapeRenderer,\n  Texture,\n  Vector2,\n  ViewportInputHandler,\n  BitmapFont,\n  TextureRegion,\n  Animation,\n  PlayMode,\n  Color,\n} from \"gdxts\";\n\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport);\n\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = shapeRenderer.rect(true, 0, 0, 84, 84);\n\n  function getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  createGameLoop((delta: number) => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000);\n    shapeRenderer.end();\n    //draw background\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background, 0, 0, 1000, 2000);\n    batch.draw(block, 100, 100, 84, 84);\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\n\ninit();\n"],"mappings":"AAAA,SACEA,cADF,EAEEC,WAFF,EAGEC,cAHF,EAKEC,YALF,EAMEC,aANF,EAOEC,OAPF,EASEC,oBATF,QAeO,OAfP;AAiBA,OAAO,MAAMC,IAAI,GAAG,YAAY;EAC9B,MAAMC,KAAK,GAAGP,WAAW,EAAzB;EACA,MAAMQ,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;EACA,MAAMC,QAAQ,GAAGT,cAAc,CAACO,MAAD,EAAS,IAAT,EAAe,IAAf,CAA/B;EACA,MAAMG,EAAE,GAAGD,QAAQ,CAACE,UAAT,EAAX;EACA,MAAMC,aAAa,GAAG,IAAIV,aAAJ,CAAkBQ,EAAlB,CAAtB;EACA,MAAMG,KAAK,GAAG,IAAIZ,YAAJ,CAAiBS,EAAjB,CAAd;EACA,MAAMI,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;EACA,MAAMC,YAAY,GAAG,IAAIZ,oBAAJ,CAAyBK,QAAzB,CAArB;EAEA,MAAMQ,UAAU,GAAG,MAAMd,OAAO,CAACe,IAAR,CAAaR,EAAb,EAAiB,gBAAjB,CAAzB;EACA,MAAMS,OAAO,GAAG,MAAMhB,OAAO,CAACe,IAAR,CAAaR,EAAb,EAAiB,WAAjB,CAAtB;EACA,MAAMU,KAAK,GAAGR,aAAa,CAACS,IAAd,CAAmB,IAAnB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,EAAnC,CAAd;;EAEA,SAASC,YAAT,CAAsBC,GAAtB,EAAmCC,GAAnC,EAAgD;IAC9C,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;EACD;;EAEDzB,cAAc,CAAE8B,KAAD,IAAmB;IAChClB,EAAE,CAACmB,KAAH,CAASnB,EAAE,CAACoB,gBAAZ;IACAlB,aAAa,CAACmB,aAAd,CAA4BjB,MAAM,CAACkB,cAAP,CAAsBC,MAAlD;IACArB,aAAa,CAACsB,KAAd;IACAtB,aAAa,CAACS,IAAd,CAAmB,IAAnB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,IAA/B,EAAqC,IAArC;IACAT,aAAa,CAACuB,GAAd,GALgC,CAMhC;;IACAtB,KAAK,CAACkB,aAAN,CAAoBjB,MAAM,CAACkB,cAAP,CAAsBC,MAA1C;IACApB,KAAK,CAACqB,KAAN;IACArB,KAAK,CAACuB,IAAN,CAAWnB,UAAX,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,IAA7B,EAAmC,IAAnC;IACAJ,KAAK,CAACuB,IAAN,CAAWhB,KAAX,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,EAA5B,EAAgC,EAAhC;IACAP,KAAK,CAACuB,IAAN,CAAWjB,OAAX,EAAoB,IAApB,EAA0B,CAA1B,EAA6B,GAA7B,EAAkC,IAAlC;IACAN,KAAK,CAACsB,GAAN;EACD,CAba,CAAd;AAcD,CAhCM;AAkCP9B,IAAI"},"metadata":{},"sourceType":"module"}