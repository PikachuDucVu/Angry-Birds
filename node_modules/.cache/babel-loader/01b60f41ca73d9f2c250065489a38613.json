{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2ContactListener, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { Animation, Color, createGameLoop, createStage, createViewport, InputEvent, PlayMode, PolygonBatch, ShapeRenderer, Texture, TextureRegion, Vector2, ViewportInputHandler } from \"gdxts\";\nconst WORLD_WIDTH = 1000;\nconst WORLD_HEIGHT = 500;\nconst contactListener = new b2ContactListener();\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\n  const circle = new b2CircleShape();\n  circle.m_radius = radius;\n  const fixtureDef = new b2FixtureDef();\n  fixtureDef.shape = circle; // fixtureDef.density = 1;\n\n  fixtureDef.restitution = 0.5; // bounce ball\n\n  fixtureDef.friction = 1;\n  const body = world.CreateBody(bodyDef);\n  body.CreateFixture(fixtureDef);\n  body.CreateFixture(circle);\n  return body;\n};\n\nconst createBox = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.5, height * 0.5);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const pig = await Texture.load(gl, \"./pig.png\");\n  const bird = await Texture.load(gl, \"./bird.png\");\n  const slingShot = await Texture.load(gl, \"./slingshot.png\");\n  const background = await Texture.load(gl, \"./background.png\");\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const shapeRenderer = new ShapeRenderer(gl);\n  const world = new b2World({\n    x: 0,\n    y: 10\n  });\n\n  contactListener.BeginContact = function (contact) {\n    // console.log(contact);\n    console.log(ball.GetUserData);\n  };\n\n  world.SetContactListener(contactListener);\n  const boxTexture = await Texture.load(gl, \"./testAnimation1.png\");\n  const regions = TextureRegion.splitTexture(boxTexture, 1, 4);\n  const testAnimation = new Animation(regions.slice(0, 4), 0.4);\n\n  for (let wall of wallData) {\n    createWall(world, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  const BOX_SIZE = 0.5;\n  const PIG_SIZE = 0.3;\n  const pigs = [];\n  const boxes = [];\n  let test1 = 6;\n  let test2 = 4.3;\n\n  for (let i = 0; i < 3; i++) {\n    test1 = 6 + i * 0.4;\n\n    for (let j = 0; j <= i; j++) {\n      boxes.push(createBox(world, test1 += 0.51, test2 -= 0.55, BOX_SIZE, BOX_SIZE));\n    }\n\n    if (i < 2) {\n      pigs.push(createBox(world, test1 + 0.5, test2 - 0.25, PIG_SIZE, PIG_SIZE));\n    }\n  }\n\n  const BALL_RADIUS = 0.2;\n  let ball = createBall(world, 2, 3.5, BALL_RADIUS);\n  let hasBirdOnSlingShot = true;\n  const originPosition = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  let slingPos = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  const inputHandler = new ViewportInputHandler(viewport);\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\n    if (inputHandler.isTouched()) {\n      slingPos = inputHandler.getTouchedWorldCoord();\n    }\n  });\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n    if (hasBirdOnSlingShot) {\n      ball.SetType(b2BodyType.b2_dynamicBody);\n      ball.ApplyLinearImpulseToCenter({\n        x: 7 * (originPosition.x - slingPos.x) / METER_TO_WORLD,\n        y: 7 * (originPosition.y - slingPos.y) / METER_TO_WORLD\n      }, true);\n      hasBirdOnSlingShot = false;\n    }\n  });\n  let frame = 0;\n  window.addEventListener(\"keydown\", function (e) {\n    console.log(e.key);\n\n    if (!hasBirdOnSlingShot && e.key === \"r\") {\n      world.DestroyBody(ball);\n      ball = createBall(world, 2, 3.5, BALL_RADIUS);\n      hasBirdOnSlingShot = true;\n    }\n  });\n  let region = testAnimation.getKeyFrame(frame, PlayMode.NORMAL);\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    world.Step(delta, 8, 3);\n    batch.setProjection(camera.combined);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    }\n\n    shapeRenderer.rect(true, 2 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD, Color.MAGENTA);\n    shapeRenderer.circle(true, ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD, BALL_RADIUS * METER_TO_WORLD, Color.RED);\n    shapeRenderer.end();\n    batch.begin();\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\n    batch.end();\n    shapeRenderer.begin();\n    shapeRenderer.circle(true, slingPos.x, slingPos.y, 0.1 * METER_TO_WORLD, Color.BLUE);\n    shapeRenderer.end();\n    batch.begin();\n\n    for (let box of boxes) {\n      region.draw(batch, box.GetPosition().x * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, box.GetPosition().y * METER_TO_WORLD - BOX_SIZE * METER_TO_WORLD / 2, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD); // shapeRenderer.rect(\n      //   true,\n      //   box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n      //   box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\n      //   BOX_SIZE * METER_TO_WORLD,\n      //   BOX_SIZE * METER_TO_WORLD,\n      //   Color.RED\n      // );\n    }\n\n    batch.draw(slingShot, 2 * METER_TO_WORLD, 3.5 * METER_TO_WORLD, 0.25 * METER_TO_WORLD, 0.7 * METER_TO_WORLD);\n\n    for (let box of pigs) {\n      batch.draw(pig, box.GetPosition().x * METER_TO_WORLD - PIG_SIZE * METER_TO_WORLD / 2, box.GetPosition().y * METER_TO_WORLD - PIG_SIZE * METER_TO_WORLD / 2, PIG_SIZE * METER_TO_WORLD, PIG_SIZE * METER_TO_WORLD); // console.log(box.GetContactList());\n    }\n\n    batch.draw(bird, ball.GetPosition().x * METER_TO_WORLD - 25, ball.GetPosition().y * METER_TO_WORLD - 25, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD);\n    frame += delta;\n\n    if (frame === 3) {\n      frame %= 3;\n    }\n\n    batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2ContactListener","b2FixtureDef","b2PolygonShape","b2World","Animation","Color","createGameLoop","createStage","createViewport","InputEvent","PlayMode","PolygonBatch","ShapeRenderer","Texture","TextureRegion","Vector2","ViewportInputHandler","WORLD_WIDTH","WORLD_HEIGHT","contactListener","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","CreateFixture","createBall","radius","circle","m_radius","fixtureDef","restitution","friction","createBox","b2_dynamicBody","WALL_COLOR","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","batch","setYDown","pig","load","bird","slingShot","background","mapData","fetch","then","res","json","wallData","layers","find","l","name","objects","shapeRenderer","BeginContact","contact","console","log","ball","GetUserData","SetContactListener","boxTexture","regions","splitTexture","testAnimation","slice","wall","BOX_SIZE","PIG_SIZE","pigs","boxes","test1","test2","i","j","push","BALL_RADIUS","hasBirdOnSlingShot","originPosition","GetPosition","slingPos","inputHandler","addEventListener","TouchMove","isTouched","getTouchedWorldCoord","TouchEnd","SetType","ApplyLinearImpulseToCenter","frame","window","e","key","DestroyBody","region","getKeyFrame","NORMAL","clearColor","delta","clear","COLOR_BUFFER_BIT","Step","setProjection","combined","begin","rect","WHITE","MAGENTA","RED","end","draw","BLUE","box"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Alloc,\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2Contact,\r\n  b2ContactListener,\r\n  b2Fixture,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Animation,\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  PlayMode,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  TextureRegion,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 1000;\r\nconst WORLD_HEIGHT = 500;\r\n\r\nconst contactListener = new b2ContactListener();\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n  // fixtureDef.density = 1;\r\n  fixtureDef.restitution = 0.5; // bounce ball\r\n  fixtureDef.friction = 1;\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.CreateFixture(circle);\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.5, height * 0.5);\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const pig = await Texture.load(gl, \"./pig.png\");\r\n  const bird = await Texture.load(gl, \"./bird.png\");\r\n  const slingShot = await Texture.load(gl, \"./slingshot.png\");\r\n  const background = await Texture.load(gl, \"./background.png\");\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n  contactListener.BeginContact = function (contact: b2Contact) {\r\n    // console.log(contact);\r\n    console.log(ball.GetUserData);\r\n  };\r\n\r\n  world.SetContactListener(contactListener);\r\n\r\n  const boxTexture = await Texture.load(gl, \"./testAnimation1.png\");\r\n  const regions = TextureRegion.splitTexture(boxTexture, 1, 4);\r\n  const testAnimation = new Animation(regions.slice(0, 4), 0.4);\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      world,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n\r\n  const BOX_SIZE = 0.5;\r\n  const PIG_SIZE = 0.3;\r\n  const pigs: b2Body[] = [];\r\n  const boxes: b2Body[] = [];\r\n  let test1 = 6;\r\n  let test2 = 4.3;\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    test1 = 6 + i * 0.4;\r\n    for (let j = 0; j <= i; j++) {\r\n      boxes.push(\r\n        createBox(world, (test1 += 0.51), (test2 -= 0.55), BOX_SIZE, BOX_SIZE)\r\n      );\r\n    }\r\n    if (i < 2) {\r\n      pigs.push(\r\n        createBox(world, test1 + 0.5, test2 - 0.25, PIG_SIZE, PIG_SIZE)\r\n      );\r\n    }\r\n  }\r\n\r\n  const BALL_RADIUS = 0.2;\r\n  let ball = createBall(world, 2, 3.5, BALL_RADIUS);\r\n  let hasBirdOnSlingShot = true;\r\n  const originPosition = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n  let slingPos = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n    if (inputHandler.isTouched()) {\r\n      slingPos = inputHandler.getTouchedWorldCoord();\r\n    }\r\n  });\r\n  inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n    if (hasBirdOnSlingShot) {\r\n      ball.SetType(b2BodyType.b2_dynamicBody);\r\n      ball.ApplyLinearImpulseToCenter(\r\n        {\r\n          x: (7 * (originPosition.x - slingPos.x)) / METER_TO_WORLD,\r\n          y: (7 * (originPosition.y - slingPos.y)) / METER_TO_WORLD,\r\n        },\r\n        true\r\n      );\r\n      hasBirdOnSlingShot = false;\r\n    }\r\n  });\r\n  let frame = 0;\r\n\r\n  window.addEventListener(\"keydown\", function (e) {\r\n    console.log(e.key);\r\n    if (!hasBirdOnSlingShot && e.key === \"r\") {\r\n      world.DestroyBody(ball);\r\n      ball = createBall(world, 2, 3.5, BALL_RADIUS);\r\n      hasBirdOnSlingShot = true;\r\n    }\r\n  });\r\n\r\n  let region = testAnimation.getKeyFrame(frame, PlayMode.NORMAL);\r\n  gl.clearColor(0, 0, 0, 1);\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    world.Step(delta, 8, 3);\r\n    batch.setProjection(camera.combined);\r\n\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n    shapeRenderer.rect(\r\n      true,\r\n      2 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD,\r\n      Color.MAGENTA\r\n    );\r\n    shapeRenderer.circle(\r\n      true,\r\n      ball.GetPosition().x * METER_TO_WORLD,\r\n      ball.GetPosition().y * METER_TO_WORLD,\r\n      BALL_RADIUS * METER_TO_WORLD,\r\n      Color.RED\r\n    );\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n    batch.draw(background, 0, 0, WORLD_WIDTH, WORLD_HEIGHT);\r\n    batch.end();\r\n\r\n    shapeRenderer.begin();\r\n    shapeRenderer.circle(\r\n      true,\r\n      slingPos.x,\r\n      slingPos.y,\r\n      0.1 * METER_TO_WORLD,\r\n      Color.BLUE\r\n    );\r\n\r\n    shapeRenderer.end();\r\n\r\n    batch.begin();\r\n    for (let box of boxes) {\r\n      region.draw(\r\n        batch,\r\n        box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n        box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD\r\n      );\r\n\r\n      // shapeRenderer.rect(\r\n      //   true,\r\n      //   box.GetPosition().x * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      //   box.GetPosition().y * METER_TO_WORLD - (BOX_SIZE * METER_TO_WORLD) / 2,\r\n      //   BOX_SIZE * METER_TO_WORLD,\r\n      //   BOX_SIZE * METER_TO_WORLD,\r\n      //   Color.RED\r\n      // );\r\n    }\r\n    batch.draw(\r\n      slingShot,\r\n      2 * METER_TO_WORLD,\r\n      3.5 * METER_TO_WORLD,\r\n      0.25 * METER_TO_WORLD,\r\n      0.7 * METER_TO_WORLD\r\n    );\r\n    for (let box of pigs) {\r\n      batch.draw(\r\n        pig,\r\n        box.GetPosition().x * METER_TO_WORLD - (PIG_SIZE * METER_TO_WORLD) / 2,\r\n        box.GetPosition().y * METER_TO_WORLD - (PIG_SIZE * METER_TO_WORLD) / 2,\r\n        PIG_SIZE * METER_TO_WORLD,\r\n        PIG_SIZE * METER_TO_WORLD\r\n      );\r\n      // console.log(box.GetContactList());\r\n    }\r\n\r\n    batch.draw(\r\n      bird,\r\n      ball.GetPosition().x * METER_TO_WORLD - 25,\r\n      ball.GetPosition().y * METER_TO_WORLD - 25,\r\n      BOX_SIZE * METER_TO_WORLD,\r\n      BOX_SIZE * METER_TO_WORLD\r\n    );\r\n    frame += delta;\r\n    if (frame === 3) {\r\n      frame %= 3;\r\n    }\r\n    batch.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}