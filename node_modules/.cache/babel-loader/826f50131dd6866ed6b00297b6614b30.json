{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fastbitset_1 = __importDefault(require(\"fastbitset\"));\n\nconst ComponentMapper_1 = require(\"./ComponentMapper\");\n\nclass World {\n  constructor() {\n    this.index = 0;\n    this.mappers = {};\n    this.componentBitsMap = [];\n    this.componentIndices = new Map();\n    this.currentComponentIndex = 0;\n    this.activeSystems = [];\n    this.passiveSystems = [];\n    this.injectionRegistry = {};\n    this.delta = 0;\n  }\n\n  getNewId() {\n    return this.index++;\n  }\n\n  createEntity() {\n    const id = this.getNewId();\n    return id;\n  }\n\n  getComponentBits(entityId) {\n    if (!this.componentBitsMap[entityId]) {\n      this.componentBitsMap[entityId] = new fastbitset_1.default();\n    }\n\n    return this.componentBitsMap[entityId];\n  }\n\n  getMapper(type) {\n    const typeIndex = this.getComponentIndex(type);\n    return this.getMapperByIndex(typeIndex);\n  }\n\n  getMapperByIndex(typeIndex) {\n    if (!this.mappers[typeIndex]) {\n      this.mappers[typeIndex] = new ComponentMapper_1.ComponentMapper();\n    }\n\n    return this.mappers[typeIndex];\n  }\n\n  getComponentIndex(type) {\n    let index = this.componentIndices.get(type);\n\n    if (index === undefined) {\n      index = this.currentComponentIndex++;\n      this.componentIndices.set(type, index);\n    }\n\n    return index;\n  }\n\n  createEntityByArchetype(archetype) {\n    const id = this.getNewId();\n    archetype.componentTypes.forEach(type => {\n      const component = new type();\n\n      if (!archetype.componentBitsInitialized) {\n        archetype.componentBits.add(this.getComponentIndex(type));\n      }\n\n      this.addComponent(id, component, false);\n    });\n    this.componentBitsMap[id] = archetype.componentBits;\n    return id;\n  }\n\n  addComponent(entityId, component) {\n    let updateComponentBits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const typeIndex = this.getComponentIndex(component.constructor);\n    const mapper = this.getMapperByIndex(typeIndex);\n    mapper.add(entityId, component);\n    if (updateComponentBits) this.getComponentBits(entityId).add(typeIndex);\n    return component;\n  }\n\n  getComponent(entityId, type) {\n    const mapper = this.getMapper(type);\n    return mapper.get(entityId);\n  }\n\n  getEntities(componentBits, iterator) {\n    for (let i = 0; i < this.componentBitsMap.length; i++) {\n      if (this.componentBitsMap[i]) {\n        const entityComponentBits = this.componentBitsMap[i];\n\n        if (componentBits.union_size(entityComponentBits) === entityComponentBits.size()) {\n          iterator(i);\n        }\n      }\n    }\n  }\n\n  addSystem(system) {\n    let active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    active ? this.activeSystems.push(system) : this.passiveSystems.push(system);\n    system.setWorld(this);\n    this.injectMapper(system);\n    this.inject(system);\n    system.initialized();\n  }\n\n  injectMapper(system) {\n    const type = system.constructor;\n    const injectPoints = type.__injectMapper__ || {};\n\n    for (let injectKey in injectPoints) {\n      const componentType = injectPoints[injectKey];\n      system[injectKey] = this.getMapper(componentType);\n    }\n  }\n\n  register(name, value) {\n    this.injectionRegistry[name] = value;\n  }\n\n  inject(object) {\n    const type = object.constructor;\n    const injectPoints = type.__inject__ || {};\n\n    for (let injectKey in injectPoints) {\n      const injectName = injectPoints[injectKey];\n      object[injectKey] = this.injectionRegistry[injectName];\n    }\n  }\n\n  dispose() {\n    for (let system of this.activeSystems) {\n      system.dispose();\n    }\n\n    for (let system of this.passiveSystems) {\n      system.dispose();\n    }\n  }\n\n  setDelta(delta) {\n    this.delta = delta;\n  }\n\n  processActiveSystem() {\n    for (let system of this.activeSystems) {\n      system.process();\n    }\n  }\n\n  processPassiveSystem() {\n    for (let system of this.passiveSystems) {\n      system.process();\n    }\n  }\n\n  deleteEntity(entityId) {\n    for (let type in this.mappers) {\n      this.mappers[type].remove(entityId);\n    }\n\n    delete this.componentBitsMap[entityId];\n  }\n\n  isEntityActive(entityId) {\n    return !!this.componentBitsMap[entityId];\n  }\n\n}\n\nexports.default = World;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","fastbitset_1","require","ComponentMapper_1","World","constructor","index","mappers","componentBitsMap","componentIndices","Map","currentComponentIndex","activeSystems","passiveSystems","injectionRegistry","delta","getNewId","createEntity","id","getComponentBits","entityId","default","getMapper","type","typeIndex","getComponentIndex","getMapperByIndex","ComponentMapper","get","undefined","set","createEntityByArchetype","archetype","componentTypes","forEach","component","componentBitsInitialized","componentBits","add","addComponent","updateComponentBits","mapper","getComponent","getEntities","iterator","i","length","entityComponentBits","union_size","size","addSystem","system","active","push","setWorld","injectMapper","inject","initialized","injectPoints","__injectMapper__","injectKey","componentType","register","name","object","__inject__","injectName","dispose","setDelta","processActiveSystem","process","processPassiveSystem","deleteEntity","remove","isEntityActive"],"sources":["D:/projects/test-game/node_modules/flat-ecs/lib/World.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fastbitset_1 = __importDefault(require(\"fastbitset\"));\nconst ComponentMapper_1 = require(\"./ComponentMapper\");\nclass World {\n    constructor() {\n        this.index = 0;\n        this.mappers = {};\n        this.componentBitsMap = [];\n        this.componentIndices = new Map();\n        this.currentComponentIndex = 0;\n        this.activeSystems = [];\n        this.passiveSystems = [];\n        this.injectionRegistry = {};\n        this.delta = 0;\n    }\n    getNewId() {\n        return this.index++;\n    }\n    createEntity() {\n        const id = this.getNewId();\n        return id;\n    }\n    getComponentBits(entityId) {\n        if (!this.componentBitsMap[entityId]) {\n            this.componentBitsMap[entityId] = new fastbitset_1.default();\n        }\n        return this.componentBitsMap[entityId];\n    }\n    getMapper(type) {\n        const typeIndex = this.getComponentIndex(type);\n        return this.getMapperByIndex(typeIndex);\n    }\n    getMapperByIndex(typeIndex) {\n        if (!this.mappers[typeIndex]) {\n            this.mappers[typeIndex] = new ComponentMapper_1.ComponentMapper();\n        }\n        return this.mappers[typeIndex];\n    }\n    getComponentIndex(type) {\n        let index = this.componentIndices.get(type);\n        if (index === undefined) {\n            index = this.currentComponentIndex++;\n            this.componentIndices.set(type, index);\n        }\n        return index;\n    }\n    createEntityByArchetype(archetype) {\n        const id = this.getNewId();\n        archetype.componentTypes.forEach(type => {\n            const component = new type();\n            if (!archetype.componentBitsInitialized) {\n                archetype.componentBits.add(this.getComponentIndex(type));\n            }\n            this.addComponent(id, component, false);\n        });\n        this.componentBitsMap[id] = archetype.componentBits;\n        return id;\n    }\n    addComponent(entityId, component, updateComponentBits = true) {\n        const typeIndex = this.getComponentIndex(component.constructor);\n        const mapper = this.getMapperByIndex(typeIndex);\n        mapper.add(entityId, component);\n        if (updateComponentBits)\n            this.getComponentBits(entityId).add(typeIndex);\n        return component;\n    }\n    getComponent(entityId, type) {\n        const mapper = this.getMapper(type);\n        return mapper.get(entityId);\n    }\n    getEntities(componentBits, iterator) {\n        for (let i = 0; i < this.componentBitsMap.length; i++) {\n            if (this.componentBitsMap[i]) {\n                const entityComponentBits = this.componentBitsMap[i];\n                if (componentBits.union_size(entityComponentBits) === entityComponentBits.size()) {\n                    iterator(i);\n                }\n            }\n        }\n    }\n    addSystem(system, active = true) {\n        active ? this.activeSystems.push(system) : this.passiveSystems.push(system);\n        system.setWorld(this);\n        this.injectMapper(system);\n        this.inject(system);\n        system.initialized();\n    }\n    injectMapper(system) {\n        const type = system.constructor;\n        const injectPoints = type.__injectMapper__ || {};\n        for (let injectKey in injectPoints) {\n            const componentType = injectPoints[injectKey];\n            system[injectKey] = this.getMapper(componentType);\n        }\n    }\n    register(name, value) {\n        this.injectionRegistry[name] = value;\n    }\n    inject(object) {\n        const type = object.constructor;\n        const injectPoints = type.__inject__ || {};\n        for (let injectKey in injectPoints) {\n            const injectName = injectPoints[injectKey];\n            object[injectKey] = this.injectionRegistry[injectName];\n        }\n    }\n    dispose() {\n        for (let system of this.activeSystems) {\n            system.dispose();\n        }\n        for (let system of this.passiveSystems) {\n            system.dispose();\n        }\n    }\n    setDelta(delta) {\n        this.delta = delta;\n    }\n    processActiveSystem() {\n        for (let system of this.activeSystems) {\n            system.process();\n        }\n    }\n    processPassiveSystem() {\n        for (let system of this.passiveSystems) {\n            system.process();\n        }\n    }\n    deleteEntity(entityId) {\n        for (let type in this.mappers) {\n            this.mappers[type].remove(entityId);\n        }\n        delete this.componentBitsMap[entityId];\n    }\n    isEntityActive(entityId) {\n        return !!this.componentBitsMap[entityId];\n    }\n}\nexports.default = World;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}