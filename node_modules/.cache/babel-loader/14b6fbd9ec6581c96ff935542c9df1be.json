{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Vector2, Color } from \"gdxts\";\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera(); // const background = await Texture.load(gl, \"./TetrisBg.png\");\n  // const border = await Texture.load(gl, \"./border.png\");\n\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\n  const black = new Color(0, 0, 0, 1); //config game\n\n  const ROWGAME = 24;\n  const COLGAME = 12;\n  let map = [];\n  let blockSize = new Vector2(83, 83);\n  let delayTime = 0;\n  let moveLeft = false;\n  let moveRight = false;\n  let moveDown = false; //I\n\n  const iBlock = [[1], [1], [1], [1]]; //L\n\n  const lBlock = [[0, 0, 1], [1, 1, 1]]; //L-reverse\n\n  const lReverseBlock = [[1, 0, 0], [1, 1, 1]]; // Square\n\n  const sBlock = [[1, 1], [1, 1]]; // Z\n\n  const zBlock = [[0, 1, 1], [1, 1, 0]]; // Z-reverse\n\n  const zReverseBlock = [[1, 1, 0], [0, 1, 1]]; // T\n\n  const tBlock = [[0, 1, 0], [1, 1, 1]];\n  const blocks = [iBlock, lReverseBlock, lBlock, sBlock, zBlock, zReverseBlock, tBlock];\n  console.log(map);\n  let currentBlock = blocks[0]; //\n\n  let nextBlock = blocks[getRandomInt(0, 6)];\n  let positionBlock = [];\n  let currentPosition = new Vector2(23, 11);\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // draw the map\n\n\n  function mapGame() {\n    for (let row = 0; row < ROWGAME; row++) {\n      map[row] = [];\n\n      for (let col = 0; col < COLGAME; col++) {\n        if (row >= 1) {\n          map[row].push(0);\n        } else {\n          map[row].push(1);\n        }\n      }\n\n      for (let col = 0; col < map[row].length; col++) {\n        map[row][0] = 1;\n        map[row][11] = 1;\n      }\n    }\n  }\n\n  function keyMove() {\n    if (moveLeft) {\n      for (let i = 1; i < positionBlock.length; i += 2) {\n        positionBlock[i] -= 1;\n      }\n\n      console.log(positionBlock);\n      moveLeft = false;\n    }\n\n    if (moveRight) {\n      if (moveRight) {\n        for (let i = 1; i < positionBlock.length; i += 2) {\n          positionBlock[i] += 1;\n        }\n\n        console.log(positionBlock);\n        moveRight = false;\n      }\n    }\n\n    if (moveDown) {\n      for (let i = 0; i < positionBlock.length; i += 2) {\n        positionBlock[i] -= 1;\n      }\n\n      console.log(positionBlock);\n      moveDown = false;\n    }\n  }\n\n  function blockOnMap() {\n    positionBlock = [];\n\n    for (let row = 0; row < currentBlock.length; row++) {\n      currentPosition.x--;\n\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[ROWGAME - 1 - row][COLGAME / 2 - 1 + col] = currentBlock[row][col];\n        currentPosition.y--;\n\n        if (map[ROWGAME - 1 - row][COLGAME / 2 - 1 + col]) {\n          positionBlock.push(ROWGAME - 1 - row, COLGAME / 2 - 1 + col);\n        }\n\n        console.warn(positionBlock);\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0) {\n          batch.draw(map[row][col] === 1 ? block : mainBlock, col * blockSize.x, row * blockSize.y, 83, 83);\n        } // scan to draw\n\n      }\n    } //\n\n  }\n\n  function collisionHandmade() {\n    switch (currentBlock) {\n      case blocks[0]:\n        if (map[positionBlock[6] - 1][positionBlock[7]] === 0) {\n          map[positionBlock[0] - 1][positionBlock[1]] = map[positionBlock[0]][positionBlock[1]];\n          map[positionBlock[2] - 1][positionBlock[3]] = map[positionBlock[2]][positionBlock[3]];\n          map[positionBlock[4] - 1][positionBlock[5]] = map[positionBlock[4]][positionBlock[5]]; //undraw\n\n          map[positionBlock[6] - 1][positionBlock[7]] = 1;\n          map[positionBlock[0]][positionBlock[1]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n\n          keyMove();\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      case blocks[1]:\n        if (map[positionBlock[2] - 1][positionBlock[3]] === 0 && map[positionBlock[4] - 1][positionBlock[5]] === 0 && map[positionBlock[6] - 1][positionBlock[7]] === 0) {\n          keyMove();\n          map[positionBlock[0] - 1][positionBlock[1]] = map[positionBlock[0]][positionBlock[1]];\n          map[positionBlock[2] - 1][positionBlock[3]] = 1;\n          map[positionBlock[4] - 1][positionBlock[5]] = map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] = map[positionBlock[6]][positionBlock[7]]; //undraw\n\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[4]][positionBlock[5]] = 0;\n          map[positionBlock[6]][positionBlock[7]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      case blocks[2]:\n        if (map[positionBlock[2] - 1][positionBlock[3]] === 0 && map[positionBlock[4] - 1][positionBlock[5]] === 0 && map[positionBlock[6] - 1][positionBlock[7]] === 0) {\n          keyMove();\n          map[positionBlock[2] - 1][positionBlock[3]] = map[positionBlock[2]][positionBlock[3]];\n          map[positionBlock[4] - 1][positionBlock[5]] = map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] = 1;\n          map[positionBlock[0] - 1][positionBlock[1]] = map[positionBlock[0]][positionBlock[1]]; //undraw\n\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n          map[positionBlock[4]][positionBlock[5]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      case blocks[3]:\n        if (map[positionBlock[4] - 1][positionBlock[5]] === 0 && map[positionBlock[6] - 1][positionBlock[7]] === 0) {\n          keyMove();\n          map[positionBlock[4] - 1][positionBlock[5]] = map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] = map[positionBlock[6]][positionBlock[7]]; //undraw\n\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      case blocks[4]:\n        if (map[positionBlock[4] - 1][positionBlock[5]] === 0 && map[positionBlock[6] - 1][positionBlock[7]] === 0) {\n          keyMove();\n          map[positionBlock[4] - 1][positionBlock[5]] = map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] = map[positionBlock[6]][positionBlock[7]];\n          map[positionBlock[2] - 1][positionBlock[3]] = map[positionBlock[2]][positionBlock[3]]; //undraw\n\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n          map[positionBlock[4]][positionBlock[5]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      case blocks[5]:\n        if (map[positionBlock[0] - 1][positionBlock[1]] === 0 && map[positionBlock[4] - 1][positionBlock[5]] === 0 && map[positionBlock[6] - 1][positionBlock[7]] === 0) {\n          keyMove();\n          map[positionBlock[0] - 1][positionBlock[1]] = map[positionBlock[0]][positionBlock[1]];\n          map[positionBlock[4] - 1][positionBlock[5]] = map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] = map[positionBlock[6]][positionBlock[7]]; // undraw\n\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n          map[positionBlock[6]][positionBlock[7]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      case blocks[6]:\n        if (map[positionBlock[2] - 1][positionBlock[3]] === 0 && map[positionBlock[4] - 1][positionBlock[5]] === 0 && map[positionBlock[6] - 1][positionBlock[7]] === 0) {\n          keyMove();\n          map[positionBlock[2] - 1][positionBlock[3]] = map[positionBlock[0]][positionBlock[1]];\n          map[positionBlock[4] - 1][positionBlock[5]] = map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] = map[positionBlock[6]][positionBlock[7]]; //undraw\n\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n          map[positionBlock[6]][positionBlock[7]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function control(e) {\n    switch (e.keyCode) {\n      case 37:\n        moveLeft = true;\n        break;\n\n      case 39:\n        moveRight = true;\n        break;\n\n      case 40:\n        moveDown = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  window.addEventListener(\"keydown\", function (e) {\n    control(e);\n  });\n  mapGame();\n  blockOnMap();\n  createGameLoop(delta => {\n    delayTime += delta;\n\n    if (delayTime >= 0.5) {\n      delayTime = 0;\n      collisionHandmade();\n    }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end(); // console.log(currentBlock);\n    //draw border\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    drawTetromino();\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\ninit(); // init2();","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Vector2","Color","init","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","bgRight","load","block","mainBlock","black","ROWGAME","COLGAME","map","blockSize","delayTime","moveLeft","moveRight","moveDown","iBlock","lBlock","lReverseBlock","sBlock","zBlock","zReverseBlock","tBlock","blocks","console","log","currentBlock","nextBlock","getRandomInt","positionBlock","currentPosition","min","max","Math","floor","random","mapGame","row","col","push","length","keyMove","i","blockOnMap","x","y","warn","drawTetromino","draw","collisionHandmade","control","e","keyCode","window","addEventListener","delta","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\n  createGameLoop,\n  createStage,\n  createViewport,\n  PolygonBatch,\n  ShapeRenderer,\n  Texture,\n  Vector2,\n  BitmapFont,\n  TextureRegion,\n  Color,\n} from \"gdxts\";\n\nimport { init2 } from \"./index2\";\n\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n\n  // const background = await Texture.load(gl, \"./TetrisBg.png\");\n  // const border = await Texture.load(gl, \"./border.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\n  const black = new Color(0, 0, 0, 1);\n\n  //config game\n  const ROWGAME = 24;\n  const COLGAME = 12;\n  let map: any[] = [];\n  let blockSize = new Vector2(83, 83);\n  let delayTime = 0;\n  let moveLeft = false;\n  let moveRight = false;\n  let moveDown = false;\n\n  //I\n  const iBlock = [[1], [1], [1], [1]];\n\n  //L\n  const lBlock = [\n    [0, 0, 1],\n    [1, 1, 1],\n  ];\n\n  //L-reverse\n  const lReverseBlock = [\n    [1, 0, 0],\n    [1, 1, 1],\n  ];\n\n  // Square\n  const sBlock = [\n    [1, 1],\n    [1, 1],\n  ];\n\n  // Z\n  const zBlock = [\n    [0, 1, 1],\n    [1, 1, 0],\n  ];\n\n  // Z-reverse\n  const zReverseBlock = [\n    [1, 1, 0],\n    [0, 1, 1],\n  ];\n\n  // T\n  const tBlock = [\n    [0, 1, 0],\n    [1, 1, 1],\n  ];\n\n  const blocks = [\n    iBlock,\n    lReverseBlock,\n    lBlock,\n    sBlock,\n    zBlock,\n    zReverseBlock,\n    tBlock,\n  ];\n  console.log(map);\n  let currentBlock = blocks[0]; //\n  let nextBlock = blocks[getRandomInt(0, 6)];\n  let positionBlock: number[] = [];\n  let currentPosition = new Vector2(23, 11);\n\n  function getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  // draw the map\n  function mapGame() {\n    for (let row = 0; row < ROWGAME; row++) {\n      map[row] = [];\n      for (let col = 0; col < COLGAME; col++) {\n        if (row >= 1) {\n          map[row].push(0);\n        } else {\n          map[row].push(1);\n        }\n      }\n      for (let col = 0; col < map[row].length; col++) {\n        map[row][0] = 1;\n        map[row][11] = 1;\n      }\n    }\n  }\n\n  function keyMove() {\n    if (moveLeft) {\n      for (let i = 1; i < positionBlock.length; i += 2) {\n        positionBlock[i] -= 1;\n      }\n      console.log(positionBlock);\n      moveLeft = false;\n    }\n    if (moveRight) {\n      if (moveRight) {\n        for (let i = 1; i < positionBlock.length; i += 2) {\n          positionBlock[i] += 1;\n        }\n        console.log(positionBlock);\n        moveRight = false;\n      }\n    }\n    if (moveDown) {\n      for (let i = 0; i < positionBlock.length; i += 2) {\n        positionBlock[i] -= 1;\n      }\n      console.log(positionBlock);\n      moveDown = false;\n    }\n  }\n\n  function blockOnMap() {\n    positionBlock = [];\n    for (let row = 0; row < currentBlock.length; row++) {\n      currentPosition.x--;\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[ROWGAME - 1 - row][COLGAME / 2 - 1 + col] = currentBlock[row][col];\n        currentPosition.y--;\n        if (map[ROWGAME - 1 - row][COLGAME / 2 - 1 + col]) {\n          positionBlock.push(ROWGAME - 1 - row, COLGAME / 2 - 1 + col);\n        }\n        console.warn(positionBlock);\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0) {\n          batch.draw(\n            map[row][col] === 1 ? block : mainBlock,\n            col * blockSize.x,\n            row * blockSize.y,\n            83,\n            83\n          );\n        } // scan to draw\n      }\n    } //\n  }\n\n  function collisionHandmade() {\n    switch (currentBlock) {\n      case blocks[0]:\n        if (map[positionBlock[6] - 1][positionBlock[7]] === 0) {\n          map[positionBlock[0] - 1][positionBlock[1]] =\n            map[positionBlock[0]][positionBlock[1]];\n          map[positionBlock[2] - 1][positionBlock[3]] =\n            map[positionBlock[2]][positionBlock[3]];\n          map[positionBlock[4] - 1][positionBlock[5]] =\n            map[positionBlock[4]][positionBlock[5]];\n          //undraw\n          map[positionBlock[6] - 1][positionBlock[7]] = 1;\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n          keyMove();\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n      case blocks[1]:\n        if (\n          map[positionBlock[2] - 1][positionBlock[3]] === 0 &&\n          map[positionBlock[4] - 1][positionBlock[5]] === 0 &&\n          map[positionBlock[6] - 1][positionBlock[7]] === 0\n        ) {\n          keyMove();\n          map[positionBlock[0] - 1][positionBlock[1]] =\n            map[positionBlock[0]][positionBlock[1]];\n          map[positionBlock[2] - 1][positionBlock[3]] = 1;\n          map[positionBlock[4] - 1][positionBlock[5]] =\n            map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] =\n            map[positionBlock[6]][positionBlock[7]];\n          //undraw\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[4]][positionBlock[5]] = 0;\n          map[positionBlock[6]][positionBlock[7]] = 0;\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n        break;\n      case blocks[2]:\n        if (\n          map[positionBlock[2] - 1][positionBlock[3]] === 0 &&\n          map[positionBlock[4] - 1][positionBlock[5]] === 0 &&\n          map[positionBlock[6] - 1][positionBlock[7]] === 0\n        ) {\n          keyMove();\n          map[positionBlock[2] - 1][positionBlock[3]] =\n            map[positionBlock[2]][positionBlock[3]];\n          map[positionBlock[4] - 1][positionBlock[5]] =\n            map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] = 1;\n          map[positionBlock[0] - 1][positionBlock[1]] =\n            map[positionBlock[0]][positionBlock[1]];\n          //undraw\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n          map[positionBlock[4]][positionBlock[5]] = 0;\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n        break;\n      case blocks[3]:\n        if (\n          map[positionBlock[4] - 1][positionBlock[5]] === 0 &&\n          map[positionBlock[6] - 1][positionBlock[7]] === 0\n        ) {\n          keyMove();\n          map[positionBlock[4] - 1][positionBlock[5]] =\n            map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] =\n            map[positionBlock[6]][positionBlock[7]];\n          //undraw\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n        break;\n      case blocks[4]:\n        if (\n          map[positionBlock[4] - 1][positionBlock[5]] === 0 &&\n          map[positionBlock[6] - 1][positionBlock[7]] === 0\n        ) {\n          keyMove();\n          map[positionBlock[4] - 1][positionBlock[5]] =\n            map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] =\n            map[positionBlock[6]][positionBlock[7]];\n          map[positionBlock[2] - 1][positionBlock[3]] =\n            map[positionBlock[2]][positionBlock[3]];\n\n          //undraw\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n          map[positionBlock[4]][positionBlock[5]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n        break;\n      case blocks[5]:\n        if (\n          map[positionBlock[0] - 1][positionBlock[1]] === 0 &&\n          map[positionBlock[4] - 1][positionBlock[5]] === 0 &&\n          map[positionBlock[6] - 1][positionBlock[7]] === 0\n        ) {\n          keyMove();\n          map[positionBlock[0] - 1][positionBlock[1]] =\n            map[positionBlock[0]][positionBlock[1]];\n          map[positionBlock[4] - 1][positionBlock[5]] =\n            map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] =\n            map[positionBlock[6]][positionBlock[7]];\n\n          // undraw\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n          map[positionBlock[6]][positionBlock[7]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n        break;\n      case blocks[6]:\n        if (\n          map[positionBlock[2] - 1][positionBlock[3]] === 0 &&\n          map[positionBlock[4] - 1][positionBlock[5]] === 0 &&\n          map[positionBlock[6] - 1][positionBlock[7]] === 0\n        ) {\n          keyMove();\n          map[positionBlock[2] - 1][positionBlock[3]] =\n            map[positionBlock[0]][positionBlock[1]];\n          map[positionBlock[4] - 1][positionBlock[5]] =\n            map[positionBlock[4]][positionBlock[5]];\n          map[positionBlock[6] - 1][positionBlock[7]] =\n            map[positionBlock[6]][positionBlock[7]];\n\n          //undraw\n          map[positionBlock[0]][positionBlock[1]] = 0;\n          map[positionBlock[2]][positionBlock[3]] = 0;\n          map[positionBlock[6]][positionBlock[7]] = 0;\n\n          for (let i = 0; i < positionBlock.length; i += 2) {\n            positionBlock[i] -= 1;\n          }\n        } else {\n          currentBlock = nextBlock;\n          nextBlock = blocks[getRandomInt(0, 6)];\n          blockOnMap();\n        }\n\n        break;\n      default:\n        break;\n    }\n  }\n  function control(e: any) {\n    switch (e.keyCode) {\n      case 37:\n        moveLeft = true;\n        break;\n      case 39:\n        moveRight = true;\n        break;\n      case 40:\n        moveDown = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  window.addEventListener(\"keydown\", function (e) {\n    control(e);\n  });\n\n  mapGame();\n  blockOnMap();\n\n  createGameLoop((delta: number) => {\n    delayTime += delta;\n    if (delayTime >= 0.5) {\n      delayTime = 0;\n      collisionHandmade();\n    }\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end();\n    // console.log(currentBlock);\n\n    //draw border\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    drawTetromino();\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\n\ninit();\n// init2();\n"],"mappings":"AAAA,SACEA,cADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,YAJF,EAKEC,aALF,EAMEC,OANF,EAOEC,OAPF,EAUEC,KAVF,QAWO,OAXP;AAeA,OAAO,MAAMC,IAAI,GAAG,YAAY;EAC9B,MAAMC,KAAK,GAAGR,WAAW,EAAzB;EACA,MAAMS,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;EACA,MAAMC,QAAQ,GAAGV,cAAc,CAACQ,MAAD,EAAS,IAAT,EAAe,IAAf,CAA/B;EACA,MAAMG,EAAE,GAAGD,QAAQ,CAACE,UAAT,EAAX;EACA,MAAMC,aAAa,GAAG,IAAIX,aAAJ,CAAkBS,EAAlB,CAAtB;EACA,MAAMG,KAAK,GAAG,IAAIb,YAAJ,CAAiBU,EAAjB,CAAd;EACA,MAAMI,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf,CAP8B,CAS9B;EACA;;EACA,MAAMC,OAAO,GAAG,MAAMd,OAAO,CAACe,IAAR,CAAaP,EAAb,EAAiB,WAAjB,CAAtB;EACA,MAAMQ,KAAK,GAAG,MAAMhB,OAAO,CAACe,IAAR,CAAaP,EAAb,EAAiB,mBAAjB,CAApB;EACA,MAAMS,SAAS,GAAG,MAAMjB,OAAO,CAACe,IAAR,CAAaP,EAAb,EAAiB,kBAAjB,CAAxB;EACA,MAAMU,KAAK,GAAG,IAAIhB,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAd,CAd8B,CAgB9B;;EACA,MAAMiB,OAAO,GAAG,EAAhB;EACA,MAAMC,OAAO,GAAG,EAAhB;EACA,IAAIC,GAAU,GAAG,EAAjB;EACA,IAAIC,SAAS,GAAG,IAAIrB,OAAJ,CAAY,EAAZ,EAAgB,EAAhB,CAAhB;EACA,IAAIsB,SAAS,GAAG,CAAhB;EACA,IAAIC,QAAQ,GAAG,KAAf;EACA,IAAIC,SAAS,GAAG,KAAhB;EACA,IAAIC,QAAQ,GAAG,KAAf,CAxB8B,CA0B9B;;EACA,MAAMC,MAAM,GAAG,CAAC,CAAC,CAAD,CAAD,EAAM,CAAC,CAAD,CAAN,EAAW,CAAC,CAAD,CAAX,EAAgB,CAAC,CAAD,CAAhB,CAAf,CA3B8B,CA6B9B;;EACA,MAAMC,MAAM,GAAG,CACb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADa,EAEb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFa,CAAf,CA9B8B,CAmC9B;;EACA,MAAMC,aAAa,GAAG,CACpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADoB,EAEpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFoB,CAAtB,CApC8B,CAyC9B;;EACA,MAAMC,MAAM,GAAG,CACb,CAAC,CAAD,EAAI,CAAJ,CADa,EAEb,CAAC,CAAD,EAAI,CAAJ,CAFa,CAAf,CA1C8B,CA+C9B;;EACA,MAAMC,MAAM,GAAG,CACb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADa,EAEb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFa,CAAf,CAhD8B,CAqD9B;;EACA,MAAMC,aAAa,GAAG,CACpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADoB,EAEpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFoB,CAAtB,CAtD8B,CA2D9B;;EACA,MAAMC,MAAM,GAAG,CACb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADa,EAEb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFa,CAAf;EAKA,MAAMC,MAAM,GAAG,CACbP,MADa,EAEbE,aAFa,EAGbD,MAHa,EAIbE,MAJa,EAKbC,MALa,EAMbC,aANa,EAObC,MAPa,CAAf;EASAE,OAAO,CAACC,GAAR,CAAYf,GAAZ;EACA,IAAIgB,YAAY,GAAGH,MAAM,CAAC,CAAD,CAAzB,CA3E8B,CA2EA;;EAC9B,IAAII,SAAS,GAAGJ,MAAM,CAACK,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAtB;EACA,IAAIC,aAAuB,GAAG,EAA9B;EACA,IAAIC,eAAe,GAAG,IAAIxC,OAAJ,CAAY,EAAZ,EAAgB,EAAhB,CAAtB;;EAEA,SAASsC,YAAT,CAAsBG,GAAtB,EAAmCC,GAAnC,EAAgD;IAC9C,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;EACD,CAlF6B,CAoF9B;;;EACA,SAASK,OAAT,GAAmB;IACjB,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG7B,OAAxB,EAAiC6B,GAAG,EAApC,EAAwC;MACtC3B,GAAG,CAAC2B,GAAD,CAAH,GAAW,EAAX;;MACA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG7B,OAAxB,EAAiC6B,GAAG,EAApC,EAAwC;QACtC,IAAID,GAAG,IAAI,CAAX,EAAc;UACZ3B,GAAG,CAAC2B,GAAD,CAAH,CAASE,IAAT,CAAc,CAAd;QACD,CAFD,MAEO;UACL7B,GAAG,CAAC2B,GAAD,CAAH,CAASE,IAAT,CAAc,CAAd;QACD;MACF;;MACD,KAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG5B,GAAG,CAAC2B,GAAD,CAAH,CAASG,MAAjC,EAAyCF,GAAG,EAA5C,EAAgD;QAC9C5B,GAAG,CAAC2B,GAAD,CAAH,CAAS,CAAT,IAAc,CAAd;QACA3B,GAAG,CAAC2B,GAAD,CAAH,CAAS,EAAT,IAAe,CAAf;MACD;IACF;EACF;;EAED,SAASI,OAAT,GAAmB;IACjB,IAAI5B,QAAJ,EAAc;MACZ,KAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;QAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;MACD;;MACDlB,OAAO,CAACC,GAAR,CAAYI,aAAZ;MACAhB,QAAQ,GAAG,KAAX;IACD;;IACD,IAAIC,SAAJ,EAAe;MACb,IAAIA,SAAJ,EAAe;QACb,KAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;UAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;QACD;;QACDlB,OAAO,CAACC,GAAR,CAAYI,aAAZ;QACAf,SAAS,GAAG,KAAZ;MACD;IACF;;IACD,IAAIC,QAAJ,EAAc;MACZ,KAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;QAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;MACD;;MACDlB,OAAO,CAACC,GAAR,CAAYI,aAAZ;MACAd,QAAQ,GAAG,KAAX;IACD;EACF;;EAED,SAAS4B,UAAT,GAAsB;IACpBd,aAAa,GAAG,EAAhB;;IACA,KAAK,IAAIQ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGX,YAAY,CAACc,MAArC,EAA6CH,GAAG,EAAhD,EAAoD;MAClDP,eAAe,CAACc,CAAhB;;MACA,KAAK,IAAIN,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGZ,YAAY,CAACW,GAAD,CAAZ,CAAkBG,MAA1C,EAAkDF,GAAG,EAArD,EAAyD;QACvD5B,GAAG,CAACF,OAAO,GAAG,CAAV,GAAc6B,GAAf,CAAH,CAAuB5B,OAAO,GAAG,CAAV,GAAc,CAAd,GAAkB6B,GAAzC,IAAgDZ,YAAY,CAACW,GAAD,CAAZ,CAAkBC,GAAlB,CAAhD;QACAR,eAAe,CAACe,CAAhB;;QACA,IAAInC,GAAG,CAACF,OAAO,GAAG,CAAV,GAAc6B,GAAf,CAAH,CAAuB5B,OAAO,GAAG,CAAV,GAAc,CAAd,GAAkB6B,GAAzC,CAAJ,EAAmD;UACjDT,aAAa,CAACU,IAAd,CAAmB/B,OAAO,GAAG,CAAV,GAAc6B,GAAjC,EAAsC5B,OAAO,GAAG,CAAV,GAAc,CAAd,GAAkB6B,GAAxD;QACD;;QACDd,OAAO,CAACsB,IAAR,CAAajB,aAAb;MACD;IACF;EACF;;EAED,SAASkB,aAAT,GAAyB;IACvB,KAAK,IAAIV,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG3B,GAAG,CAAC8B,MAA5B,EAAoCH,GAAG,EAAvC,EAA2C;MACzC,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG5B,GAAG,CAAC2B,GAAD,CAAH,CAASG,MAAjC,EAAyCF,GAAG,EAA5C,EAAgD;QAC9C,IAAI5B,GAAG,CAAC2B,GAAD,CAAH,CAASC,GAAT,MAAkB,CAAtB,EAAyB;UACvBtC,KAAK,CAACgD,IAAN,CACEtC,GAAG,CAAC2B,GAAD,CAAH,CAASC,GAAT,MAAkB,CAAlB,GAAsBjC,KAAtB,GAA8BC,SADhC,EAEEgC,GAAG,GAAG3B,SAAS,CAACiC,CAFlB,EAGEP,GAAG,GAAG1B,SAAS,CAACkC,CAHlB,EAIE,EAJF,EAKE,EALF;QAOD,CAT6C,CAS5C;;MACH;IACF,CAbsB,CAarB;;EACH;;EAED,SAASI,iBAAT,GAA6B;IAC3B,QAAQvB,YAAR;MACE,KAAKH,MAAM,CAAC,CAAD,CAAX;QACE,IAAIb,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAApD,EAAuD;UACrDnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF,CALqD,CAOrD;;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IAA8C,CAA9C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;;UACA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;YAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;UACD;;UACDD,OAAO;QACR,CAdD,MAcO;UACLf,YAAY,GAAGC,SAAf;UACAA,SAAS,GAAGJ,MAAM,CAACK,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAlB;UACAe,UAAU;QACX;;QAED;;MACF,KAAKpB,MAAM,CAAC,CAAD,CAAX;QACE,IACEb,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAAhD,IACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CADhD,IAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAHlD,EAIE;UACAY,OAAO;UACP/B,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IAA8C,CAA9C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF,CAPA,CASA;;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;;UACA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;YAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;UACD;QACF,CApBD,MAoBO;UACLhB,YAAY,GAAGC,SAAf;UACAA,SAAS,GAAGJ,MAAM,CAACK,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAlB;UACAe,UAAU;QACX;;QACD;;MACF,KAAKpB,MAAM,CAAC,CAAD,CAAX;QACE,IACEb,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAAhD,IACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CADhD,IAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAHlD,EAIE;UACAY,OAAO;UACP/B,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IAA8C,CAA9C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF,CAPA,CASA;;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;;UACA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;YAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;UACD;QACF,CApBD,MAoBO;UACLhB,YAAY,GAAGC,SAAf;UACAA,SAAS,GAAGJ,MAAM,CAACK,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAlB;UACAe,UAAU;QACX;;QACD;;MACF,KAAKpB,MAAM,CAAC,CAAD,CAAX;QACE,IACEb,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAAhD,IACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAFlD,EAGE;UACAY,OAAO;UACP/B,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF,CAJA,CAMA;;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;;UAEA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;YAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;UACD;QACF,CAhBD,MAgBO;UACLhB,YAAY,GAAGC,SAAf;UACAA,SAAS,GAAGJ,MAAM,CAACK,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAlB;UACAe,UAAU;QACX;;QACD;;MACF,KAAKpB,MAAM,CAAC,CAAD,CAAX;QACE,IACEb,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAAhD,IACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAFlD,EAGE;UACAY,OAAO;UACP/B,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF,CANA,CASA;;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;;UAEA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;YAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;UACD;QACF,CApBD,MAoBO;UACLhB,YAAY,GAAGC,SAAf;UACAA,SAAS,GAAGJ,MAAM,CAACK,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAlB;UACAe,UAAU;QACX;;QACD;;MACF,KAAKpB,MAAM,CAAC,CAAD,CAAX;QACE,IACEb,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAAhD,IACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CADhD,IAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAHlD,EAIE;UACAY,OAAO;UACP/B,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF,CANA,CASA;;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;;UAEA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;YAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;UACD;QACF,CArBD,MAqBO;UACLhB,YAAY,GAAGC,SAAf;UACAA,SAAS,GAAGJ,MAAM,CAACK,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAlB;UACAe,UAAU;QACX;;QACD;;MACF,KAAKpB,MAAM,CAAC,CAAD,CAAX;QACE,IACEb,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAAhD,IACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CADhD,IAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,MAAgD,CAHlD,EAIE;UACAY,OAAO;UACP/B,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF;UAEAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAb,GAAmB,CAApB,CAAH,CAA0BA,aAAa,CAAC,CAAD,CAAvC,IACEnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,CADF,CANA,CASA;;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;UACAnB,GAAG,CAACmB,aAAa,CAAC,CAAD,CAAd,CAAH,CAAsBA,aAAa,CAAC,CAAD,CAAnC,IAA0C,CAA1C;;UAEA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACW,MAAlC,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;YAChDb,aAAa,CAACa,CAAD,CAAb,IAAoB,CAApB;UACD;QACF,CArBD,MAqBO;UACLhB,YAAY,GAAGC,SAAf;UACAA,SAAS,GAAGJ,MAAM,CAACK,YAAY,CAAC,CAAD,EAAI,CAAJ,CAAb,CAAlB;UACAe,UAAU;QACX;;QAED;;MACF;QACE;IAzLJ;EA2LD;;EACD,SAASO,OAAT,CAAiBC,CAAjB,EAAyB;IACvB,QAAQA,CAAC,CAACC,OAAV;MACE,KAAK,EAAL;QACEvC,QAAQ,GAAG,IAAX;QACA;;MACF,KAAK,EAAL;QACEC,SAAS,GAAG,IAAZ;QACA;;MACF,KAAK,EAAL;QACEC,QAAQ,GAAG,IAAX;QACA;;MACF;QACE;IAXJ;EAaD;;EAEDsC,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,UAAUH,CAAV,EAAa;IAC9CD,OAAO,CAACC,CAAD,CAAP;EACD,CAFD;EAIAf,OAAO;EACPO,UAAU;EAEV3D,cAAc,CAAEuE,KAAD,IAAmB;IAChC3C,SAAS,IAAI2C,KAAb;;IACA,IAAI3C,SAAS,IAAI,GAAjB,EAAsB;MACpBA,SAAS,GAAG,CAAZ;MACAqC,iBAAiB;IAClB;;IACDpD,EAAE,CAAC2D,KAAH,CAAS3D,EAAE,CAAC4D,gBAAZ;IACA1D,aAAa,CAAC2D,aAAd,CAA4BzD,MAAM,CAAC0D,cAAP,CAAsBC,MAAlD;IACA7D,aAAa,CAAC8D,KAAd;IACA9D,aAAa,CAAC+D,IAAd,CAAmB,IAAnB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,IAA/B,EAAqC,IAArC,EAA2CvD,KAA3C;IACAR,aAAa,CAACgE,GAAd,GAVgC,CAWhC;IAEA;;IACA/D,KAAK,CAAC0D,aAAN,CAAoBzD,MAAM,CAAC0D,cAAP,CAAsBC,MAA1C;IACA5D,KAAK,CAAC6D,KAAN;IACAd,aAAa;IACb/C,KAAK,CAACgD,IAAN,CAAW7C,OAAX,EAAoB,IAApB,EAA0B,CAA1B,EAA6B,GAA7B,EAAkC,IAAlC;IACAH,KAAK,CAAC+D,GAAN;EACD,CAnBa,CAAd;AAoBD,CAvYM;AAyYPvE,IAAI,G,CACJ"},"metadata":{},"sourceType":"module"}