{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Vector2, ViewportInputHandler } from \"gdxts\";\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport);\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./7251.png\");\n  const redBlock = await Texture.load(gl, \"./RedBlock.png\");\n  const purpleBlock = await Texture.load(gl, \"./PurpleBlock.png\");\n  const orangeBlock = await Texture.load(gl, \"./OrangeBlock.png\");\n  const yellowBlock = await Texture.load(gl, \"./YellowBlock.png\");\n  const blueBlock = await Texture.load(gl, \"./BlueBlock.png\");\n  const blueSkyBlock = await Texture.load(gl, \"./BlueSkyBlock.png\");\n  const greenBlock = await Texture.load(gl, \"./GreenBlock.png\"); //tetromino\n\n  const squareBlock = [[1, 1], [1, 1]]; //I\n\n  const iBlock1 = [1, 1, 1, 1];\n  const iBlock2 = [[1], [1], [1], [1]]; //J\n\n  const jBlock1 = [[1, 0, 0], [1, 1, 1]];\n  const jBlock2 = [[1, 1], [1, 0], [1, 0]];\n  const jBlock3 = [[1, 1, 1], [0, 0, 1]]; //L\n\n  const LBlock1 = [[0, 0, 1], [1, 1, 1]];\n  const LBlock2 = [[1, 1], [0, 1], [0, 1]]; //s\n\n  const sBlock1 = [[0, 1, 1], [1, 1, 0]];\n  const sBlock2 = [[1, 0], [1, 1], [0, 1]]; //t\n\n  const tBlock1 = [[0, 1, 0], [1, 1, 1]];\n  const tBlock2 = [[1, 0], [1, 1], [1, 0]];\n  const tBlock3 = [[1, 1, 1], [0, 1, 0]];\n  const tBlock4 = [[0, 1], [1, 1], [0, 1]]; //z\n\n  const zBlock1 = [[1, 1, 0], [0, 1, 1]];\n  const zBlock2 = [[1, 0], [1, 1], [0, 1]]; //config game\n\n  let blockPosition = new Vector2(416, 1832);\n  let currentBlock = squareBlock;\n  let timeDelay = 0;\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  function drawBlock() {\n    currentBlock.forEach(currentBlock => {// console.log(currentBlock);\n    });\n  }\n\n  createGameLoop(delta => {\n    timeDelay += delta;\n    console.log(timeDelay);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000);\n    shapeRenderer.end();\n\n    if (timeDelay >= 1.5) {\n      blockPosition.y -= 84;\n      timeDelay = 0;\n    }\n\n    window.addEventListener(\"keydown\", function (e) {\n      if (e) {\n        drawBlock();\n      }\n    }); //draw background\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background, 0, 0, 1000, 2000);\n    batch.draw(blueSkyBlock, blockPosition.x, blockPosition.y, 84, 84);\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\ninit();","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Vector2","ViewportInputHandler","init","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","inputHandler","background","load","bgRight","block","redBlock","purpleBlock","orangeBlock","yellowBlock","blueBlock","blueSkyBlock","greenBlock","squareBlock","iBlock1","iBlock2","jBlock1","jBlock2","jBlock3","LBlock1","LBlock2","sBlock1","sBlock2","tBlock1","tBlock2","tBlock3","tBlock4","zBlock1","zBlock2","blockPosition","currentBlock","timeDelay","getRandomInt","min","max","Math","floor","random","drawBlock","forEach","delta","console","log","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end","y","window","addEventListener","e","draw","x"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import { time } from \"console\";\nimport {\n  createGameLoop,\n  createStage,\n  createViewport,\n  InputEvent,\n  PolygonBatch,\n  ShapeRenderer,\n  Texture,\n  Vector2,\n  ViewportInputHandler,\n  BitmapFont,\n  TextureRegion,\n  Color,\n} from \"gdxts\";\n\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport);\n\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./7251.png\");\n  const redBlock = await Texture.load(gl, \"./RedBlock.png\");\n  const purpleBlock = await Texture.load(gl, \"./PurpleBlock.png\");\n  const orangeBlock = await Texture.load(gl, \"./OrangeBlock.png\");\n  const yellowBlock = await Texture.load(gl, \"./YellowBlock.png\");\n  const blueBlock = await Texture.load(gl, \"./BlueBlock.png\");\n  const blueSkyBlock = await Texture.load(gl, \"./BlueSkyBlock.png\");\n  const greenBlock = await Texture.load(gl, \"./GreenBlock.png\");\n\n  //tetromino\n  const squareBlock = [\n    [1, 1],\n    [1, 1],\n  ];\n\n  //I\n  const iBlock1 = [1, 1, 1, 1];\n  const iBlock2 = [[1], [1], [1], [1]];\n\n  //J\n  const jBlock1 = [\n    [1, 0, 0],\n    [1, 1, 1],\n  ];\n  const jBlock2 = [\n    [1, 1],\n    [1, 0],\n    [1, 0],\n  ];\n  const jBlock3 = [\n    [1, 1, 1],\n    [0, 0, 1],\n  ];\n  //L\n  const LBlock1 = [\n    [0, 0, 1],\n    [1, 1, 1],\n  ];\n  const LBlock2 = [\n    [1, 1],\n    [0, 1],\n    [0, 1],\n  ];\n  //s\n  const sBlock1 = [\n    [0, 1, 1],\n    [1, 1, 0],\n  ];\n  const sBlock2 = [\n    [1, 0],\n    [1, 1],\n    [0, 1],\n  ];\n  //t\n  const tBlock1 = [\n    [0, 1, 0],\n    [1, 1, 1],\n  ];\n  const tBlock2 = [\n    [1, 0],\n    [1, 1],\n    [1, 0],\n  ];\n  const tBlock3 = [\n    [1, 1, 1],\n    [0, 1, 0],\n  ];\n  const tBlock4 = [\n    [0, 1],\n    [1, 1],\n    [0, 1],\n  ];\n  //z\n  const zBlock1 = [\n    [1, 1, 0],\n    [0, 1, 1],\n  ];\n  const zBlock2 = [\n    [1, 0],\n    [1, 1],\n    [0, 1],\n  ];\n\n  //config game\n  let blockPosition = new Vector2(416, 1832);\n  let currentBlock = squareBlock;\n  let timeDelay = 0;\n\n  function getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  function drawBlock() {\n    currentBlock.forEach((currentBlock) => {\n      // console.log(currentBlock);\n    });\n  }\n\n  createGameLoop((delta: number) => {\n    timeDelay += delta;\n    console.log(timeDelay);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000);\n    shapeRenderer.end();\n    if (timeDelay >= 1.5) {\n      blockPosition.y -= 84;\n      timeDelay = 0;\n    }\n\n    window.addEventListener(\"keydown\", function (e) {\n      if (e) {\n        drawBlock();\n      }\n    });\n\n    //draw background\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background, 0, 0, 1000, 2000);\n    batch.draw(blueSkyBlock, blockPosition.x, blockPosition.y, 84, 84);\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\n\ninit();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}