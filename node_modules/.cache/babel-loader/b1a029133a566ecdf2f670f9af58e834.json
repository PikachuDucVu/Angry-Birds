{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrthoCamera = void 0;\n\nconst Matrix4_1 = require(\"./Matrix4\");\n\nconst Vector3_1 = require(\"./Vector3\");\n\nclass OrthoCamera {\n  constructor(viewportWidth, viewportHeight, screenWidth, screenHeight) {\n    this.position = new Vector3_1.Vector3(0, 0, 0);\n    this.direction = new Vector3_1.Vector3(0, 0, -1);\n    this.up = new Vector3_1.Vector3(0, 1, 0);\n    this.near = 0;\n    this.far = 100;\n    this.zoom = 1;\n    this.viewportWidth = 0;\n    this.viewportHeight = 0;\n    this.projectionView = new Matrix4_1.Matrix4();\n    this.inverseProjectionView = new Matrix4_1.Matrix4();\n    this.projection = new Matrix4_1.Matrix4();\n    this.view = new Matrix4_1.Matrix4();\n    this.tmp3 = new Vector3_1.Vector3();\n    this.resize(viewportWidth, viewportHeight, screenWidth, screenHeight);\n  }\n\n  setYDown(yDown) {\n    if (yDown) {\n      this.up.set(0, -1, 0);\n      this.direction.set(0, 0, 1);\n    } else {\n      this.up.set(0, 1, 0);\n      this.direction.set(0, 0, -1);\n    }\n\n    this.update();\n  }\n\n  resize(viewportWidth, viewportHeight, screenWidth, screenHeight) {\n    this.viewportWidth = viewportWidth;\n    this.viewportHeight = viewportHeight;\n    this.screenWidth = screenWidth;\n    this.screenHeight = screenHeight;\n    this.update();\n  }\n\n  setPosition(cameraX, cameraY) {\n    this.position.set(cameraX, cameraY, this.position.z);\n  }\n\n  update() {\n    let projection = this.projection;\n    let view = this.view;\n    let projectionView = this.projectionView;\n    let inverseProjectionView = this.inverseProjectionView;\n    let zoom = this.zoom,\n        viewportWidth = this.viewportWidth,\n        viewportHeight = this.viewportHeight;\n    projection.ortho(zoom * (-viewportWidth / 2), zoom * (viewportWidth / 2), zoom * (-viewportHeight / 2), zoom * (viewportHeight / 2), this.near, this.far);\n    view.lookAt(this.position, this.direction, this.up);\n    projectionView.set(projection.values);\n    projectionView.multiply(view);\n    inverseProjectionView.set(projectionView.values).invert();\n    this.combined = projectionView.values;\n  }\n\n  screenToWorld(screenCoords, screenWidth, screenHeight) {\n    screenWidth = screenWidth || this.screenWidth;\n    screenHeight = screenHeight || this.screenHeight;\n    let x = screenCoords.x,\n        y = screenHeight - screenCoords.y - 1;\n    screenCoords.x = 2 * x / screenWidth - 1;\n    screenCoords.y = 2 * y / screenHeight - 1;\n    screenCoords.z = 2 * screenCoords.z - 1;\n    screenCoords.project(this.inverseProjectionView);\n    return screenCoords;\n  }\n\n  worldToScreen(worldCoords, screenWidth, screenHeight) {\n    screenWidth = screenWidth || this.screenWidth;\n    screenHeight = screenHeight || this.screenHeight;\n    worldCoords.project(this.projectionView);\n    worldCoords.x = screenWidth * (worldCoords.x + 1) / 2;\n    worldCoords.y = screenHeight * (worldCoords.y + 1) / 2;\n    worldCoords.z = (worldCoords.z + 1) / 2;\n    return worldCoords;\n  }\n\n  unprojectVector2(worldCoord, screenCoord) {\n    this.tmp3.set(screenCoord.x, screenCoord.y, 0);\n    this.screenToWorld(this.tmp3);\n    worldCoord.set(this.tmp3.x, this.tmp3.y);\n  }\n\n  setViewport(viewportWidth, viewportHeight) {\n    this.viewportWidth = viewportWidth;\n    this.viewportHeight = viewportHeight;\n  }\n\n}\n\nexports.OrthoCamera = OrthoCamera;","map":{"version":3,"names":["Object","defineProperty","exports","value","OrthoCamera","Matrix4_1","require","Vector3_1","constructor","viewportWidth","viewportHeight","screenWidth","screenHeight","position","Vector3","direction","up","near","far","zoom","projectionView","Matrix4","inverseProjectionView","projection","view","tmp3","resize","setYDown","yDown","set","update","setPosition","cameraX","cameraY","z","ortho","lookAt","values","multiply","invert","combined","screenToWorld","screenCoords","x","y","project","worldToScreen","worldCoords","unprojectVector2","worldCoord","screenCoord","setViewport"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/Camera.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OrthoCamera = void 0;\r\nconst Matrix4_1 = require(\"./Matrix4\");\r\nconst Vector3_1 = require(\"./Vector3\");\r\nclass OrthoCamera {\r\n    constructor(viewportWidth, viewportHeight, screenWidth, screenHeight) {\r\n        this.position = new Vector3_1.Vector3(0, 0, 0);\r\n        this.direction = new Vector3_1.Vector3(0, 0, -1);\r\n        this.up = new Vector3_1.Vector3(0, 1, 0);\r\n        this.near = 0;\r\n        this.far = 100;\r\n        this.zoom = 1;\r\n        this.viewportWidth = 0;\r\n        this.viewportHeight = 0;\r\n        this.projectionView = new Matrix4_1.Matrix4();\r\n        this.inverseProjectionView = new Matrix4_1.Matrix4();\r\n        this.projection = new Matrix4_1.Matrix4();\r\n        this.view = new Matrix4_1.Matrix4();\r\n        this.tmp3 = new Vector3_1.Vector3();\r\n        this.resize(viewportWidth, viewportHeight, screenWidth, screenHeight);\r\n    }\r\n    setYDown(yDown) {\r\n        if (yDown) {\r\n            this.up.set(0, -1, 0);\r\n            this.direction.set(0, 0, 1);\r\n        }\r\n        else {\r\n            this.up.set(0, 1, 0);\r\n            this.direction.set(0, 0, -1);\r\n        }\r\n        this.update();\r\n    }\r\n    resize(viewportWidth, viewportHeight, screenWidth, screenHeight) {\r\n        this.viewportWidth = viewportWidth;\r\n        this.viewportHeight = viewportHeight;\r\n        this.screenWidth = screenWidth;\r\n        this.screenHeight = screenHeight;\r\n        this.update();\r\n    }\r\n    setPosition(cameraX, cameraY) {\r\n        this.position.set(cameraX, cameraY, this.position.z);\r\n    }\r\n    update() {\r\n        let projection = this.projection;\r\n        let view = this.view;\r\n        let projectionView = this.projectionView;\r\n        let inverseProjectionView = this.inverseProjectionView;\r\n        let zoom = this.zoom, viewportWidth = this.viewportWidth, viewportHeight = this.viewportHeight;\r\n        projection.ortho(zoom * (-viewportWidth / 2), zoom * (viewportWidth / 2), zoom * (-viewportHeight / 2), zoom * (viewportHeight / 2), this.near, this.far);\r\n        view.lookAt(this.position, this.direction, this.up);\r\n        projectionView.set(projection.values);\r\n        projectionView.multiply(view);\r\n        inverseProjectionView.set(projectionView.values).invert();\r\n        this.combined = projectionView.values;\r\n    }\r\n    screenToWorld(screenCoords, screenWidth, screenHeight) {\r\n        screenWidth = screenWidth || this.screenWidth;\r\n        screenHeight = screenHeight || this.screenHeight;\r\n        let x = screenCoords.x, y = screenHeight - screenCoords.y - 1;\r\n        screenCoords.x = (2 * x) / screenWidth - 1;\r\n        screenCoords.y = (2 * y) / screenHeight - 1;\r\n        screenCoords.z = 2 * screenCoords.z - 1;\r\n        screenCoords.project(this.inverseProjectionView);\r\n        return screenCoords;\r\n    }\r\n    worldToScreen(worldCoords, screenWidth, screenHeight) {\r\n        screenWidth = screenWidth || this.screenWidth;\r\n        screenHeight = screenHeight || this.screenHeight;\r\n        worldCoords.project(this.projectionView);\r\n        worldCoords.x = (screenWidth * (worldCoords.x + 1)) / 2;\r\n        worldCoords.y = (screenHeight * (worldCoords.y + 1)) / 2;\r\n        worldCoords.z = (worldCoords.z + 1) / 2;\r\n        return worldCoords;\r\n    }\r\n    unprojectVector2(worldCoord, screenCoord) {\r\n        this.tmp3.set(screenCoord.x, screenCoord.y, 0);\r\n        this.screenToWorld(this.tmp3);\r\n        worldCoord.set(this.tmp3.x, this.tmp3.y);\r\n    }\r\n    setViewport(viewportWidth, viewportHeight) {\r\n        this.viewportWidth = viewportWidth;\r\n        this.viewportHeight = viewportHeight;\r\n    }\r\n}\r\nexports.OrthoCamera = OrthoCamera;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}