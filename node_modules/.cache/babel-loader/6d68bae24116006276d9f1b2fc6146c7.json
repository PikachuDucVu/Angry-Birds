{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Color } from \"gdxts\";\nconst BOARD_ROWS = 22;\nconst BOARD_COLS = 10;\nconst GAME_WIDTH = 1500;\nconst GAME_HEIGHT = 2000;\nexport const init2 = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, GAME_WIDTH, GAME_HEIGHT);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const scoreBoard = await Texture.load(gl, \"./bg1.png\");\n  const board = []; //I\n\n  const iBlock = [[1], [1], [1], [1]]; //L\n\n  const lBlock = [[0, 0, 2], [2, 2, 2]]; //L-reverse\n\n  const lReverseBlock = [[3, 0, 0], [3, 3, 3]]; // Square\n\n  const sBlock = [[4, 4], [4, 4]]; // Z\n\n  const zBlock = [[0, 5, 5], [5, 5, 0]]; // Z-reverse\n\n  const zReverseBlock = [[6, 6, 0], [0, 6, 6]]; // T\n\n  const tBlock = [[0, 7, 0], [7, 7, 7]];\n  const blocks = [iBlock, lReverseBlock, lBlock, sBlock, zBlock, zReverseBlock, tBlock]; // generate board\n\n  for (let i = 0; i < BOARD_ROWS; i++) {\n    for (let j = 0; j < BOARD_COLS; j++) {\n      board.push(0);\n    }\n  }\n\n  let timeDelay = 0;\n  const black = new Color(0, 0, 0, 1);\n\n  const mapNumberToColor = number => {\n    if (number % 2 === 0) {\n      return Color.BLUE;\n    } else {\n      return Color.GREEN;\n    } // switch (number) {\n    // }\n\n  };\n\n  const indexToCoord = index => {\n    return {\n      x: index % BOARD_COLS,\n      y: Math.floor(index / BOARD_COLS)\n    };\n  };\n\n  const drawBoard = () => {\n    for (let i = 0; i < board.length; i++) {\n      const color = mapNumberToColor(board[i]); // console.log(i, indexToCoord(i));\n\n      batch.begin();\n      batch.draw(block, i * 83, 0, 83, 83);\n      batch.end(); // shapeRenderer.rect(true);\n    }\n  };\n\n  createGameLoop(delta => {\n    timeDelay += delta;\n\n    if (timeDelay >= 0.5) {}\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, GAME_WIDTH, GAME_HEIGHT, black); // drawBoard();\n\n    shapeRenderer.end(); //draw border\n\n    drawBoard();\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(scoreBoard, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Color","BOARD_ROWS","BOARD_COLS","GAME_WIDTH","GAME_HEIGHT","init2","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","block","load","scoreBoard","board","iBlock","lBlock","lReverseBlock","sBlock","zBlock","zReverseBlock","tBlock","blocks","i","j","push","timeDelay","black","mapNumberToColor","number","BLUE","GREEN","indexToCoord","index","x","y","Math","floor","drawBoard","length","color","begin","draw","end","delta","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","rect"],"sources":["D:/projects/test-game/src/index2.ts"],"sourcesContent":["import {\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  Vector2,\r\n  BitmapFont,\r\n  TextureRegion,\r\n  Color,\r\n} from \"gdxts\";\r\n\r\nconst BOARD_ROWS = 22;\r\nconst BOARD_COLS = 10;\r\nconst GAME_WIDTH = 1500;\r\nconst GAME_HEIGHT = 2000;\r\n\r\ntype Coordinate = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\nexport const init2 = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, GAME_WIDTH, GAME_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const batch = new PolygonBatch(gl);\r\n  const camera = viewport.getCamera();\r\n\r\n  const block = await Texture.load(gl, \"./borderBlock.png\");\r\n  const scoreBoard = await Texture.load(gl, \"./bg1.png\");\r\n\r\n  const board: number[] = [];\r\n\r\n  //I\r\n  const iBlock = [[1], [1], [1], [1]];\r\n\r\n  //L\r\n  const lBlock = [\r\n    [0, 0, 2],\r\n    [2, 2, 2],\r\n  ];\r\n\r\n  //L-reverse\r\n  const lReverseBlock = [\r\n    [3, 0, 0],\r\n    [3, 3, 3],\r\n  ];\r\n\r\n  // Square\r\n  const sBlock = [\r\n    [4, 4],\r\n    [4, 4],\r\n  ];\r\n\r\n  // Z\r\n  const zBlock = [\r\n    [0, 5, 5],\r\n    [5, 5, 0],\r\n  ];\r\n\r\n  // Z-reverse\r\n  const zReverseBlock = [\r\n    [6, 6, 0],\r\n    [0, 6, 6],\r\n  ];\r\n\r\n  // T\r\n  const tBlock = [\r\n    [0, 7, 0],\r\n    [7, 7, 7],\r\n  ];\r\n\r\n  const blocks = [\r\n    iBlock,\r\n    lReverseBlock,\r\n    lBlock,\r\n    sBlock,\r\n    zBlock,\r\n    zReverseBlock,\r\n    tBlock,\r\n  ];\r\n\r\n  // generate board\r\n  for (let i = 0; i < BOARD_ROWS; i++) {\r\n    for (let j = 0; j < BOARD_COLS; j++) {\r\n      board.push(0);\r\n    }\r\n  }\r\n\r\n  let timeDelay = 0;\r\n  const black = new Color(0, 0, 0, 1);\r\n\r\n  const mapNumberToColor = (number: number): Color => {\r\n    if (number % 2 === 0) {\r\n      return Color.BLUE;\r\n    } else {\r\n      return Color.GREEN;\r\n    }\r\n\r\n    // switch (number) {\r\n    // }\r\n  };\r\n\r\n  const indexToCoord = (index: number): Coordinate => {\r\n    return {\r\n      x: index % BOARD_COLS,\r\n      y: Math.floor(index / BOARD_COLS),\r\n    };\r\n  };\r\n\r\n  const drawBoard = () => {\r\n    for (let i = 0; i < board.length; i++) {\r\n      const color = mapNumberToColor(board[i]);\r\n\r\n      // console.log(i, indexToCoord(i));\r\n      batch.begin();\r\n      batch.draw(block, i * 83, 0, 83, 83);\r\n      batch.end();\r\n      // shapeRenderer.rect(true);\r\n    }\r\n  };\r\n\r\n  createGameLoop((delta: number) => {\r\n    timeDelay += delta;\r\n    if (timeDelay >= 0.5) {\r\n    }\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    shapeRenderer.setProjection(camera.projectionView.values);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, GAME_WIDTH, GAME_HEIGHT, black);\r\n    // drawBoard();\r\n    shapeRenderer.end();\r\n\r\n    //draw border\r\n    drawBoard();\r\n    batch.setProjection(camera.projectionView.values);\r\n    batch.begin();\r\n    batch.draw(scoreBoard, 1000, 0, 500, 2000);\r\n    batch.end();\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}