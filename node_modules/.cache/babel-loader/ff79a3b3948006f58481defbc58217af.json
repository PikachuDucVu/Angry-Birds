{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextureRegion = void 0;\n\nclass TextureRegion {\n  constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight) {\n    let rotate = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n    this.name = null;\n    this.index = 0;\n    this.texture = null;\n    this.regionX = 0;\n    this.regionY = 0;\n    this.width = 0;\n    this.height = 0;\n    this.invTexWidth = 0;\n    this.invTexHeight = 0;\n    this.originalWidth = 0;\n    this.originalHeight = 0;\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.u = 0;\n    this.v = 0;\n    this.u2 = 0;\n    this.v2 = 0;\n    this.rotated = false;\n\n    if (!invTexWidth || !invTexHeight) {\n      invTexWidth = 1 / tex.width;\n      invTexHeight = 1 / tex.height;\n    }\n\n    const u = x * invTexWidth;\n    const v = (y + height) * invTexHeight;\n    const u2 = (x + width) * invTexWidth;\n    const v2 = y * invTexHeight;\n    this.texture = tex;\n    this.regionX = x;\n    this.regionY = y;\n    this.width = width;\n    this.height = height;\n    this.originalWidth = width;\n    this.originalHeight = height;\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.u = u;\n    this.v = v;\n    this.u2 = u2;\n    this.v2 = v2;\n    this.rotated = rotate;\n\n    for (let key in extraData) {\n      this[key] = extraData[key];\n    }\n  }\n\n  static splitTexture(texture, cols, rows) {\n    const {\n      width,\n      height\n    } = texture;\n    const regionWidth = width / cols;\n    const regionHeight = height / rows;\n    const regions = [];\n\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\n      }\n    }\n\n    return regions;\n  }\n\n  draw(batch, x, y, width, height) {\n    let originX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let originY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let rotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    let scaleX = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n    let scaleY = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n    const {\n      originalWidth,\n      originalHeight,\n      offsetX,\n      offsetY,\n      width: regionWidth,\n      height: regionHeight\n    } = this;\n    const xRatio = width / originalWidth;\n    const yRatio = height / originalHeight;\n    const drawWidth = regionWidth * xRatio;\n    const drawHeight = regionHeight * yRatio;\n    const drawX = x + offsetX * xRatio;\n    let drawY = 0;\n\n    if (batch.yDown) {\n      drawY = y + height - offsetY * yRatio - drawHeight;\n    } else {\n      drawY = y + offsetY * yRatio;\n    }\n\n    originX = originX - (drawX - x);\n    originY = originY - (drawY - y);\n    batch.draw(this.texture, drawX, drawY, drawWidth, drawHeight, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2, this.rotated);\n  }\n\n}\n\nexports.TextureRegion = TextureRegion;","map":{"version":3,"names":["Object","defineProperty","exports","value","TextureRegion","constructor","tex","x","y","width","height","extraData","invTexWidth","invTexHeight","rotate","name","index","texture","regionX","regionY","originalWidth","originalHeight","offsetX","offsetY","u","v","u2","v2","rotated","key","splitTexture","cols","rows","regionWidth","regionHeight","regions","push","draw","batch","originX","originY","rotation","scaleX","scaleY","xRatio","yRatio","drawWidth","drawHeight","drawX","drawY","yDown"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/TextureRegion.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextureRegion = void 0;\nclass TextureRegion {\n    constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight, rotate = false) {\n        this.name = null;\n        this.index = 0;\n        this.texture = null;\n        this.regionX = 0;\n        this.regionY = 0;\n        this.width = 0;\n        this.height = 0;\n        this.invTexWidth = 0;\n        this.invTexHeight = 0;\n        this.originalWidth = 0;\n        this.originalHeight = 0;\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.u = 0;\n        this.v = 0;\n        this.u2 = 0;\n        this.v2 = 0;\n        this.rotated = false;\n        if (!invTexWidth || !invTexHeight) {\n            invTexWidth = 1 / tex.width;\n            invTexHeight = 1 / tex.height;\n        }\n        const u = x * invTexWidth;\n        const v = (y + height) * invTexHeight;\n        const u2 = (x + width) * invTexWidth;\n        const v2 = y * invTexHeight;\n        this.texture = tex;\n        this.regionX = x;\n        this.regionY = y;\n        this.width = width;\n        this.height = height;\n        this.originalWidth = width;\n        this.originalHeight = height;\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.u = u;\n        this.v = v;\n        this.u2 = u2;\n        this.v2 = v2;\n        this.rotated = rotate;\n        for (let key in extraData) {\n            this[key] = extraData[key];\n        }\n    }\n    static splitTexture(texture, cols, rows) {\n        const { width, height } = texture;\n        const regionWidth = width / cols;\n        const regionHeight = height / rows;\n        const regions = [];\n        for (let y = 0; y < rows; y++) {\n            for (let x = 0; x < cols; x++) {\n                regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\n            }\n        }\n        return regions;\n    }\n    draw(batch, x, y, width, height, originX = 0, originY = 0, rotation = 0, scaleX = 1, scaleY = 1) {\n        const { originalWidth, originalHeight, offsetX, offsetY, width: regionWidth, height: regionHeight } = this;\n        const xRatio = width / originalWidth;\n        const yRatio = height / originalHeight;\n        const drawWidth = regionWidth * xRatio;\n        const drawHeight = regionHeight * yRatio;\n        const drawX = x + offsetX * xRatio;\n        let drawY = 0;\n        if (batch.yDown) {\n            drawY = y + height - offsetY * yRatio - drawHeight;\n        }\n        else {\n            drawY = y + offsetY * yRatio;\n        }\n        originX = originX - (drawX - x);\n        originY = originY - (drawY - y);\n        batch.draw(this.texture, drawX, drawY, drawWidth, drawHeight, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2, this.rotated);\n    }\n}\nexports.TextureRegion = TextureRegion;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}