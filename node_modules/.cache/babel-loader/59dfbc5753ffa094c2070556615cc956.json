{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2ContactListener, b2FixtureDef, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { World } from \"flat-ecs\";\nimport { AssetManager, createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Vector2 } from \"gdxts\";\nimport { BackgroundRenderSystem } from \"./system/BackgroundRenderSystem\";\nconst WORLD_WIDTH = 1300;\nconst WORLD_HEIGHT = 500;\nconst contactListener = new b2ContactListener();\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.SetUserData(\"ground\");\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\n  const circle = new b2CircleShape();\n  circle.m_radius = radius;\n  const fixtureDef = new b2FixtureDef();\n  fixtureDef.shape = circle;\n  fixtureDef.restitution = 0.5; // bounce bird\n\n  fixtureDef.friction = 1;\n  fixtureDef.shape = circle;\n  fixtureDef.userData = \"birdFixture\";\n  const body = world.CreateBody(bodyDef);\n  body.CreateFixture(fixtureDef);\n  body.SetUserData(\"bird\");\n  return body;\n};\n\nconst createBox = (world, x, y, width, height, userData) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.5, height * 0.5);\n  body.SetUserData({\n    name: userData.name,\n    durability: 0\n  });\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = new PolygonBatch(gl);\n  const shapeRenderer = new ShapeRenderer(gl);\n  const assetManager = new AssetManager(gl);\n  await assetManager.loadTexture(\"./background.png\", \"bg\");\n  await assetManager.loadTexture(\"./bird.png\", \"birdAsset\");\n  await assetManager.loadTexture(\"./pigAsset.png\", \"pigAsset\");\n  await assetManager.loadTexture(\"./testAnimation1.png\", \"boxAsset\");\n  await assetManager.loadTexture(\"./slingshot.png\", \"slingShot\");\n  await assetManager.loadTexture(\"./testAnimation1.png\", \"boxTexture\");\n  await assetManager.loadTexture(\"shapeRenderer\", \"shapeRenderer\");\n  camera.setYDown(true);\n  batch.setYDown(true);\n  const physicWorld = new b2World({\n    x: 0,\n    y: 10\n  });\n  const BALL_RADIUS = 0.2;\n  let bird = createBall(physicWorld, 2, 3.45, BALL_RADIUS);\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n\n  for (let wall of wallData) {\n    createWall(physicWorld, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  const BOX_SIZE = 0.5;\n  const PIG_SIZE = 0.3;\n  const pigs = [];\n  const boxes = [];\n  let pigNumber = 0;\n  let boxNumber = 0;\n  let positionBoxX = 6;\n  let positionBoxY = 4.3;\n  const originPosition = new Vector2(bird.GetPosition().x * METER_TO_WORLD, bird.GetPosition().y * METER_TO_WORLD);\n  let slingPos = new Vector2(bird.GetPosition().x * METER_TO_WORLD, bird.GetPosition().y * METER_TO_WORLD);\n\n  for (let i = 0; i < 3; i++) {\n    positionBoxX = 6 + i * 0.4;\n\n    for (let j = 0; j <= i; j++) {\n      boxes.push(createBox(physicWorld, positionBoxX += 0.51, positionBoxY -= 0.55, BOX_SIZE, BOX_SIZE, {\n        name: `box ${boxNumber++}`\n      }));\n    }\n\n    if (i < 2) {\n      pigs.push(createBox(physicWorld, positionBoxX + 0.5, positionBoxY - 0.25, PIG_SIZE, PIG_SIZE, {\n        name: `pig ${pigNumber++}`\n      }));\n    }\n  } //const inputHandler = new ViewportInputHandler(viewport);\n\n\n  const world = new World(); //world.register(\"inputHandle\", inputHandler);\n\n  world.register(\"camera\", camera);\n  world.register(\"gl\", gl);\n  world.register(\"assetManager\", assetManager);\n  world.register(\"batch\", batch);\n  world.register(\"bird\", bird);\n  world.register(\"boxes\", boxes);\n  world.register(\"pigs\", pigs);\n  world.register(\"originPosition\", originPosition);\n  world.register(\"slingPos\", slingPos);\n  world.addSystem(new BackgroundRenderSystem(), false); // world.addSystem(new BirdRenderSystem(), false);\n  // world.addSystem(new BoxesAndPigsRenderSystem(), false);\n  // world.addSystem(new SlingshotRenderSystem(), false);\n  // inputHandler.addEventListener(InputEvent.TouchEnd, () => {\n  //   bird.SetType(b2BodyType.b2_dynamicBody);\n  //   bird.ApplyLinearImpulseToCenter(\n  //     {\n  //       x: (7 * (originPosition.x - slingPos.x)) / METER_TO_WORLD,\n  //       y: (7 * (originPosition.y - slingPos.y)) / METER_TO_WORLD,\n  //     },\n  //     true\n  //   );\n  // });\n\n  let delayTime = 0; // window.addEventListener(\"keydown\", function (e) {\n  //   if (!hasBirdOnSlingShot && e.key === \"r\") {\n  //     physicWorld.DestroyBody(bird);\n  //     bird = createBall(physicWorld, 2, 3.5, BALL_RADIUS);\n  //     hasBirdOnSlingShot = true;\n  //   }\n  // });\n\n  gl.clearColor(0, 0, 0, 1);\n\n  contactListener.BeginContact = function (contact) {\n    if (delayTime >= 1) {\n      const fixtureAData = contact.GetFixtureA().GetBody().GetUserData();\n      const fixtureBData = contact.GetFixtureB().GetBody().GetUserData();\n\n      if (fixtureAData.name && fixtureAData.name.startsWith(\"box\")) {\n        fixtureAData.durability += 1;\n      }\n\n      if (fixtureAData.name && fixtureAData.name.startsWith(\"pig\")) {\n        fixtureAData.durability += 1;\n      }\n    }\n  };\n\n  physicWorld.SetContactListener(contactListener);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    batch.setProjection(camera.combined);\n    shapeRenderer.setProjection(camera.combined);\n    world.setDelta(delta);\n    world.processActiveSystem();\n    world.processPassiveSystem();\n    physicWorld.Step(delta, 8, 3);\n    delayTime += delta;\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2ContactListener","b2FixtureDef","b2PolygonShape","b2World","World","AssetManager","createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Vector2","BackgroundRenderSystem","WORLD_WIDTH","WORLD_HEIGHT","contactListener","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","SetUserData","CreateFixture","createBall","radius","circle","m_radius","fixtureDef","restitution","friction","userData","createBox","b2_dynamicBody","name","durability","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","batch","shapeRenderer","assetManager","loadTexture","setYDown","physicWorld","BALL_RADIUS","bird","mapData","fetch","then","res","json","wallData","layers","find","l","objects","wall","BOX_SIZE","PIG_SIZE","pigs","boxes","pigNumber","boxNumber","positionBoxX","positionBoxY","originPosition","GetPosition","slingPos","i","j","push","register","addSystem","delayTime","clearColor","BeginContact","contact","fixtureAData","GetFixtureA","GetBody","GetUserData","fixtureBData","GetFixtureB","startsWith","SetContactListener","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","setDelta","processActiveSystem","processPassiveSystem","Step"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2Contact,\r\n  b2ContactListener,\r\n  b2FixtureDef,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport { World } from \"flat-ecs\";\r\nimport {\r\n  Animation,\r\n  AssetManager,\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  TextureRegion,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\nimport { BackgroundRenderSystem } from \"./system/BackgroundRenderSystem\";\r\nimport { BirdRenderSystem } from \"./system/BirdRenderSystem\";\r\nimport { BoxesAndPigsRenderSystem } from \"./system/BoxesAndPigsRenderSystem\";\r\nimport { SlingshotRenderSystem } from \"./system/SlingshotRenderSystem\";\r\n\r\nconst WORLD_WIDTH = 1300;\r\nconst WORLD_HEIGHT = 500;\r\n\r\nconst contactListener = new b2ContactListener();\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.SetUserData(\"ground\");\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + radius / 2, y + radius / 2);\r\n  const circle = new b2CircleShape();\r\n  circle.m_radius = radius;\r\n  const fixtureDef = new b2FixtureDef();\r\n  fixtureDef.shape = circle;\r\n  fixtureDef.restitution = 0.5; // bounce bird\r\n  fixtureDef.friction = 1;\r\n  fixtureDef.shape = circle;\r\n  fixtureDef.userData = \"birdFixture\";\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  body.CreateFixture(fixtureDef);\r\n  body.SetUserData(\"bird\");\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  userData: {\r\n    name: string;\r\n  }\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.5, height * 0.5);\r\n  body.SetUserData({\r\n    name: userData.name,\r\n    durability: 0,\r\n  });\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  const batch = new PolygonBatch(gl);\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n\r\n  const assetManager = new AssetManager(gl);\r\n  await assetManager.loadTexture(\"./background.png\", \"bg\");\r\n  await assetManager.loadTexture(\"./bird.png\", \"birdAsset\");\r\n  await assetManager.loadTexture(\"./pigAsset.png\", \"pigAsset\");\r\n  await assetManager.loadTexture(\"./testAnimation1.png\", \"boxAsset\");\r\n  await assetManager.loadTexture(\"./slingshot.png\", \"slingShot\");\r\n  await assetManager.loadTexture(\"./testAnimation1.png\", \"boxTexture\");\r\n  await assetManager.loadTexture(\"shapeRenderer\", \"shapeRenderer\");\r\n\r\n  camera.setYDown(true);\r\n  batch.setYDown(true);\r\n\r\n  const physicWorld = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n  const BALL_RADIUS = 0.2;\r\n  let bird = createBall(physicWorld, 2, 3.45, BALL_RADIUS);\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      physicWorld,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n\r\n  const BOX_SIZE = 0.5;\r\n  const PIG_SIZE = 0.3;\r\n  const pigs: b2Body[] = [];\r\n  const boxes: b2Body[] = [];\r\n  let pigNumber = 0;\r\n  let boxNumber = 0;\r\n  let positionBoxX = 6;\r\n  let positionBoxY = 4.3;\r\n\r\n  const originPosition = new Vector2(\r\n    bird.GetPosition().x * METER_TO_WORLD,\r\n    bird.GetPosition().y * METER_TO_WORLD\r\n  );\r\n  let slingPos = new Vector2(\r\n    bird.GetPosition().x * METER_TO_WORLD,\r\n    bird.GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    positionBoxX = 6 + i * 0.4;\r\n    for (let j = 0; j <= i; j++) {\r\n      boxes.push(\r\n        createBox(\r\n          physicWorld,\r\n          (positionBoxX += 0.51),\r\n          (positionBoxY -= 0.55),\r\n          BOX_SIZE,\r\n          BOX_SIZE,\r\n          {\r\n            name: `box ${boxNumber++}`,\r\n          }\r\n        )\r\n      );\r\n    }\r\n    if (i < 2) {\r\n      pigs.push(\r\n        createBox(\r\n          physicWorld,\r\n          positionBoxX + 0.5,\r\n          positionBoxY - 0.25,\r\n          PIG_SIZE,\r\n          PIG_SIZE,\r\n          {\r\n            name: `pig ${pigNumber++}`,\r\n          }\r\n        )\r\n      );\r\n    }\r\n  }\r\n  //const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  const world = new World();\r\n  //world.register(\"inputHandle\", inputHandler);\r\n  world.register(\"camera\", camera);\r\n  world.register(\"gl\", gl);\r\n  world.register(\"assetManager\", assetManager);\r\n  world.register(\"batch\", batch);\r\n  world.register(\"bird\", bird);\r\n  world.register(\"boxes\", boxes);\r\n  world.register(\"pigs\", pigs);\r\n  world.register(\"originPosition\", originPosition);\r\n  world.register(\"slingPos\", slingPos);\r\n  world.addSystem(new BackgroundRenderSystem(), false);\r\n  // world.addSystem(new BirdRenderSystem(), false);\r\n  // world.addSystem(new BoxesAndPigsRenderSystem(), false);\r\n  // world.addSystem(new SlingshotRenderSystem(), false);\r\n\r\n  // inputHandler.addEventListener(InputEvent.TouchEnd, () => {\r\n  //   bird.SetType(b2BodyType.b2_dynamicBody);\r\n  //   bird.ApplyLinearImpulseToCenter(\r\n  //     {\r\n  //       x: (7 * (originPosition.x - slingPos.x)) / METER_TO_WORLD,\r\n  //       y: (7 * (originPosition.y - slingPos.y)) / METER_TO_WORLD,\r\n  //     },\r\n  //     true\r\n  //   );\r\n  // });\r\n  let delayTime = 0;\r\n\r\n  // window.addEventListener(\"keydown\", function (e) {\r\n  //   if (!hasBirdOnSlingShot && e.key === \"r\") {\r\n  //     physicWorld.DestroyBody(bird);\r\n  //     bird = createBall(physicWorld, 2, 3.5, BALL_RADIUS);\r\n  //     hasBirdOnSlingShot = true;\r\n  //   }\r\n  // });\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  contactListener.BeginContact = function (contact: b2Contact) {\r\n    if (delayTime >= 1) {\r\n      const fixtureAData = contact.GetFixtureA().GetBody().GetUserData();\r\n      const fixtureBData = contact.GetFixtureB().GetBody().GetUserData();\r\n\r\n      if (fixtureAData.name && fixtureAData.name.startsWith(\"box\")) {\r\n        fixtureAData.durability += 1;\r\n      }\r\n      if (fixtureAData.name && fixtureAData.name.startsWith(\"pig\")) {\r\n        fixtureAData.durability += 1;\r\n      }\r\n    }\r\n  };\r\n\r\n  physicWorld.SetContactListener(contactListener);\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    batch.setProjection(camera.combined);\r\n    shapeRenderer.setProjection(camera.combined);\r\n    world.setDelta(delta);\r\n    world.processActiveSystem();\r\n    world.processPassiveSystem();\r\n\r\n    physicWorld.Step(delta, 8, 3);\r\n\r\n    delayTime += delta;\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}