{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2PolygonShape, b2World, b2_pi } from \"box2d.ts\";\nimport { Color, createGameLoop, createStage, createViewport, InputEvent, ShapeRenderer, Vector2, ViewportInputHandler } from \"gdxts\";\nconst WORLD_WIDTH = 1000;\nconst WORLD_HEIGHT = 500;\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_kinematicBody;\n  body.SetLinearVelocity(10, 0);\n  bodyDef.position.Set(x, y);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2CircleShape(radius);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst createBox = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  bodyDef.awake = false;\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width * 0.45, height * 0.45);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  camera.setYDown(true);\n  const mapData = await fetch(\"./untitled.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const shapeRenderer = new ShapeRenderer(gl);\n  const world = new b2World({\n    x: 0,\n    y: 10\n  });\n\n  for (let wall of wallData) {\n    createWall(world, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  let spaceOfEachBoxes = 0;\n  const BOX_SIZE = 0.5;\n  const boxes = [];\n\n  for (let i = 0; i < 3; i++) {\n    boxes.push(createBox(world, 8, spaceOfEachBoxes += 1, BOX_SIZE, BOX_SIZE));\n  }\n\n  const BALL_RADIUS = 0.2;\n  const ball = createBall(world, 2, 4, BALL_RADIUS);\n  let originPosition = new Vector2(ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD);\n  let firstClick = false;\n  const inputHandler = new ViewportInputHandler(viewport);\n  inputHandler.addEventListener(InputEvent.TouchStart, () => {\n    if (inputHandler.isTouched()) {// if (firstClick === false) {\n      //   firstClick = true;\n      //   ball.SetType(b2BodyType.b2_dynamicBody);\n      //   ball.ApplyLinearImpulseToCenter(\n      //     {\n      //       x: 2,\n      //       y: -7,\n      //     },\n      //     true\n      //   );\n      // }\n    }\n  });\n  let rotation = 0;\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\n    if (inputHandler.isTouched()) {\n      originPosition = inputHandler.getTouchedWorldCoord(); // console.log(ball.GetPosition(), originPosition);\n\n      let rotation = Math.atan2(originPosition.y - ball.GetPosition().y * METER_TO_WORLD, originPosition.x - ball.GetPosition().x * METER_TO_WORLD) * 180 / b2_pi;\n      console.log(rotation);\n    } else {\n      originPosition.x = ball.GetPosition().x * METER_TO_WORLD;\n      originPosition.y = ball.GetPosition().y * METER_TO_WORLD;\n    }\n  });\n  let vectorResult = new Vector2();\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    world.Step(delta, 8, 3);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    }\n\n    for (let box of boxes) {\n      shapeRenderer.rect(true, (box.GetPosition().x - BOX_SIZE / 2) * METER_TO_WORLD, (box.GetPosition().y - BOX_SIZE / 2) * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD, Color.GREEN);\n    }\n\n    shapeRenderer.rect(true, 1.9 * METER_TO_WORLD, 4 * METER_TO_WORLD, 0.2 * METER_TO_WORLD, 0.6 * METER_TO_WORLD, Color.MAGENTA);\n    shapeRenderer.circle(true, originPosition.x, originPosition.y, BALL_RADIUS * METER_TO_WORLD, Color.RED);\n    shapeRenderer.circle(true, ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD, 0.1 * METER_TO_WORLD, Color.BLUE);\n    shapeRenderer.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2PolygonShape","b2World","b2_pi","Color","createGameLoop","createStage","createViewport","InputEvent","ShapeRenderer","Vector2","ViewportInputHandler","WORLD_WIDTH","WORLD_HEIGHT","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","CreateFixture","createBall","radius","b2_kinematicBody","SetLinearVelocity","createBox","b2_dynamicBody","awake","WALL_COLOR","METER_TO_WORLD","init","stage","canvas","getCanvas","viewport","gl","getContext","camera","getCamera","setYDown","mapData","fetch","then","res","json","wallData","layers","find","l","name","objects","shapeRenderer","wall","spaceOfEachBoxes","BOX_SIZE","boxes","i","push","BALL_RADIUS","ball","originPosition","GetPosition","firstClick","inputHandler","addEventListener","TouchStart","isTouched","rotation","TouchMove","getTouchedWorldCoord","Math","atan2","console","log","vectorResult","clearColor","delta","clear","COLOR_BUFFER_BIT","Step","setProjection","combined","begin","rect","WHITE","box","GREEN","MAGENTA","circle","RED","BLUE","end"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2PolygonShape,\r\n  b2Vec2,\r\n  b2World,\r\n  b2_pi,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  ShapeRenderer,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 1000;\r\nconst WORLD_HEIGHT = 500;\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_kinematicBody;\r\n  body.SetLinearVelocity(10, 0);\r\n  bodyDef.position.Set(x, y);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2CircleShape(radius);\r\n\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  bodyDef.awake = false;\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width * 0.45, height * 0.45);\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  camera.setYDown(true);\r\n\r\n  const mapData = await fetch(\"./untitled.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      world,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n  let spaceOfEachBoxes = 0;\r\n\r\n  const BOX_SIZE = 0.5;\r\n  const boxes: b2Body[] = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    boxes.push(\r\n      createBox(world, 8, (spaceOfEachBoxes += 1), BOX_SIZE, BOX_SIZE)\r\n    );\r\n  }\r\n  const BALL_RADIUS = 0.2;\r\n  const ball = createBall(world, 2, 4, BALL_RADIUS);\r\n  let originPosition = new Vector2(\r\n    ball.GetPosition().x * METER_TO_WORLD,\r\n    ball.GetPosition().y * METER_TO_WORLD\r\n  );\r\n\r\n  let firstClick = false;\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n  inputHandler.addEventListener(InputEvent.TouchStart, () => {\r\n    if (inputHandler.isTouched()) {\r\n      // if (firstClick === false) {\r\n      //   firstClick = true;\r\n      //   ball.SetType(b2BodyType.b2_dynamicBody);\r\n      //   ball.ApplyLinearImpulseToCenter(\r\n      //     {\r\n      //       x: 2,\r\n      //       y: -7,\r\n      //     },\r\n      //     true\r\n      //   );\r\n      // }\r\n    }\r\n  });\r\n\r\n  let rotation = 0;\r\n  inputHandler.addEventListener(InputEvent.TouchMove, () => {\r\n    if (inputHandler.isTouched()) {\r\n      originPosition = inputHandler.getTouchedWorldCoord();\r\n      // console.log(ball.GetPosition(), originPosition);\r\n      let rotation =\r\n        (Math.atan2(\r\n          originPosition.y - ball.GetPosition().y * METER_TO_WORLD,\r\n          originPosition.x - ball.GetPosition().x * METER_TO_WORLD\r\n        ) *\r\n          180) /\r\n        b2_pi;\r\n      console.log(rotation);\r\n    } else {\r\n      originPosition.x = ball.GetPosition().x * METER_TO_WORLD;\r\n      originPosition.y = ball.GetPosition().y * METER_TO_WORLD;\r\n    }\r\n  });\r\n\r\n  let vectorResult = new Vector2();\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    world.Step(delta, 8, 3);\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n    for (let box of boxes) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        (box.GetPosition().x - BOX_SIZE / 2) * METER_TO_WORLD,\r\n        (box.GetPosition().y - BOX_SIZE / 2) * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        Color.GREEN\r\n      );\r\n    }\r\n    shapeRenderer.rect(\r\n      true,\r\n      1.9 * METER_TO_WORLD,\r\n      4 * METER_TO_WORLD,\r\n      0.2 * METER_TO_WORLD,\r\n      0.6 * METER_TO_WORLD,\r\n      Color.MAGENTA\r\n    );\r\n    shapeRenderer.circle(\r\n      true,\r\n      originPosition.x,\r\n      originPosition.y,\r\n      BALL_RADIUS * METER_TO_WORLD,\r\n      Color.RED\r\n    );\r\n    shapeRenderer.circle(\r\n      true,\r\n      ball.GetPosition().x * METER_TO_WORLD,\r\n      ball.GetPosition().y * METER_TO_WORLD,\r\n      0.1 * METER_TO_WORLD,\r\n      Color.BLUE\r\n    );\r\n    shapeRenderer.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}