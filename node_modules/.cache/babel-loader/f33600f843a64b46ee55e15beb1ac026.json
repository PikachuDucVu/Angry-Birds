{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ViewportInputHandler = void 0;\n\nconst InputHandler_1 = require(\"./InputHandler\");\n\nconst Utils_1 = require(\"./Utils\");\n\nconst createViewportAwareInputListener = (handler, viewport) => {\n  return (x, y) => {\n    const {\n      x: vX,\n      y: vY,\n      pixelRatio\n    } = viewport.getViewportInfo();\n    x = x * pixelRatio - vX;\n    y = y * pixelRatio - vY;\n    handler(x, y);\n  };\n};\n\nclass ViewportInputHandler {\n  constructor(viewport) {\n    this.screenCoord = new Utils_1.Vector2();\n    this.worldCoord = new Utils_1.Vector2();\n    this.viewport = viewport;\n    this.canvas = viewport.getCanvas();\n    this.inputHandler = new InputHandler_1.InputHandler(this.canvas);\n  }\n\n  isTouched() {\n    return this.inputHandler.isTouched();\n  }\n\n  cleanup() {\n    this.inputHandler.cleanup();\n  }\n\n  addEventListener(event, listener) {\n    this.inputHandler.addEventListener(event, createViewportAwareInputListener(listener, this.viewport));\n  }\n\n  getX() {\n    const {\n      x: vX,\n      pixelRatio\n    } = this.viewport.getViewportInfo();\n    return this.inputHandler.getX() * pixelRatio - vX;\n  }\n\n  getY() {\n    const {\n      y: vY,\n      pixelRatio\n    } = this.viewport.getViewportInfo();\n    return this.inputHandler.getY() * pixelRatio - vY;\n  }\n\n  getTouchedWorldCoord(camera) {\n    if (!camera) {\n      camera = this.viewport.getCamera();\n    }\n\n    this.screenCoord.set(this.getX(), this.getY());\n    camera.unprojectVector2(this.worldCoord, this.screenCoord);\n    return this.worldCoord;\n  }\n\n}\n\nexports.ViewportInputHandler = ViewportInputHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","ViewportInputHandler","InputHandler_1","require","Utils_1","createViewportAwareInputListener","handler","viewport","x","y","vX","vY","pixelRatio","getViewportInfo","constructor","screenCoord","Vector2","worldCoord","canvas","getCanvas","inputHandler","InputHandler","isTouched","cleanup","addEventListener","event","listener","getX","getY","getTouchedWorldCoord","camera","getCamera","set","unprojectVector2"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/ViewportInputHandler.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ViewportInputHandler = void 0;\nconst InputHandler_1 = require(\"./InputHandler\");\nconst Utils_1 = require(\"./Utils\");\nconst createViewportAwareInputListener = (handler, viewport) => {\n    return (x, y) => {\n        const { x: vX, y: vY, pixelRatio } = viewport.getViewportInfo();\n        x = x * pixelRatio - vX;\n        y = y * pixelRatio - vY;\n        handler(x, y);\n    };\n};\nclass ViewportInputHandler {\n    constructor(viewport) {\n        this.screenCoord = new Utils_1.Vector2();\n        this.worldCoord = new Utils_1.Vector2();\n        this.viewport = viewport;\n        this.canvas = viewport.getCanvas();\n        this.inputHandler = new InputHandler_1.InputHandler(this.canvas);\n    }\n    isTouched() {\n        return this.inputHandler.isTouched();\n    }\n    cleanup() {\n        this.inputHandler.cleanup();\n    }\n    addEventListener(event, listener) {\n        this.inputHandler.addEventListener(event, createViewportAwareInputListener(listener, this.viewport));\n    }\n    getX() {\n        const { x: vX, pixelRatio } = this.viewport.getViewportInfo();\n        return this.inputHandler.getX() * pixelRatio - vX;\n    }\n    getY() {\n        const { y: vY, pixelRatio } = this.viewport.getViewportInfo();\n        return this.inputHandler.getY() * pixelRatio - vY;\n    }\n    getTouchedWorldCoord(camera) {\n        if (!camera) {\n            camera = this.viewport.getCamera();\n        }\n        this.screenCoord.set(this.getX(), this.getY());\n        camera.unprojectVector2(this.worldCoord, this.screenCoord);\n        return this.worldCoord;\n    }\n}\nexports.ViewportInputHandler = ViewportInputHandler;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,gCAAgC,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;EAC5D,OAAO,CAACC,CAAD,EAAIC,CAAJ,KAAU;IACb,MAAM;MAAED,CAAC,EAAEE,EAAL;MAASD,CAAC,EAAEE,EAAZ;MAAgBC;IAAhB,IAA+BL,QAAQ,CAACM,eAAT,EAArC;IACAL,CAAC,GAAGA,CAAC,GAAGI,UAAJ,GAAiBF,EAArB;IACAD,CAAC,GAAGA,CAAC,GAAGG,UAAJ,GAAiBD,EAArB;IACAL,OAAO,CAACE,CAAD,EAAIC,CAAJ,CAAP;EACH,CALD;AAMH,CAPD;;AAQA,MAAMR,oBAAN,CAA2B;EACvBa,WAAW,CAACP,QAAD,EAAW;IAClB,KAAKQ,WAAL,GAAmB,IAAIX,OAAO,CAACY,OAAZ,EAAnB;IACA,KAAKC,UAAL,GAAkB,IAAIb,OAAO,CAACY,OAAZ,EAAlB;IACA,KAAKT,QAAL,GAAgBA,QAAhB;IACA,KAAKW,MAAL,GAAcX,QAAQ,CAACY,SAAT,EAAd;IACA,KAAKC,YAAL,GAAoB,IAAIlB,cAAc,CAACmB,YAAnB,CAAgC,KAAKH,MAArC,CAApB;EACH;;EACDI,SAAS,GAAG;IACR,OAAO,KAAKF,YAAL,CAAkBE,SAAlB,EAAP;EACH;;EACDC,OAAO,GAAG;IACN,KAAKH,YAAL,CAAkBG,OAAlB;EACH;;EACDC,gBAAgB,CAACC,KAAD,EAAQC,QAAR,EAAkB;IAC9B,KAAKN,YAAL,CAAkBI,gBAAlB,CAAmCC,KAAnC,EAA0CpB,gCAAgC,CAACqB,QAAD,EAAW,KAAKnB,QAAhB,CAA1E;EACH;;EACDoB,IAAI,GAAG;IACH,MAAM;MAAEnB,CAAC,EAAEE,EAAL;MAASE;IAAT,IAAwB,KAAKL,QAAL,CAAcM,eAAd,EAA9B;IACA,OAAO,KAAKO,YAAL,CAAkBO,IAAlB,KAA2Bf,UAA3B,GAAwCF,EAA/C;EACH;;EACDkB,IAAI,GAAG;IACH,MAAM;MAAEnB,CAAC,EAAEE,EAAL;MAASC;IAAT,IAAwB,KAAKL,QAAL,CAAcM,eAAd,EAA9B;IACA,OAAO,KAAKO,YAAL,CAAkBQ,IAAlB,KAA2BhB,UAA3B,GAAwCD,EAA/C;EACH;;EACDkB,oBAAoB,CAACC,MAAD,EAAS;IACzB,IAAI,CAACA,MAAL,EAAa;MACTA,MAAM,GAAG,KAAKvB,QAAL,CAAcwB,SAAd,EAAT;IACH;;IACD,KAAKhB,WAAL,CAAiBiB,GAAjB,CAAqB,KAAKL,IAAL,EAArB,EAAkC,KAAKC,IAAL,EAAlC;IACAE,MAAM,CAACG,gBAAP,CAAwB,KAAKhB,UAA7B,EAAyC,KAAKF,WAA9C;IACA,OAAO,KAAKE,UAAZ;EACH;;AAhCsB;;AAkC3BlB,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B"},"metadata":{},"sourceType":"script"}