{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, Texture } from \"gdxts\";\nconst ROWS = 24;\nconst COLS = 12;\nconst GAME_WIDTH = 1500;\nconst GAME_HEIGHT = 2000;\nexport const init3 = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, GAME_WIDTH, GAME_HEIGHT);\n  const gl = viewport.getContext();\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  batch.setYDown(true);\n  camera.setYDown(true);\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\n  const black = await Texture.load(gl, \"./download.jpg\");\n  const SQUARE_SIZE = 83; // let map: any = [];\n\n  let delayTime = 0; //tetrominoes\n  //I\n\n  const iBlock = [[[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]]]; //L\n\n  const lBlock = [[[0, 0, 1], [1, 1, 1], [0, 0, 0]], [[0, 1, 0], [0, 1, 0], [0, 1, 1]], [[0, 0, 0], [1, 1, 1], [1, 0, 0]], [[1, 1, 0], [0, 1, 0], [0, 1, 0]]]; //L-reverse\n\n  const lReverseBlock = [[[1, 0, 0], [1, 1, 1], [0, 0, 0]], [[0, 1, 1], [0, 1, 0], [0, 1, 0]], [[0, 0, 0], [1, 1, 1], [0, 0, 1]], [[1, 1, 0], [0, 1, 0], [0, 1, 0]]]; // Square\n\n  const sBlock = [[1, 1], [1, 1]]; // Z\n\n  const zBlock = [[[0, 1, 1], [1, 1, 0], [0, 0, 0]], [[0, 1, 0], [0, 1, 1], [0, 0, 1]]]; // Z-reverse\n\n  const zReverseBlock = [[[1, 1, 0], [0, 1, 1], [0, 0, 0]], [[0, 0, 1], [0, 1, 1], [0, 1, 0]]]; // T\n\n  const tBlock = [[[0, 1, 0], [1, 1, 1], [0, 0, 0]], [[0, 1, 0], [0, 1, 1], [0, 1, 0]], [[0, 0, 0], [1, 1, 1], [0, 1, 0]], [[0, 1, 0], [1, 1, 0], [0, 1, 0]]]; // console.log(iBlock[0]);\n\n  class Piece {\n    constructor(tetromino) {\n      this.tetromino = void 0;\n      this.color = void 0;\n      this.tetrominoN = void 0;\n      this.activeTetromino = void 0;\n      this.x = void 0;\n      this.y = void 0;\n      this.tetromino = tetromino;\n      this.tetrominoN = 0;\n      this.activeTetromino = this.tetromino[this.tetrominoN];\n      console.log(this.activeTetromino);\n      this.x = 3;\n      this.y = -2;\n    }\n\n    fill() {\n      for (let row = 0; row < this.activeTetromino.length; row++) {\n        for (let col = 0; col < this.activeTetromino.length; col++) {\n          if (this.activeTetromino[row][col]) {\n            drawSquare(this.x + col, this.y + row);\n          } // console.log(this.activeTetromino);\n\n        }\n      }\n    }\n\n    draw() {\n      this.fill();\n    }\n\n    undraw() {// for (let row = 0; row < this.activeTetromino.length; row++) {\n      //   for (let col = 0; col < this.activeTetromino.length; col++) {\n      //     if (this.activeTetromino[row][col]) {\n      //       batch.begin();\n      //       batch.draw(\n      //         block,\n      //         this.x * SQUARE_SIZE,\n      //         this.y * SQUARE_SIZE,\n      //         SQUARE_SIZE,\n      //         SQUARE_SIZE\n      //       );\n      //       batch.end();\n      //     }\n      //   }\n      // }\n    }\n\n    movedown() {\n      // if (!this.collision(0, 1, this.activeTetromino)) {\n      this.undraw();\n      this.y++;\n      this.draw(); // } else {\n      // we lock the piece and generate a new one\n      // this.lock();\n      // p = randomPiece();\n      // }\n    }\n\n    collision(x, y, piece) {\n      for (let row = 0; row < piece.length; row++) {\n        for (let col = 0; col < piece.length; col++) {\n          if (!piece[row][col]) {\n            continue;\n          }\n\n          let newX = this.x + col + x;\n          let newY = this.y + row + y;\n\n          if (newX < 0 || newX >= COLS || newY >= ROWS) {\n            return true;\n          }\n\n          if (newY < 0) {\n            continue;\n          }\n        }\n      }\n    }\n\n  }\n\n  let blocks = [[iBlock], [lBlock], [lReverseBlock], [sBlock], [zBlock], [zReverseBlock], [tBlock]];\n  let piece = new Piece(lBlock);\n  window.addEventListener(\"keydown\", function (e) {\n    control(e);\n  });\n\n  function control(e) {// if (e.keyCode == 37) {\n    //   p.moveLeft();\n    //   dropStart = Date.now();\n    // } else if (e.keyCode == 38) {\n    //   p.rotate();\n    //   dropStart = Date.now();\n    // } else if (e.keyCode == 39) {\n    //   p.moveRight();\n    //   dropStart = Date.now();\n    // } else if (e.keyCode == 40) {\n    //   p.moveDown();\n    // }\n  }\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  function mapGame() {\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        drawSquare(col, row, block);\n      }\n    }\n  }\n\n  function drawSquare(x, y, color) {\n    batch.begin();\n    batch.draw(color ? color : mainBlock, SQUARE_SIZE * x, SQUARE_SIZE * y, SQUARE_SIZE, SQUARE_SIZE);\n    batch.end();\n  }\n\n  mapGame();\n  createGameLoop(delta => {\n    gl.clearColor(0, 0, 0, 1);\n    piece.fill(); //draw border\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin(); // batch.draw(black, 0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n    delayTime += delta;\n\n    if (delayTime >= 0.5) {\n      delayTime = 0;\n      piece.movedown();\n    }\n  });\n};","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","Texture","ROWS","COLS","GAME_WIDTH","GAME_HEIGHT","init3","stage","canvas","getCanvas","viewport","gl","getContext","batch","camera","getCamera","setYDown","bgRight","load","block","mainBlock","black","SQUARE_SIZE","delayTime","iBlock","lBlock","lReverseBlock","sBlock","zBlock","zReverseBlock","tBlock","Piece","constructor","tetromino","color","tetrominoN","activeTetromino","x","y","console","log","fill","row","length","col","drawSquare","draw","undraw","movedown","collision","piece","newX","newY","blocks","window","addEventListener","e","control","getRandomInt","min","max","Math","floor","random","mapGame","begin","end","delta","clearColor","setProjection","projectionView","values"],"sources":["D:/projects/test-game/src/index3.ts"],"sourcesContent":["import {\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  Vector2,\r\n  BitmapFont,\r\n  TextureRegion,\r\n  Color,\r\n} from \"gdxts\";\r\n\r\nconst ROWS = 24;\r\nconst COLS = 12;\r\nconst GAME_WIDTH = 1500;\r\nconst GAME_HEIGHT = 2000;\r\n\r\nexport const init3 = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, GAME_WIDTH, GAME_HEIGHT);\r\n  const gl = viewport.getContext();\r\n\r\n  const batch = new PolygonBatch(gl);\r\n  const camera = viewport.getCamera();\r\n  batch.setYDown(true);\r\n  camera.setYDown(true);\r\n\r\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\r\n  const block = await Texture.load(gl, \"./borderBlock.png\");\r\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\r\n  const black = await Texture.load(gl, \"./download.jpg\");\r\n  const SQUARE_SIZE = 83;\r\n\r\n  // let map: any = [];\r\n  let delayTime = 0;\r\n\r\n  //tetrominoes\r\n  //I\r\n  const iBlock = [\r\n    [\r\n      [0, 0, 0, 0],\r\n      [1, 1, 1, 1],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0, 0],\r\n      [0, 1, 0, 0],\r\n      [0, 1, 0, 0],\r\n      [0, 1, 0, 0],\r\n    ],\r\n  ];\r\n\r\n  //L\r\n  const lBlock = [\r\n    [\r\n      [0, 0, 1],\r\n      [1, 1, 1],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n      [0, 1, 1],\r\n    ],\r\n    [\r\n      [0, 0, 0],\r\n      [1, 1, 1],\r\n      [1, 0, 0],\r\n    ],\r\n    [\r\n      [1, 1, 0],\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n    ],\r\n  ];\r\n\r\n  //L-reverse\r\n  const lReverseBlock = [\r\n    [\r\n      [1, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 1],\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n    ],\r\n    [\r\n      [0, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 1],\r\n    ],\r\n    [\r\n      [1, 1, 0],\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n    ],\r\n  ];\r\n\r\n  // Square\r\n  const sBlock = [\r\n    [1, 1],\r\n    [1, 1],\r\n  ];\r\n\r\n  // Z\r\n  const zBlock = [\r\n    [\r\n      [0, 1, 1],\r\n      [1, 1, 0],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [0, 1, 1],\r\n      [0, 0, 1],\r\n    ],\r\n  ];\r\n\r\n  // Z-reverse\r\n  const zReverseBlock = [\r\n    [\r\n      [1, 1, 0],\r\n      [0, 1, 1],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 0, 1],\r\n      [0, 1, 1],\r\n      [0, 1, 0],\r\n    ],\r\n  ];\r\n\r\n  // T\r\n  const tBlock = [\r\n    [\r\n      [0, 1, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [0, 1, 1],\r\n      [0, 1, 0],\r\n    ],\r\n    [\r\n      [0, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 1, 0],\r\n    ],\r\n    [\r\n      [0, 1, 0],\r\n      [1, 1, 0],\r\n      [0, 1, 0],\r\n    ],\r\n  ];\r\n  // console.log(iBlock[0]);\r\n\r\n  class Piece {\r\n    tetromino: any;\r\n    color: any;\r\n    tetrominoN: any;\r\n    activeTetromino: any;\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(tetromino: any) {\r\n      this.tetromino = tetromino;\r\n      this.tetrominoN = 0;\r\n      this.activeTetromino = this.tetromino[this.tetrominoN];\r\n      console.log(this.activeTetromino);\r\n\r\n      this.x = 3;\r\n      this.y = -2;\r\n    }\r\n\r\n    fill() {\r\n      for (let row = 0; row < this.activeTetromino.length; row++) {\r\n        for (let col = 0; col < this.activeTetromino.length; col++) {\r\n          if (this.activeTetromino[row][col]) {\r\n            drawSquare(this.x + col, this.y + row);\r\n          }\r\n          // console.log(this.activeTetromino);\r\n        }\r\n      }\r\n    }\r\n\r\n    draw() {\r\n      this.fill();\r\n    }\r\n    undraw() {\r\n      // for (let row = 0; row < this.activeTetromino.length; row++) {\r\n      //   for (let col = 0; col < this.activeTetromino.length; col++) {\r\n      //     if (this.activeTetromino[row][col]) {\r\n      //       batch.begin();\r\n      //       batch.draw(\r\n      //         block,\r\n      //         this.x * SQUARE_SIZE,\r\n      //         this.y * SQUARE_SIZE,\r\n      //         SQUARE_SIZE,\r\n      //         SQUARE_SIZE\r\n      //       );\r\n      //       batch.end();\r\n      //     }\r\n      //   }\r\n      // }\r\n    }\r\n    movedown() {\r\n      // if (!this.collision(0, 1, this.activeTetromino)) {\r\n      this.undraw();\r\n      this.y++;\r\n      this.draw();\r\n      // } else {\r\n      // we lock the piece and generate a new one\r\n      // this.lock();\r\n      // p = randomPiece();\r\n      // }\r\n    }\r\n    collision(x: number, y: number, piece: any) {\r\n      for (let row = 0; row < piece.length; row++) {\r\n        for (let col = 0; col < piece.length; col++) {\r\n          if (!piece[row][col]) {\r\n            continue;\r\n          }\r\n          let newX = this.x + col + x;\r\n          let newY = this.y + row + y;\r\n\r\n          if (newX < 0 || newX >= COLS || newY >= ROWS) {\r\n            return true;\r\n          }\r\n\r\n          if (newY < 0) {\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  let blocks = [\r\n    [iBlock],\r\n    [lBlock],\r\n    [lReverseBlock],\r\n    [sBlock],\r\n    [zBlock],\r\n    [zReverseBlock],\r\n    [tBlock],\r\n  ];\r\n\r\n  let piece = new Piece(lBlock);\r\n\r\n  window.addEventListener(\"keydown\", function (e) {\r\n    control(e);\r\n  });\r\n  function control(e: any) {\r\n    // if (e.keyCode == 37) {\r\n    //   p.moveLeft();\r\n    //   dropStart = Date.now();\r\n    // } else if (e.keyCode == 38) {\r\n    //   p.rotate();\r\n    //   dropStart = Date.now();\r\n    // } else if (e.keyCode == 39) {\r\n    //   p.moveRight();\r\n    //   dropStart = Date.now();\r\n    // } else if (e.keyCode == 40) {\r\n    //   p.moveDown();\r\n    // }\r\n  }\r\n\r\n  function getRandomInt(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  function mapGame() {\r\n    for (let row = 0; row < ROWS; row++) {\r\n      for (let col = 0; col < COLS; col++) {\r\n        drawSquare(col, row, block);\r\n      }\r\n    }\r\n  }\r\n  function drawSquare(x: number, y: number, color?: any) {\r\n    batch.begin();\r\n    batch.draw(\r\n      color ? color : mainBlock,\r\n      SQUARE_SIZE * x,\r\n      SQUARE_SIZE * y,\r\n      SQUARE_SIZE,\r\n      SQUARE_SIZE\r\n    );\r\n    batch.end();\r\n  }\r\n  mapGame();\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    piece.fill();\r\n    //draw border\r\n    batch.setProjection(camera.projectionView.values);\r\n    batch.begin();\r\n    // batch.draw(black, 0, 0, GAME_WIDTH, GAME_HEIGHT);\r\n    batch.draw(bgRight, 1000, 0, 500, 2000);\r\n    batch.end();\r\n    delayTime += delta;\r\n    if (delayTime >= 0.5) {\r\n      delayTime = 0;\r\n      piece.movedown();\r\n    }\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}