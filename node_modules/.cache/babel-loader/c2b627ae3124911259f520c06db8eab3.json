{"ast":null,"code":"import { b2BodyDef, b2BodyType, b2CircleShape, b2PolygonShape, b2World } from \"box2d.ts\";\nimport { Color, createGameLoop, createStage, createViewport, InputEvent, ShapeRenderer, ViewportInputHandler } from \"gdxts\";\nconst WORLD_WIDTH = 600;\nconst WORLD_HEIGHT = 1000;\n\nconst createWall = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.CreateFixture(shape);\n};\n\nconst createBall = (world, x, y, radius) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_staticBody;\n  bodyDef.position.Set(x, y);\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2CircleShape(radius);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst createBox = (world, x, y, width, height) => {\n  const bodyDef = new b2BodyDef();\n  bodyDef.type = b2BodyType.b2_dynamicBody;\n  bodyDef.position.Set(x + width / 2, y + height / 2);\n  bodyDef.awake = false;\n  const body = world.CreateBody(bodyDef);\n  const shape = new b2PolygonShape();\n  shape.SetAsBox(width / 2, height / 2);\n  body.CreateFixture(shape);\n  return body;\n};\n\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\nconst METER_TO_WORLD = 100;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const mapData = await fetch(\"./walls.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  camera.setYDown(true);\n  const shapeRenderer = new ShapeRenderer(gl);\n  const world = new b2World({\n    x: 0,\n    y: 10\n  });\n\n  for (let wall of wallData) {\n    createWall(world, wall.x / METER_TO_WORLD, wall.y / METER_TO_WORLD, wall.width / METER_TO_WORLD, wall.height / METER_TO_WORLD);\n  }\n\n  let spaceOfEachBoxes = 0;\n  const BOX_SIZE = 0.5;\n  const boxes = [];\n\n  for (let i = 0; i < 3; i++) {\n    boxes.push(createBox(world, spaceOfEachBoxes += 1.5, 3, BOX_SIZE, BOX_SIZE));\n  }\n\n  const BALL_RADIUS = 0.25;\n  const ball = createBall(world, 3, 1, BALL_RADIUS);\n  let firstClick = false;\n  const inputHandler = new ViewportInputHandler(viewport);\n  inputHandler.addEventListener(InputEvent.TouchStart, () => {\n    ball.ApplyLinearImpulseToCenter({\n      x: Math.random() * 4 - 2,\n      y: -12\n    }, true);\n\n    if (firstClick === false) {\n      firstClick = true;\n      ball.SetType(b2BodyType.b2_dynamicBody);\n      ball.ApplyLinearImpulseToCenter({\n        x: Math.random() * 4 - 1,\n        y: -12\n      }, true);\n    }\n  });\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    world.Step(delta, 8, 3);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n\n    for (let wall of wallData) {\n      shapeRenderer.rect(true, wall.x, wall.y, wall.width, wall.height, WALL_COLOR);\n    }\n\n    for (let box of boxes) {\n      shapeRenderer.rect(true, (box.GetPosition().x - BOX_SIZE / 2) * METER_TO_WORLD, (box.GetPosition().y - BOX_SIZE / 2) * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD, BOX_SIZE * METER_TO_WORLD, Color.GREEN);\n      console.log(box.GetPosition().x, box.GetPosition().y);\n    }\n\n    shapeRenderer.circle(true, ball.GetPosition().x * METER_TO_WORLD, ball.GetPosition().y * METER_TO_WORLD, BALL_RADIUS * METER_TO_WORLD, Color.RED);\n    shapeRenderer.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2BodyDef","b2BodyType","b2CircleShape","b2PolygonShape","b2World","Color","createGameLoop","createStage","createViewport","InputEvent","ShapeRenderer","ViewportInputHandler","WORLD_WIDTH","WORLD_HEIGHT","createWall","world","x","y","width","height","bodyDef","type","b2_staticBody","position","Set","body","CreateBody","shape","SetAsBox","CreateFixture","createBall","radius","createBox","b2_dynamicBody","awake","WALL_COLOR","METER_TO_WORLD","init","stage","canvas","getCanvas","mapData","fetch","then","res","json","wallData","layers","find","l","name","objects","viewport","gl","getContext","camera","getCamera","setYDown","shapeRenderer","wall","spaceOfEachBoxes","BOX_SIZE","boxes","i","push","BALL_RADIUS","ball","firstClick","inputHandler","addEventListener","TouchStart","ApplyLinearImpulseToCenter","Math","random","SetType","clearColor","delta","clear","COLOR_BUFFER_BIT","Step","setProjection","combined","begin","rect","WHITE","box","GetPosition","GREEN","console","log","circle","RED","end"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\r\n  b2Body,\r\n  b2BodyDef,\r\n  b2BodyType,\r\n  b2CircleShape,\r\n  b2PolygonShape,\r\n  b2World,\r\n} from \"box2d.ts\";\r\nimport {\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  ShapeRenderer,\r\n  ViewportInputHandler,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 600;\r\nconst WORLD_HEIGHT = 1000;\r\n\r\nconst createWall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.CreateFixture(shape);\r\n};\r\n\r\nconst createBall = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  radius: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_staticBody;\r\n\r\n  bodyDef.position.Set(x, y);\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2CircleShape(radius);\r\n  body.CreateFixture(shape);\r\n\r\n  return body;\r\n};\r\n\r\nconst createBox = (\r\n  world: b2World,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n): b2Body => {\r\n  const bodyDef = new b2BodyDef();\r\n  bodyDef.type = b2BodyType.b2_dynamicBody;\r\n  bodyDef.position.Set(x + width / 2, y + height / 2);\r\n  bodyDef.awake = false;\r\n\r\n  const body = world.CreateBody(bodyDef);\r\n  const shape = new b2PolygonShape();\r\n  shape.SetAsBox(width / 2, height / 2);\r\n  body.CreateFixture(shape);\r\n  return body;\r\n};\r\n\r\nconst WALL_COLOR = new Color(0.5, 0.5, 0.5, 1);\r\nconst METER_TO_WORLD = 100;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n\r\n  const mapData = await fetch(\"./walls.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l: any) => l.name === \"walls\").objects;\r\n\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n  camera.setYDown(true);\r\n\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: 10,\r\n  });\r\n\r\n  for (let wall of wallData) {\r\n    createWall(\r\n      world,\r\n      wall.x / METER_TO_WORLD,\r\n      wall.y / METER_TO_WORLD,\r\n      wall.width / METER_TO_WORLD,\r\n      wall.height / METER_TO_WORLD\r\n    );\r\n  }\r\n  let spaceOfEachBoxes = 0;\r\n\r\n  const BOX_SIZE = 0.5;\r\n  const boxes: b2Body[] = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    boxes.push(\r\n      createBox(world, (spaceOfEachBoxes += 1.5), 3, BOX_SIZE, BOX_SIZE)\r\n    );\r\n  }\r\n  const BALL_RADIUS = 0.25;\r\n  const ball = createBall(world, 3, 1, BALL_RADIUS);\r\n  let firstClick = false;\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n  inputHandler.addEventListener(InputEvent.TouchStart, () => {\r\n    ball.ApplyLinearImpulseToCenter(\r\n      {\r\n        x: Math.random() * 4 - 2,\r\n        y: -12,\r\n      },\r\n      true\r\n    );\r\n    if (firstClick === false) {\r\n      firstClick = true;\r\n      ball.SetType(b2BodyType.b2_dynamicBody);\r\n      ball.ApplyLinearImpulseToCenter(\r\n        {\r\n          x: Math.random() * 4 - 1,\r\n          y: -12,\r\n        },\r\n        true\r\n      );\r\n    }\r\n  });\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    world.Step(delta, 8, 3);\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n\r\n    for (let wall of wallData) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        wall.x,\r\n        wall.y,\r\n        wall.width,\r\n        wall.height,\r\n        WALL_COLOR\r\n      );\r\n    }\r\n    for (let box of boxes) {\r\n      shapeRenderer.rect(\r\n        true,\r\n        (box.GetPosition().x - BOX_SIZE / 2) * METER_TO_WORLD,\r\n        (box.GetPosition().y - BOX_SIZE / 2) * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        BOX_SIZE * METER_TO_WORLD,\r\n        Color.GREEN\r\n      );\r\n      console.log(box.GetPosition().x, box.GetPosition().y);\r\n    }\r\n\r\n    shapeRenderer.circle(\r\n      true,\r\n      ball.GetPosition().x * METER_TO_WORLD,\r\n      ball.GetPosition().y * METER_TO_WORLD,\r\n      BALL_RADIUS * METER_TO_WORLD,\r\n      Color.RED\r\n    );\r\n    shapeRenderer.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}