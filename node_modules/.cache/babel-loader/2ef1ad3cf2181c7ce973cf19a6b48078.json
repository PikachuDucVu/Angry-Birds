{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sprite = void 0;\n\nconst Utils_1 = require(\"./Utils\");\n\nconst Vector2_1 = require(\"./Vector2\");\n/* eslint-disable */\n\n\nconst X1 = 0;\nconst Y1 = 1;\nconst C1R = 2;\nconst C1G = 3;\nconst C1B = 4;\nconst C1A = 5;\nconst U1 = 6;\nconst V1 = 7;\nconst C1R2 = 8;\nconst C1G2 = 9;\nconst C1B2 = 10;\nconst C1A2 = 11;\nconst X2 = 12;\nconst Y2 = 13;\nconst C2R = 14;\nconst C2G = 15;\nconst C2B = 16;\nconst C2A = 17;\nconst U2 = 18;\nconst V2 = 19;\nconst C2R2 = 20;\nconst C2G2 = 21;\nconst C2B2 = 22;\nconst C2A2 = 23;\nconst X3 = 24;\nconst Y3 = 25;\nconst C3R = 26;\nconst C3G = 27;\nconst C3B = 28;\nconst C3A = 29;\nconst U3 = 30;\nconst V3 = 31;\nconst C3R2 = 32;\nconst C3G2 = 33;\nconst C3B2 = 34;\nconst C3A2 = 35;\nconst X4 = 36;\nconst Y4 = 37;\nconst C4R = 38;\nconst C4G = 39;\nconst C4B = 40;\nconst C4A = 41;\nconst U4 = 42;\nconst V4 = 43;\nconst C4R2 = 44;\nconst C4G2 = 45;\nconst C4B2 = 46;\nconst C4A2 = 47;\n/* eslint-enable */\n\n/**\n * An unoptimized version of Sprite. Always calculate all vertices, never update partially. Will improve later after refactoring the SpriteBatch.\n */\n\nclass Sprite {\n  constructor(region) {\n    this.region = region;\n    this.dirty = false;\n    this.position = new Vector2_1.Vector2(0, 0);\n    this.size = new Vector2_1.Vector2(0, 0);\n    this.origin = new Vector2_1.Vector2(0, 0);\n    this.scale = new Vector2_1.Vector2(1, 1);\n    this.color = new Utils_1.Color(1, 1, 1, 1);\n    this.rotation = 0;\n    this.vertices = new Float32Array(48);\n    this.bounds = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    this.setSize(region.width, region.height);\n    this.setOrigin(region.width / 2, region.height / 2);\n  }\n\n  set(sprite) {\n    this.region = sprite.region;\n    this.position.setVector(sprite.position);\n    this.size.setVector(sprite.size);\n    this.origin.setVector(sprite.origin);\n    this.rotation = sprite.rotation;\n    this.scale.setVector(sprite.scale);\n    this.color.setFromColor(sprite.color);\n    this.dirty = true;\n  }\n\n  setBounds(x, y, width, height) {\n    this.setPosition(x, y);\n    this.setSize(x, y);\n    this.dirty = true;\n  }\n\n  setSize(width, height) {\n    this.size.set(width, height);\n    this.dirty = true;\n  }\n\n  setPosition(x, y) {\n    this.position.set(x, y);\n    this.dirty = true;\n  }\n\n  setOriginBasedPosition(x, y) {\n    this.setPosition(x - this.origin.x, y - this.origin.y);\n  }\n\n  setX(x) {\n    this.position.x = x;\n    this.dirty = true;\n  }\n\n  setY(y) {\n    this.position.y = y;\n    this.dirty = true;\n  }\n  /** Sets the x position so that it is centered on the given x parameter */\n\n\n  setCenterX(x) {\n    this.setX(x - this.size.x / 2);\n  }\n  /** Sets the y position so that it is centered on the given y parameter */\n\n\n  setCenterY(y) {\n    this.setY(y - this.size.y / 2);\n  }\n  /** Sets the position so that the sprite is centered on (x, y) */\n\n\n  setCenter(x, y) {\n    this.setPosition(x - this.size.x / 2, y - this.size.y / 2);\n  }\n  /** Sets the x position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are\n   * changed, it is slightly more efficient to translate after those operations. */\n\n\n  translateX(xAmount) {\n    this.translate(xAmount, 0);\n  }\n  /** Sets the y position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are\n   * changed, it is slightly more efficient to translate after those operations. */\n\n\n  translateY(yAmount) {\n    this.translate(0, yAmount);\n  }\n\n  translate(xAmount, yAmount) {\n    this.position.add(xAmount, yAmount);\n    this.dirty = true;\n  }\n  /** Sets the color used to tint this sprite. Default is {@link Color#WHITE}. */\n\n\n  setColor(tint) {\n    this.color.setFromColor(tint);\n    this.dirty = true;\n  }\n  /** Sets the alpha portion of the color used to tint this sprite. */\n\n\n  setAlpha(a) {\n    this.color.a = a;\n    this.dirty = true;\n  }\n  /** Sets the origin in relation to the sprite's position for scaling and rotation. */\n\n\n  setOrigin(originX, originY) {\n    this.origin.set(originX, originY);\n    this.dirty = true;\n  }\n  /** Place origin in the center of the sprite */\n\n\n  setOriginCenter() {\n    this.origin.set(this.size.x / 2, this.size.y / 2);\n    this.dirty = true;\n  }\n\n  setRotation(rad) {\n    this.rotation = rad;\n    this.dirty = true;\n  }\n\n  getRotation() {\n    return this.rotation;\n  }\n\n  rotate(rad) {\n    if (rad === 0) return;\n    this.rotation += rad;\n    this.dirty = true;\n  }\n  /** Sets the sprite's scale for both X and Y. The sprite scales out from the origin. This will not affect the values returned\n   * by {@link #getWidth()} and {@link #getHeight()} */\n\n\n  setScale(scaleX, scaleY) {\n    this.scale.set(scaleX, scaleY);\n    this.dirty = true;\n  }\n  /** Sets the sprite's scale relative to the current scale. for example: original scale 2 -> sprite.scale(4) -> final scale 6.\n   * The sprite scales out from the origin. This will not affect the values returned by {@link #getWidth()} and\n   * {@link #getHeight()} */\n\n\n  applyScale(amount) {\n    this.scale.scale(amount);\n    this.dirty = true;\n  }\n  /** Returns the packed vertices, colors, and texture coordinates for this sprite. */\n\n\n  getVertices() {\n    let yDown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      vertices,\n      region\n    } = this;\n\n    if (!this.dirty) {\n      return vertices;\n    }\n\n    let x = this.position.x;\n    let y = this.position.y;\n    let width = this.size.x;\n    let height = this.size.y;\n    let originX = this.origin.x;\n    let originY = this.origin.y;\n    let rotation = this.rotation;\n    let scaleX = this.scale.x;\n    let scaleY = this.scale.y;\n    let ou1 = region.u;\n    let ov1 = region.v;\n    let ou2 = region.u2;\n    let ov2 = region.v2;\n    const color = this.color;\n    let rotate = region.rotated;\n    const xRatio = width / region.originalWidth;\n    const yRatio = height / region.originalHeight;\n    const drawWidth = region.width * xRatio;\n    const drawHeight = region.height * yRatio;\n    const drawX = x + region.offsetX * xRatio;\n    let drawY = 0;\n\n    if (yDown) {\n      drawY = y + height - region.offsetY * yRatio - drawHeight;\n    } else {\n      drawY = y + region.offsetY * yRatio;\n    }\n\n    x = drawX;\n    y = drawY;\n    width = drawWidth;\n    height = drawHeight;\n\n    if (yDown) {\n      const tmpV1 = ov1;\n      ov1 = ov2;\n      ov2 = tmpV1;\n    }\n\n    let x1 = -originX;\n    let x2 = width - originX;\n    let x3 = width - originX;\n    let x4 = -originX;\n    let y1 = -originY;\n    let y2 = -originY;\n    let y3 = height - originY;\n    let y4 = height - originY;\n\n    if (scaleX !== 1) {\n      x1 = x1 * scaleX;\n      x2 = x2 * scaleX;\n      x3 = x3 * scaleX;\n      x4 = x4 * scaleX;\n    }\n\n    if (scaleY !== 1) {\n      y1 = y1 * scaleY;\n      y2 = y2 * scaleY;\n      y3 = y3 * scaleY;\n      y4 = y4 * scaleY;\n    }\n\n    if (rotation !== 0) {\n      var cos = Math.cos(rotation);\n      var sin = Math.sin(rotation);\n      var rotatedX1 = cos * x1 - sin * y1;\n      var rotatedY1 = sin * x1 + cos * y1;\n      var rotatedX2 = cos * x2 - sin * y2;\n      var rotatedY2 = sin * x2 + cos * y2;\n      var rotatedX3 = cos * x3 - sin * y3;\n      var rotatedY3 = sin * x3 + cos * y3;\n      var rotatedX4 = cos * x4 - sin * y4;\n      var rotatedY4 = sin * x4 + cos * y4;\n      x1 = rotatedX1;\n      x2 = rotatedX2;\n      x3 = rotatedX3;\n      x4 = rotatedX4;\n      y1 = rotatedY1;\n      y2 = rotatedY2;\n      y3 = rotatedY3;\n      y4 = rotatedY4;\n    }\n\n    x1 += x + originX;\n    x2 += x + originX;\n    x3 += x + originX;\n    x4 += x + originX;\n    y1 += y + originY;\n    y2 += y + originY;\n    y3 += y + originY;\n    y4 += y + originY;\n    let u1 = ou1;\n    let v1 = ov1;\n    let u2 = ou2;\n    let v2 = ov2;\n    let u3 = u2;\n    let v3 = v1;\n    let u4 = u1;\n    let v4 = v2;\n\n    if (rotate) {\n      if (yDown) {\n        u1 = ou1;\n        v1 = ov2;\n        u2 = ou2;\n        v2 = ov1;\n        u3 = ou1;\n        v3 = ov1;\n        u4 = ou2;\n        v4 = ov2;\n      } else {\n        u1 = ou2;\n        v1 = ov1;\n        u2 = ou1;\n        v2 = ov2;\n        u3 = ou2;\n        v3 = ov2;\n        u4 = ou1;\n        v4 = ov1;\n      }\n    }\n\n    var i = 0;\n    vertices[i++] = x1;\n    vertices[i++] = y1;\n    vertices[i++] = color.r;\n    vertices[i++] = color.g;\n    vertices[i++] = color.b;\n    vertices[i++] = color.a;\n    vertices[i++] = u1;\n    vertices[i++] = v1;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = x2;\n    vertices[i++] = y2;\n    vertices[i++] = color.r;\n    vertices[i++] = color.g;\n    vertices[i++] = color.b;\n    vertices[i++] = color.a;\n    vertices[i++] = u3;\n    vertices[i++] = v3;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = x3;\n    vertices[i++] = y3;\n    vertices[i++] = color.r;\n    vertices[i++] = color.g;\n    vertices[i++] = color.b;\n    vertices[i++] = color.a;\n    vertices[i++] = u2;\n    vertices[i++] = v2;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = x4;\n    vertices[i++] = y4;\n    vertices[i++] = color.r;\n    vertices[i++] = color.g;\n    vertices[i++] = color.b;\n    vertices[i++] = color.a;\n    vertices[i++] = u4;\n    vertices[i++] = v4;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i++] = 0;\n    vertices[i] = 0;\n    return vertices;\n  }\n  /** Returns the bounding axis aligned {@link Rectangle} that bounds this sprite. The rectangles x and y coordinates describe\n   * its bottom left corner. If you change the position or size of the sprite, you have to fetch the triangle again for it to be\n   * recomputed.\n   *\n   * @return the bounding Rectangle */\n\n\n  getBoundingRectangle() {\n    const vertices = this.vertices;\n    let minx = vertices[X1];\n    let miny = vertices[Y1];\n    let maxx = vertices[X1];\n    let maxy = vertices[Y1];\n    minx = minx > vertices[X2] ? vertices[X2] : minx;\n    minx = minx > vertices[X3] ? vertices[X3] : minx;\n    minx = minx > vertices[X4] ? vertices[X4] : minx;\n    maxx = maxx < vertices[X2] ? vertices[X2] : maxx;\n    maxx = maxx < vertices[X3] ? vertices[X3] : maxx;\n    maxx = maxx < vertices[X4] ? vertices[X4] : maxx;\n    miny = miny > vertices[Y2] ? vertices[Y2] : miny;\n    miny = miny > vertices[Y3] ? vertices[Y3] : miny;\n    miny = miny > vertices[Y4] ? vertices[Y4] : miny;\n    maxy = maxy < vertices[Y2] ? vertices[Y2] : maxy;\n    maxy = maxy < vertices[Y3] ? vertices[Y3] : maxy;\n    maxy = maxy < vertices[Y4] ? vertices[Y4] : maxy;\n    this.bounds.x = minx;\n    this.bounds.y = miny;\n    this.bounds.width = maxx - minx;\n    this.bounds.height = maxy - miny;\n    return this.bounds;\n  }\n\n  draw(batch) {\n    batch.drawVertices(this.region.texture, this.getVertices(batch.yDown));\n  }\n\n  drawWithAlpha(batch, alphaModulation) {\n    const oldAlpha = this.getColor().a;\n    this.setAlpha(oldAlpha * alphaModulation);\n    this.draw(batch);\n    this.setAlpha(oldAlpha);\n  }\n\n  getX() {\n    return this.position.x;\n  }\n\n  getY() {\n    return this.position.y;\n  }\n  /** @return the width of the sprite, not accounting for scale. */\n\n\n  getWidth() {\n    return this.size.x;\n  }\n  /** @return the height of the sprite, not accounting for scale. */\n\n\n  getHeight() {\n    return this.size.y;\n  }\n  /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of\n   * scaling {@link #setScale(float, float)} */\n\n\n  getOriginX() {\n    return this.origin.x;\n  }\n  /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of\n   * scaling {@link #setScale(float, float)} */\n\n\n  getOriginY() {\n    return this.origin.y;\n  }\n  /** X scale of the sprite, independent of size set by {@link #setSize(float, float)} */\n\n\n  getScaleX() {\n    return this.scale.x;\n  }\n  /** Y scale of the sprite, independent of size set by {@link #setSize(float, float)} */\n\n\n  getScaleY() {\n    return this.scale.y;\n  }\n  /** Returns the color of this sprite. If the returned instance is manipulated, {@link #setColor(Color)} must be called\n   * afterward. */\n\n\n  getColor() {\n    return this.color;\n  }\n\n}\n\nexports.Sprite = Sprite;","map":{"version":3,"names":["Object","defineProperty","exports","value","Sprite","Utils_1","require","Vector2_1","X1","Y1","C1R","C1G","C1B","C1A","U1","V1","C1R2","C1G2","C1B2","C1A2","X2","Y2","C2R","C2G","C2B","C2A","U2","V2","C2R2","C2G2","C2B2","C2A2","X3","Y3","C3R","C3G","C3B","C3A","U3","V3","C3R2","C3G2","C3B2","C3A2","X4","Y4","C4R","C4G","C4B","C4A","U4","V4","C4R2","C4G2","C4B2","C4A2","constructor","region","dirty","position","Vector2","size","origin","scale","color","Color","rotation","vertices","Float32Array","bounds","x","y","width","height","setSize","setOrigin","set","sprite","setVector","setFromColor","setBounds","setPosition","setOriginBasedPosition","setX","setY","setCenterX","setCenterY","setCenter","translateX","xAmount","translate","translateY","yAmount","add","setColor","tint","setAlpha","a","originX","originY","setOriginCenter","setRotation","rad","getRotation","rotate","setScale","scaleX","scaleY","applyScale","amount","getVertices","yDown","ou1","u","ov1","v","ou2","u2","ov2","v2","rotated","xRatio","originalWidth","yRatio","originalHeight","drawWidth","drawHeight","drawX","offsetX","drawY","offsetY","tmpV1","x1","x2","x3","x4","y1","y2","y3","y4","cos","Math","sin","rotatedX1","rotatedY1","rotatedX2","rotatedY2","rotatedX3","rotatedY3","rotatedX4","rotatedY4","u1","v1","u3","v3","u4","v4","i","r","g","b","getBoundingRectangle","minx","miny","maxx","maxy","draw","batch","drawVertices","texture","drawWithAlpha","alphaModulation","oldAlpha","getColor","getX","getY","getWidth","getHeight","getOriginX","getOriginY","getScaleX","getScaleY"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/Sprite.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Sprite = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Vector2_1 = require(\"./Vector2\");\n/* eslint-disable */\nconst X1 = 0;\nconst Y1 = 1;\nconst C1R = 2;\nconst C1G = 3;\nconst C1B = 4;\nconst C1A = 5;\nconst U1 = 6;\nconst V1 = 7;\nconst C1R2 = 8;\nconst C1G2 = 9;\nconst C1B2 = 10;\nconst C1A2 = 11;\nconst X2 = 12;\nconst Y2 = 13;\nconst C2R = 14;\nconst C2G = 15;\nconst C2B = 16;\nconst C2A = 17;\nconst U2 = 18;\nconst V2 = 19;\nconst C2R2 = 20;\nconst C2G2 = 21;\nconst C2B2 = 22;\nconst C2A2 = 23;\nconst X3 = 24;\nconst Y3 = 25;\nconst C3R = 26;\nconst C3G = 27;\nconst C3B = 28;\nconst C3A = 29;\nconst U3 = 30;\nconst V3 = 31;\nconst C3R2 = 32;\nconst C3G2 = 33;\nconst C3B2 = 34;\nconst C3A2 = 35;\nconst X4 = 36;\nconst Y4 = 37;\nconst C4R = 38;\nconst C4G = 39;\nconst C4B = 40;\nconst C4A = 41;\nconst U4 = 42;\nconst V4 = 43;\nconst C4R2 = 44;\nconst C4G2 = 45;\nconst C4B2 = 46;\nconst C4A2 = 47;\n/* eslint-enable */\n/**\n * An unoptimized version of Sprite. Always calculate all vertices, never update partially. Will improve later after refactoring the SpriteBatch.\n */\nclass Sprite {\n    constructor(region) {\n        this.region = region;\n        this.dirty = false;\n        this.position = new Vector2_1.Vector2(0, 0);\n        this.size = new Vector2_1.Vector2(0, 0);\n        this.origin = new Vector2_1.Vector2(0, 0);\n        this.scale = new Vector2_1.Vector2(1, 1);\n        this.color = new Utils_1.Color(1, 1, 1, 1);\n        this.rotation = 0;\n        this.vertices = new Float32Array(48);\n        this.bounds = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        };\n        this.setSize(region.width, region.height);\n        this.setOrigin(region.width / 2, region.height / 2);\n    }\n    set(sprite) {\n        this.region = sprite.region;\n        this.position.setVector(sprite.position);\n        this.size.setVector(sprite.size);\n        this.origin.setVector(sprite.origin);\n        this.rotation = sprite.rotation;\n        this.scale.setVector(sprite.scale);\n        this.color.setFromColor(sprite.color);\n        this.dirty = true;\n    }\n    setBounds(x, y, width, height) {\n        this.setPosition(x, y);\n        this.setSize(x, y);\n        this.dirty = true;\n    }\n    setSize(width, height) {\n        this.size.set(width, height);\n        this.dirty = true;\n    }\n    setPosition(x, y) {\n        this.position.set(x, y);\n        this.dirty = true;\n    }\n    setOriginBasedPosition(x, y) {\n        this.setPosition(x - this.origin.x, y - this.origin.y);\n    }\n    setX(x) {\n        this.position.x = x;\n        this.dirty = true;\n    }\n    setY(y) {\n        this.position.y = y;\n        this.dirty = true;\n    }\n    /** Sets the x position so that it is centered on the given x parameter */\n    setCenterX(x) {\n        this.setX(x - this.size.x / 2);\n    }\n    /** Sets the y position so that it is centered on the given y parameter */\n    setCenterY(y) {\n        this.setY(y - this.size.y / 2);\n    }\n    /** Sets the position so that the sprite is centered on (x, y) */\n    setCenter(x, y) {\n        this.setPosition(x - this.size.x / 2, y - this.size.y / 2);\n    }\n    /** Sets the x position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are\n     * changed, it is slightly more efficient to translate after those operations. */\n    translateX(xAmount) {\n        this.translate(xAmount, 0);\n    }\n    /** Sets the y position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are\n     * changed, it is slightly more efficient to translate after those operations. */\n    translateY(yAmount) {\n        this.translate(0, yAmount);\n    }\n    translate(xAmount, yAmount) {\n        this.position.add(xAmount, yAmount);\n        this.dirty = true;\n    }\n    /** Sets the color used to tint this sprite. Default is {@link Color#WHITE}. */\n    setColor(tint) {\n        this.color.setFromColor(tint);\n        this.dirty = true;\n    }\n    /** Sets the alpha portion of the color used to tint this sprite. */\n    setAlpha(a) {\n        this.color.a = a;\n        this.dirty = true;\n    }\n    /** Sets the origin in relation to the sprite's position for scaling and rotation. */\n    setOrigin(originX, originY) {\n        this.origin.set(originX, originY);\n        this.dirty = true;\n    }\n    /** Place origin in the center of the sprite */\n    setOriginCenter() {\n        this.origin.set(this.size.x / 2, this.size.y / 2);\n        this.dirty = true;\n    }\n    setRotation(rad) {\n        this.rotation = rad;\n        this.dirty = true;\n    }\n    getRotation() {\n        return this.rotation;\n    }\n    rotate(rad) {\n        if (rad === 0)\n            return;\n        this.rotation += rad;\n        this.dirty = true;\n    }\n    /** Sets the sprite's scale for both X and Y. The sprite scales out from the origin. This will not affect the values returned\n     * by {@link #getWidth()} and {@link #getHeight()} */\n    setScale(scaleX, scaleY) {\n        this.scale.set(scaleX, scaleY);\n        this.dirty = true;\n    }\n    /** Sets the sprite's scale relative to the current scale. for example: original scale 2 -> sprite.scale(4) -> final scale 6.\n     * The sprite scales out from the origin. This will not affect the values returned by {@link #getWidth()} and\n     * {@link #getHeight()} */\n    applyScale(amount) {\n        this.scale.scale(amount);\n        this.dirty = true;\n    }\n    /** Returns the packed vertices, colors, and texture coordinates for this sprite. */\n    getVertices(yDown = false) {\n        const { vertices, region } = this;\n        if (!this.dirty) {\n            return vertices;\n        }\n        let x = this.position.x;\n        let y = this.position.y;\n        let width = this.size.x;\n        let height = this.size.y;\n        let originX = this.origin.x;\n        let originY = this.origin.y;\n        let rotation = this.rotation;\n        let scaleX = this.scale.x;\n        let scaleY = this.scale.y;\n        let ou1 = region.u;\n        let ov1 = region.v;\n        let ou2 = region.u2;\n        let ov2 = region.v2;\n        const color = this.color;\n        let rotate = region.rotated;\n        const xRatio = width / region.originalWidth;\n        const yRatio = height / region.originalHeight;\n        const drawWidth = region.width * xRatio;\n        const drawHeight = region.height * yRatio;\n        const drawX = x + region.offsetX * xRatio;\n        let drawY = 0;\n        if (yDown) {\n            drawY = y + height - region.offsetY * yRatio - drawHeight;\n        }\n        else {\n            drawY = y + region.offsetY * yRatio;\n        }\n        x = drawX;\n        y = drawY;\n        width = drawWidth;\n        height = drawHeight;\n        if (yDown) {\n            const tmpV1 = ov1;\n            ov1 = ov2;\n            ov2 = tmpV1;\n        }\n        let x1 = -originX;\n        let x2 = width - originX;\n        let x3 = width - originX;\n        let x4 = -originX;\n        let y1 = -originY;\n        let y2 = -originY;\n        let y3 = height - originY;\n        let y4 = height - originY;\n        if (scaleX !== 1) {\n            x1 = x1 * scaleX;\n            x2 = x2 * scaleX;\n            x3 = x3 * scaleX;\n            x4 = x4 * scaleX;\n        }\n        if (scaleY !== 1) {\n            y1 = y1 * scaleY;\n            y2 = y2 * scaleY;\n            y3 = y3 * scaleY;\n            y4 = y4 * scaleY;\n        }\n        if (rotation !== 0) {\n            var cos = Math.cos(rotation);\n            var sin = Math.sin(rotation);\n            var rotatedX1 = cos * x1 - sin * y1;\n            var rotatedY1 = sin * x1 + cos * y1;\n            var rotatedX2 = cos * x2 - sin * y2;\n            var rotatedY2 = sin * x2 + cos * y2;\n            var rotatedX3 = cos * x3 - sin * y3;\n            var rotatedY3 = sin * x3 + cos * y3;\n            var rotatedX4 = cos * x4 - sin * y4;\n            var rotatedY4 = sin * x4 + cos * y4;\n            x1 = rotatedX1;\n            x2 = rotatedX2;\n            x3 = rotatedX3;\n            x4 = rotatedX4;\n            y1 = rotatedY1;\n            y2 = rotatedY2;\n            y3 = rotatedY3;\n            y4 = rotatedY4;\n        }\n        x1 += x + originX;\n        x2 += x + originX;\n        x3 += x + originX;\n        x4 += x + originX;\n        y1 += y + originY;\n        y2 += y + originY;\n        y3 += y + originY;\n        y4 += y + originY;\n        let u1 = ou1;\n        let v1 = ov1;\n        let u2 = ou2;\n        let v2 = ov2;\n        let u3 = u2;\n        let v3 = v1;\n        let u4 = u1;\n        let v4 = v2;\n        if (rotate) {\n            if (yDown) {\n                u1 = ou1;\n                v1 = ov2;\n                u2 = ou2;\n                v2 = ov1;\n                u3 = ou1;\n                v3 = ov1;\n                u4 = ou2;\n                v4 = ov2;\n            }\n            else {\n                u1 = ou2;\n                v1 = ov1;\n                u2 = ou1;\n                v2 = ov2;\n                u3 = ou2;\n                v3 = ov2;\n                u4 = ou1;\n                v4 = ov1;\n            }\n        }\n        var i = 0;\n        vertices[i++] = x1;\n        vertices[i++] = y1;\n        vertices[i++] = color.r;\n        vertices[i++] = color.g;\n        vertices[i++] = color.b;\n        vertices[i++] = color.a;\n        vertices[i++] = u1;\n        vertices[i++] = v1;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = x2;\n        vertices[i++] = y2;\n        vertices[i++] = color.r;\n        vertices[i++] = color.g;\n        vertices[i++] = color.b;\n        vertices[i++] = color.a;\n        vertices[i++] = u3;\n        vertices[i++] = v3;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = x3;\n        vertices[i++] = y3;\n        vertices[i++] = color.r;\n        vertices[i++] = color.g;\n        vertices[i++] = color.b;\n        vertices[i++] = color.a;\n        vertices[i++] = u2;\n        vertices[i++] = v2;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = x4;\n        vertices[i++] = y4;\n        vertices[i++] = color.r;\n        vertices[i++] = color.g;\n        vertices[i++] = color.b;\n        vertices[i++] = color.a;\n        vertices[i++] = u4;\n        vertices[i++] = v4;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i++] = 0;\n        vertices[i] = 0;\n        return vertices;\n    }\n    /** Returns the bounding axis aligned {@link Rectangle} that bounds this sprite. The rectangles x and y coordinates describe\n     * its bottom left corner. If you change the position or size of the sprite, you have to fetch the triangle again for it to be\n     * recomputed.\n     *\n     * @return the bounding Rectangle */\n    getBoundingRectangle() {\n        const vertices = this.vertices;\n        let minx = vertices[X1];\n        let miny = vertices[Y1];\n        let maxx = vertices[X1];\n        let maxy = vertices[Y1];\n        minx = minx > vertices[X2] ? vertices[X2] : minx;\n        minx = minx > vertices[X3] ? vertices[X3] : minx;\n        minx = minx > vertices[X4] ? vertices[X4] : minx;\n        maxx = maxx < vertices[X2] ? vertices[X2] : maxx;\n        maxx = maxx < vertices[X3] ? vertices[X3] : maxx;\n        maxx = maxx < vertices[X4] ? vertices[X4] : maxx;\n        miny = miny > vertices[Y2] ? vertices[Y2] : miny;\n        miny = miny > vertices[Y3] ? vertices[Y3] : miny;\n        miny = miny > vertices[Y4] ? vertices[Y4] : miny;\n        maxy = maxy < vertices[Y2] ? vertices[Y2] : maxy;\n        maxy = maxy < vertices[Y3] ? vertices[Y3] : maxy;\n        maxy = maxy < vertices[Y4] ? vertices[Y4] : maxy;\n        this.bounds.x = minx;\n        this.bounds.y = miny;\n        this.bounds.width = maxx - minx;\n        this.bounds.height = maxy - miny;\n        return this.bounds;\n    }\n    draw(batch) {\n        batch.drawVertices(this.region.texture, this.getVertices(batch.yDown));\n    }\n    drawWithAlpha(batch, alphaModulation) {\n        const oldAlpha = this.getColor().a;\n        this.setAlpha(oldAlpha * alphaModulation);\n        this.draw(batch);\n        this.setAlpha(oldAlpha);\n    }\n    getX() {\n        return this.position.x;\n    }\n    getY() {\n        return this.position.y;\n    }\n    /** @return the width of the sprite, not accounting for scale. */\n    getWidth() {\n        return this.size.x;\n    }\n    /** @return the height of the sprite, not accounting for scale. */\n    getHeight() {\n        return this.size.y;\n    }\n    /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of\n     * scaling {@link #setScale(float, float)} */\n    getOriginX() {\n        return this.origin.x;\n    }\n    /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of\n     * scaling {@link #setScale(float, float)} */\n    getOriginY() {\n        return this.origin.y;\n    }\n    /** X scale of the sprite, independent of size set by {@link #setSize(float, float)} */\n    getScaleX() {\n        return this.scale.x;\n    }\n    /** Y scale of the sprite, independent of size set by {@link #setSize(float, float)} */\n    getScaleY() {\n        return this.scale.y;\n    }\n    /** Returns the color of this sprite. If the returned instance is manipulated, {@link #setColor(Color)} must be called\n     * afterward. */\n    getColor() {\n        return this.color;\n    }\n}\nexports.Sprite = Sprite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}