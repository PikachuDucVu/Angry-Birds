{"ast":null,"code":"import Vector2 from './Vector2';\nconst tmpV1 = new Vector2(0, 0);\nconst tmpV2 = new Vector2(0, 0);\nexport const drawLine = function (batch, tex, x1, y1, x2, y2) {\n  let thickness = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n  let r = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  let g = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n  let b = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n  let a = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n  tmpV1.set(x1, y1);\n  tmpV2.set(x2, y2);\n  const length = tmpV1.distance(tmpV2);\n  const angle = tmpV2.subVector(tmpV1).angle();\n  batch.setColor(r, g, b, a);\n  batch.draw(tex, x1, y1, thickness * 0.5, length, 0, 0, angle - Math.PI / 2);\n  batch.setColor(1, 1, 1, 1);\n};\nexport const drawPolyline = function (batch, tex, verts) {\n  let thickness = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let g = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  let b = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n  let a = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n\n  if (verts.length < 4) {\n    return;\n  }\n\n  let prevX = verts[0];\n  let prevY = verts[1];\n\n  for (let i = 2; i < verts.length; i++) {\n    const x = verts[i];\n    const y = verts[++i];\n    drawLine(batch, tex, prevX, prevY, x, y, thickness, r, g, b, a);\n    prevX = x;\n    prevY = y;\n  } // drawLine(batch, tex, prevX, prevY, verts[0], verts[1], thickness, r, g, b, a);\n\n};\nexport const drawPolygon = function (batch, tex, verts) {\n  let thickness = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let g = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  let b = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n  let a = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n\n  if (verts.length < 4) {\n    return;\n  }\n\n  let prevX = verts[0];\n  let prevY = verts[1];\n\n  for (let i = 2; i < verts.length; i++) {\n    const x = verts[i];\n    const y = verts[++i];\n    drawLine(batch, tex, prevX, prevY, x, y, thickness, r, g, b, a);\n    prevX = x;\n    prevY = y;\n  }\n\n  drawLine(batch, tex, prevX, prevY, verts[0], verts[1], thickness, r, g, b, a);\n};\nexport const fillRect = function (batch, tex, x, y, w, h) {\n  let rotation = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  let originX = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : w / 2;\n  let originY = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : h / 2;\n  batch.draw(tex, x, y, w, h, originX, originY, rotation);\n};\nconst circleVerts = [];\nconst tmpV3 = new Vector2(0, 0);\nexport const drawCircle = function (batch, tex, x, y, radius) {\n  let thickness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  let segments = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 8;\n  let r = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  let g = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n  let b = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n  let a = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n  circleVerts.length = 0;\n  const slice = 2 * Math.PI / segments;\n\n  for (let i = 0; i < segments; i++) {\n    tmpV3.set(0, radius);\n    tmpV3.rotateRad(slice * i).add(x, y);\n    circleVerts.push(tmpV3.x, tmpV3.y);\n  }\n\n  drawPolygon(batch, tex, circleVerts, thickness, r, g, b, a);\n};","map":{"version":3,"names":["Vector2","tmpV1","tmpV2","drawLine","batch","tex","x1","y1","x2","y2","thickness","r","g","b","a","set","length","distance","angle","subVector","setColor","draw","Math","PI","drawPolyline","verts","prevX","prevY","i","x","y","drawPolygon","fillRect","w","h","rotation","originX","originY","circleVerts","tmpV3","drawCircle","radius","segments","slice","rotateRad","add","push"],"sources":["D:/projects/test-game/node_modules/gdxjs/lib/shapeUtils.js"],"sourcesContent":["import Vector2 from './Vector2';\nconst tmpV1 = new Vector2(0, 0);\nconst tmpV2 = new Vector2(0, 0);\nexport const drawLine = (batch, tex, x1, y1, x2, y2, thickness = 1, r = 1, g = 1, b = 1, a = 1) => {\n  tmpV1.set(x1, y1);\n  tmpV2.set(x2, y2);\n  const length = tmpV1.distance(tmpV2);\n  const angle = tmpV2.subVector(tmpV1).angle();\n  batch.setColor(r, g, b, a);\n  batch.draw(tex, x1, y1, thickness * 0.5, length, 0, 0, angle - Math.PI / 2);\n  batch.setColor(1, 1, 1, 1);\n};\nexport const drawPolyline = (batch, tex, verts, thickness = 1, r = 1, g = 1, b = 1, a = 1) => {\n  if (verts.length < 4) {\n    return;\n  }\n\n  let prevX = verts[0];\n  let prevY = verts[1];\n\n  for (let i = 2; i < verts.length; i++) {\n    const x = verts[i];\n    const y = verts[++i];\n    drawLine(batch, tex, prevX, prevY, x, y, thickness, r, g, b, a);\n    prevX = x;\n    prevY = y;\n  } // drawLine(batch, tex, prevX, prevY, verts[0], verts[1], thickness, r, g, b, a);\n\n};\nexport const drawPolygon = (batch, tex, verts, thickness = 1, r = 1, g = 1, b = 1, a = 1) => {\n  if (verts.length < 4) {\n    return;\n  }\n\n  let prevX = verts[0];\n  let prevY = verts[1];\n\n  for (let i = 2; i < verts.length; i++) {\n    const x = verts[i];\n    const y = verts[++i];\n    drawLine(batch, tex, prevX, prevY, x, y, thickness, r, g, b, a);\n    prevX = x;\n    prevY = y;\n  }\n\n  drawLine(batch, tex, prevX, prevY, verts[0], verts[1], thickness, r, g, b, a);\n};\nexport const fillRect = (batch, tex, x, y, w, h, rotation = 0, originX = w / 2, originY = h / 2) => {\n  batch.draw(tex, x, y, w, h, originX, originY, rotation);\n};\nconst circleVerts = [];\nconst tmpV3 = new Vector2(0, 0);\nexport const drawCircle = (batch, tex, x, y, radius, thickness = 1, segments = 8, r = 1, g = 1, b = 1, a = 1) => {\n  circleVerts.length = 0;\n  const slice = 2 * Math.PI / segments;\n\n  for (let i = 0; i < segments; i++) {\n    tmpV3.set(0, radius);\n    tmpV3.rotateRad(slice * i).add(x, y);\n    circleVerts.push(tmpV3.x, tmpV3.y);\n  }\n\n  drawPolygon(batch, tex, circleVerts, thickness, r, g, b, a);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}