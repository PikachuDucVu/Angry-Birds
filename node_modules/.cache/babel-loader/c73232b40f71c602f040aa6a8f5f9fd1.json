{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Vector2, Color } from \"gdxts\";\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const border = await Texture.load(gl, \"./border.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const black = new Color(0, 0, 0, 1);\n  let map = new Array(); //I\n\n  const iBlock = [[1], [1], [1], [1]]; //L\n\n  const lBlock = [[0, 0, 1], [1, 1, 1]]; //L-reverse\n\n  const lReverseBlock = [[1, 0, 0], [1, 1, 1]]; // Square\n\n  const sBlock = [[1, 1], [1, 1]]; // Z\n\n  const zBlock = [[0, 1, 1], [1, 1, 0]]; // Z-reverse\n\n  const zReverseBlock = [[1, 1, 0], [0, 1, 1]]; // T\n\n  const tBlock = [[0, 1, 0], [1, 1, 1]];\n  const blocks = [iBlock, lReverseBlock, lBlock, sBlock, zBlock, zReverseBlock, tBlock]; //config game\n\n  let blockPosition = new Vector2(83, 83);\n  let currentBlock = blocks[2]; //\n\n  let timeDelay = 0;\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  } // draw the map\n\n\n  for (let row = 0; row < 24; row++) {\n    //12x24\n    map[row] = new Array();\n\n    for (let col = 0; col < 12; col++) {\n      if (row >= 1) {\n        map[row].push(0);\n      } else {\n        map[row].push(1);\n      }\n    }\n\n    for (let col = 0; col < map[row].length; col++) {\n      map[row][0] = 1;\n      map[row][11] = 1;\n    }\n  }\n\n  function blockTracking() {\n    for (let row = 0; row < currentBlock.length; row++) {\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[23 - row][5 + col] = currentBlock[row][col];\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0 && map[row][col] !== 9) {\n          batch.draw(block, col * blockPosition.x, row * blockPosition.y, 83, 83);\n        } // scan to draw\n\n      }\n    }\n  }\n\n  window.addEventListener(\"keypress\", function (e) {\n    if (e) {}\n  });\n  blockTracking();\n  createGameLoop(delta => {\n    timeDelay += delta;\n\n    if (timeDelay >= 0.5) {\n      timeDelay = 0;\n\n      for (let row = 1; row < map.length; row++) {\n        for (let col = 1; col < map[row].length - 1; col++) {\n          if (map[row - 1][col] === 0 && map[row][col] !== 0) {\n            [map[row][col], map[row - 1][col]] = [map[row - 1][col], map[row][col]];\n          }\n        }\n      }\n\n      for (let row = 23; row > 1; row--) {\n        for (let col = 1; col < map[row].length - 1; col++) {\n          if (map[row][col] != 0) {\n            console.log(row + \" work\");\n          }\n        }\n      }\n\n      console.log(map);\n    }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end(); //draw border\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin(); // batch.draw(background, 0, 0, 1000, 2000);\n\n    drawTetromino(); // batch.draw(border, 0, 0, 1000, 2000);\n\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\ninit(); // init2();","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Vector2","Color","init","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","background","load","border","bgRight","block","black","map","Array","iBlock","lBlock","lReverseBlock","sBlock","zBlock","zReverseBlock","tBlock","blocks","blockPosition","currentBlock","timeDelay","getRandomInt","min","max","Math","floor","random","row","col","push","length","blockTracking","drawTetromino","draw","x","y","window","addEventListener","e","delta","console","log","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import {\n  createGameLoop,\n  createStage,\n  createViewport,\n  PolygonBatch,\n  ShapeRenderer,\n  Texture,\n  Vector2,\n  BitmapFont,\n  TextureRegion,\n  Color,\n} from \"gdxts\";\n\nimport { init2 } from \"./index2\";\n\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 1500, 2000);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n\n  const background = await Texture.load(gl, \"./TetrisBg.png\");\n  const border = await Texture.load(gl, \"./border.png\");\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const black = new Color(0, 0, 0, 1);\n\n  let map = new Array();\n\n  //I\n  const iBlock = [[1], [1], [1], [1]];\n\n  //L\n  const lBlock = [\n    [0, 0, 1],\n    [1, 1, 1],\n  ];\n\n  //L-reverse\n  const lReverseBlock = [\n    [1, 0, 0],\n    [1, 1, 1],\n  ];\n\n  // Square\n  const sBlock = [\n    [1, 1],\n    [1, 1],\n  ];\n\n  // Z\n  const zBlock = [\n    [0, 1, 1],\n    [1, 1, 0],\n  ];\n\n  // Z-reverse\n  const zReverseBlock = [\n    [1, 1, 0],\n    [0, 1, 1],\n  ];\n\n  // T\n  const tBlock = [\n    [0, 1, 0],\n    [1, 1, 1],\n  ];\n\n  const blocks = [\n    iBlock,\n    lReverseBlock,\n    lBlock,\n    sBlock,\n    zBlock,\n    zReverseBlock,\n    tBlock,\n  ];\n\n  //config game\n\n  let blockPosition = new Vector2(83, 83);\n  let currentBlock = blocks[2]; //\n  let timeDelay = 0;\n\n  function getRandomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n  // draw the map\n  for (let row = 0; row < 24; row++) {\n    //12x24\n    map[row] = new Array();\n    for (let col = 0; col < 12; col++) {\n      if (row >= 1) {\n        map[row].push(0);\n      } else {\n        map[row].push(1);\n      }\n    }\n    for (let col = 0; col < map[row].length; col++) {\n      map[row][0] = 1;\n      map[row][11] = 1;\n    }\n  }\n\n  function blockTracking() {\n    for (let row = 0; row < currentBlock.length; row++) {\n      for (let col = 0; col < currentBlock[row].length; col++) {\n        map[23 - row][5 + col] = currentBlock[row][col];\n      }\n    }\n  }\n\n  function drawTetromino() {\n    for (let row = 0; row < map.length; row++) {\n      for (let col = 0; col < map[row].length; col++) {\n        if (map[row][col] !== 0 && map[row][col] !== 9) {\n          batch.draw(\n            block,\n            col * blockPosition.x,\n            row * blockPosition.y,\n            83,\n            83\n          );\n        } // scan to draw\n      }\n    }\n  }\n\n  window.addEventListener(\"keypress\", function (e) {\n    if (e) {\n    }\n  });\n\n  blockTracking();\n  createGameLoop((delta: number) => {\n    timeDelay += delta;\n    if (timeDelay >= 0.5) {\n      timeDelay = 0;\n\n      for (let row = 1; row < map.length; row++) {\n        for (let col = 1; col < map[row].length - 1; col++) {\n          if (map[row - 1][col] === 0 && map[row][col] !== 0) {\n            [map[row][col], map[row - 1][col]] = [\n              map[row - 1][col],\n              map[row][col],\n            ];\n          }\n        }\n      }\n      for (let row = 23; row > 1; row--) {\n        for (let col = 1; col < map[row].length - 1; col++) {\n          if (map[row][col] != 0) {\n            console.log(row + \" work\");\n          }\n        }\n      }\n\n      console.log(map);\n    }\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end();\n\n    //draw border\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n\n    // batch.draw(background, 0, 0, 1000, 2000);\n    drawTetromino();\n    // batch.draw(border, 0, 0, 1000, 2000);\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};\n\ninit();\n// init2();\n"],"mappings":"AAAA,SACEA,cADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,YAJF,EAKEC,aALF,EAMEC,OANF,EAOEC,OAPF,EAUEC,KAVF,QAWO,OAXP;AAeA,OAAO,MAAMC,IAAI,GAAG,YAAY;EAC9B,MAAMC,KAAK,GAAGR,WAAW,EAAzB;EACA,MAAMS,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;EACA,MAAMC,QAAQ,GAAGV,cAAc,CAACQ,MAAD,EAAS,IAAT,EAAe,IAAf,CAA/B;EACA,MAAMG,EAAE,GAAGD,QAAQ,CAACE,UAAT,EAAX;EACA,MAAMC,aAAa,GAAG,IAAIX,aAAJ,CAAkBS,EAAlB,CAAtB;EACA,MAAMG,KAAK,GAAG,IAAIb,YAAJ,CAAiBU,EAAjB,CAAd;EACA,MAAMI,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;EAEA,MAAMC,UAAU,GAAG,MAAMd,OAAO,CAACe,IAAR,CAAaP,EAAb,EAAiB,gBAAjB,CAAzB;EACA,MAAMQ,MAAM,GAAG,MAAMhB,OAAO,CAACe,IAAR,CAAaP,EAAb,EAAiB,cAAjB,CAArB;EACA,MAAMS,OAAO,GAAG,MAAMjB,OAAO,CAACe,IAAR,CAAaP,EAAb,EAAiB,WAAjB,CAAtB;EACA,MAAMU,KAAK,GAAG,MAAMlB,OAAO,CAACe,IAAR,CAAaP,EAAb,EAAiB,mBAAjB,CAApB;EACA,MAAMW,KAAK,GAAG,IAAIjB,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAd;EAEA,IAAIkB,GAAG,GAAG,IAAIC,KAAJ,EAAV,CAf8B,CAiB9B;;EACA,MAAMC,MAAM,GAAG,CAAC,CAAC,CAAD,CAAD,EAAM,CAAC,CAAD,CAAN,EAAW,CAAC,CAAD,CAAX,EAAgB,CAAC,CAAD,CAAhB,CAAf,CAlB8B,CAoB9B;;EACA,MAAMC,MAAM,GAAG,CACb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADa,EAEb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFa,CAAf,CArB8B,CA0B9B;;EACA,MAAMC,aAAa,GAAG,CACpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADoB,EAEpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFoB,CAAtB,CA3B8B,CAgC9B;;EACA,MAAMC,MAAM,GAAG,CACb,CAAC,CAAD,EAAI,CAAJ,CADa,EAEb,CAAC,CAAD,EAAI,CAAJ,CAFa,CAAf,CAjC8B,CAsC9B;;EACA,MAAMC,MAAM,GAAG,CACb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADa,EAEb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFa,CAAf,CAvC8B,CA4C9B;;EACA,MAAMC,aAAa,GAAG,CACpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADoB,EAEpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFoB,CAAtB,CA7C8B,CAkD9B;;EACA,MAAMC,MAAM,GAAG,CACb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADa,EAEb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFa,CAAf;EAKA,MAAMC,MAAM,GAAG,CACbP,MADa,EAEbE,aAFa,EAGbD,MAHa,EAIbE,MAJa,EAKbC,MALa,EAMbC,aANa,EAObC,MAPa,CAAf,CAxD8B,CAkE9B;;EAEA,IAAIE,aAAa,GAAG,IAAI7B,OAAJ,CAAY,EAAZ,EAAgB,EAAhB,CAApB;EACA,IAAI8B,YAAY,GAAGF,MAAM,CAAC,CAAD,CAAzB,CArE8B,CAqEA;;EAC9B,IAAIG,SAAS,GAAG,CAAhB;;EAEA,SAASC,YAAT,CAAsBC,GAAtB,EAAmCC,GAAnC,EAAgD;IAC9C,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;EACD,CA1E6B,CA2E9B;;;EACA,KAAK,IAAIK,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;IACjC;IACAnB,GAAG,CAACmB,GAAD,CAAH,GAAW,IAAIlB,KAAJ,EAAX;;IACA,KAAK,IAAImB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;MACjC,IAAID,GAAG,IAAI,CAAX,EAAc;QACZnB,GAAG,CAACmB,GAAD,CAAH,CAASE,IAAT,CAAc,CAAd;MACD,CAFD,MAEO;QACLrB,GAAG,CAACmB,GAAD,CAAH,CAASE,IAAT,CAAc,CAAd;MACD;IACF;;IACD,KAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGpB,GAAG,CAACmB,GAAD,CAAH,CAASG,MAAjC,EAAyCF,GAAG,EAA5C,EAAgD;MAC9CpB,GAAG,CAACmB,GAAD,CAAH,CAAS,CAAT,IAAc,CAAd;MACAnB,GAAG,CAACmB,GAAD,CAAH,CAAS,EAAT,IAAe,CAAf;IACD;EACF;;EAED,SAASI,aAAT,GAAyB;IACvB,KAAK,IAAIJ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGR,YAAY,CAACW,MAArC,EAA6CH,GAAG,EAAhD,EAAoD;MAClD,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGT,YAAY,CAACQ,GAAD,CAAZ,CAAkBG,MAA1C,EAAkDF,GAAG,EAArD,EAAyD;QACvDpB,GAAG,CAAC,KAAKmB,GAAN,CAAH,CAAc,IAAIC,GAAlB,IAAyBT,YAAY,CAACQ,GAAD,CAAZ,CAAkBC,GAAlB,CAAzB;MACD;IACF;EACF;;EAED,SAASI,aAAT,GAAyB;IACvB,KAAK,IAAIL,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGnB,GAAG,CAACsB,MAA5B,EAAoCH,GAAG,EAAvC,EAA2C;MACzC,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGpB,GAAG,CAACmB,GAAD,CAAH,CAASG,MAAjC,EAAyCF,GAAG,EAA5C,EAAgD;QAC9C,IAAIpB,GAAG,CAACmB,GAAD,CAAH,CAASC,GAAT,MAAkB,CAAlB,IAAuBpB,GAAG,CAACmB,GAAD,CAAH,CAASC,GAAT,MAAkB,CAA7C,EAAgD;UAC9C7B,KAAK,CAACkC,IAAN,CACE3B,KADF,EAEEsB,GAAG,GAAGV,aAAa,CAACgB,CAFtB,EAGEP,GAAG,GAAGT,aAAa,CAACiB,CAHtB,EAIE,EAJF,EAKE,EALF;QAOD,CAT6C,CAS5C;;MACH;IACF;EACF;;EAEDC,MAAM,CAACC,gBAAP,CAAwB,UAAxB,EAAoC,UAAUC,CAAV,EAAa;IAC/C,IAAIA,CAAJ,EAAO,CACN;EACF,CAHD;EAKAP,aAAa;EACbhD,cAAc,CAAEwD,KAAD,IAAmB;IAChCnB,SAAS,IAAImB,KAAb;;IACA,IAAInB,SAAS,IAAI,GAAjB,EAAsB;MACpBA,SAAS,GAAG,CAAZ;;MAEA,KAAK,IAAIO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGnB,GAAG,CAACsB,MAA5B,EAAoCH,GAAG,EAAvC,EAA2C;QACzC,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGpB,GAAG,CAACmB,GAAD,CAAH,CAASG,MAAT,GAAkB,CAA1C,EAA6CF,GAAG,EAAhD,EAAoD;UAClD,IAAIpB,GAAG,CAACmB,GAAG,GAAG,CAAP,CAAH,CAAaC,GAAb,MAAsB,CAAtB,IAA2BpB,GAAG,CAACmB,GAAD,CAAH,CAASC,GAAT,MAAkB,CAAjD,EAAoD;YAClD,CAACpB,GAAG,CAACmB,GAAD,CAAH,CAASC,GAAT,CAAD,EAAgBpB,GAAG,CAACmB,GAAG,GAAG,CAAP,CAAH,CAAaC,GAAb,CAAhB,IAAqC,CACnCpB,GAAG,CAACmB,GAAG,GAAG,CAAP,CAAH,CAAaC,GAAb,CADmC,EAEnCpB,GAAG,CAACmB,GAAD,CAAH,CAASC,GAAT,CAFmC,CAArC;UAID;QACF;MACF;;MACD,KAAK,IAAID,GAAG,GAAG,EAAf,EAAmBA,GAAG,GAAG,CAAzB,EAA4BA,GAAG,EAA/B,EAAmC;QACjC,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGpB,GAAG,CAACmB,GAAD,CAAH,CAASG,MAAT,GAAkB,CAA1C,EAA6CF,GAAG,EAAhD,EAAoD;UAClD,IAAIpB,GAAG,CAACmB,GAAD,CAAH,CAASC,GAAT,KAAiB,CAArB,EAAwB;YACtBY,OAAO,CAACC,GAAR,CAAYd,GAAG,GAAG,OAAlB;UACD;QACF;MACF;;MAEDa,OAAO,CAACC,GAAR,CAAYjC,GAAZ;IACD;;IACDZ,EAAE,CAAC8C,KAAH,CAAS9C,EAAE,CAAC+C,gBAAZ;IACA7C,aAAa,CAAC8C,aAAd,CAA4B5C,MAAM,CAAC6C,cAAP,CAAsBC,MAAlD;IACAhD,aAAa,CAACiD,KAAd;IACAjD,aAAa,CAACkD,IAAd,CAAmB,IAAnB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,IAA/B,EAAqC,IAArC,EAA2CzC,KAA3C;IACAT,aAAa,CAACmD,GAAd,GA7BgC,CA+BhC;;IACAlD,KAAK,CAAC6C,aAAN,CAAoB5C,MAAM,CAAC6C,cAAP,CAAsBC,MAA1C;IACA/C,KAAK,CAACgD,KAAN,GAjCgC,CAmChC;;IACAf,aAAa,GApCmB,CAqChC;;IACAjC,KAAK,CAACkC,IAAN,CAAW5B,OAAX,EAAoB,IAApB,EAA0B,CAA1B,EAA6B,GAA7B,EAAkC,IAAlC;IACAN,KAAK,CAACkD,GAAN;EACD,CAxCa,CAAd;AAyCD,CAnKM;AAqKP1D,IAAI,G,CACJ"},"metadata":{},"sourceType":"module"}