{"ast":null,"code":"import { b2World } from \"box2d.ts\";\nimport { Color, createGameLoop, createStage, createViewport, ShapeRenderer } from \"gdxts\";\nconst WORLD_WIDTH = 600;\nconst WORLD_HEIGHT = 1000;\nexport const init = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const mapData = await fetch(\"./walls.tmj\").then(res => res.json());\n  const wallData = mapData.layers.find(l => l.name === \"walls\").objects;\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const world = new b2World({\n    x: 0,\n    y: -10\n  });\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.combined);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\n    shapeRenderer.end();\n  });\n};\ninit();","map":{"version":3,"names":["b2World","Color","createGameLoop","createStage","createViewport","ShapeRenderer","WORLD_WIDTH","WORLD_HEIGHT","init","stage","canvas","getCanvas","mapData","fetch","then","res","json","wallData","layers","find","l","name","objects","viewport","gl","getContext","camera","getCamera","shapeRenderer","world","x","y","clearColor","delta","clear","COLOR_BUFFER_BIT","setProjection","combined","begin","rect","WHITE","end"],"sources":["D:/projects/test-game/src/index.ts"],"sourcesContent":["import { b2World } from \"box2d.ts\";\r\nimport {\r\n  Color,\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  ShapeRenderer,\r\n} from \"gdxts\";\r\n\r\nconst WORLD_WIDTH = 600;\r\nconst WORLD_HEIGHT = 1000;\r\n\r\nexport const init = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n\r\n  const mapData = await fetch(\"./walls.tmj\").then((res) => res.json());\r\n  const wallData = mapData.layers.find((l) => l.name === \"walls\").objects;\r\n\r\n  const viewport = createViewport(canvas, WORLD_WIDTH, WORLD_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n\r\n  const world = new b2World({\r\n    x: 0,\r\n    y: -10,\r\n  });\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    shapeRenderer.setProjection(camera.combined);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, WORLD_WIDTH, WORLD_HEIGHT, Color.WHITE);\r\n    shapeRenderer.end();\r\n  });\r\n};\r\ninit();\r\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,UAAxB;AACA,SACEC,KADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,cAJF,EAKEC,aALF,QAMO,OANP;AAQA,MAAMC,WAAW,GAAG,GAApB;AACA,MAAMC,YAAY,GAAG,IAArB;AAEA,OAAO,MAAMC,IAAI,GAAG,YAAY;EAC9B,MAAMC,KAAK,GAAGN,WAAW,EAAzB;EACA,MAAMO,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;EAEA,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAAC,aAAD,CAAL,CAAqBC,IAArB,CAA2BC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAAnC,CAAtB;EACA,MAAMC,QAAQ,GAAGL,OAAO,CAACM,MAAR,CAAeC,IAAf,CAAqBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,OAAtC,EAA+CC,OAAhE;EAEA,MAAMC,QAAQ,GAAGnB,cAAc,CAACM,MAAD,EAASJ,WAAT,EAAsBC,YAAtB,CAA/B;EACA,MAAMiB,EAAE,GAAGD,QAAQ,CAACE,UAAT,EAAX;EACA,MAAMC,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;EAEA,MAAMC,aAAa,GAAG,IAAIvB,aAAJ,CAAkBmB,EAAlB,CAAtB;EAEA,MAAMK,KAAK,GAAG,IAAI7B,OAAJ,CAAY;IACxB8B,CAAC,EAAE,CADqB;IAExBC,CAAC,EAAE,CAAC;EAFoB,CAAZ,CAAd;EAKAP,EAAE,CAACQ,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;EACA9B,cAAc,CAAE+B,KAAD,IAAmB;IAChCT,EAAE,CAACU,KAAH,CAASV,EAAE,CAACW,gBAAZ;IACAP,aAAa,CAACQ,aAAd,CAA4BV,MAAM,CAACW,QAAnC;IACAT,aAAa,CAACU,KAAd;IACAV,aAAa,CAACW,IAAd,CAAmB,IAAnB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BjC,WAA/B,EAA4CC,YAA5C,EAA0DN,KAAK,CAACuC,KAAhE;IACAZ,aAAa,CAACa,GAAd;EACD,CANa,CAAd;AAOD,CA1BM;AA2BPjC,IAAI"},"metadata":{},"sourceType":"module"}