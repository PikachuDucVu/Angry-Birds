{"ast":null,"code":"\"use strict\";\n\nvar compile = require(\"cwise-compiler\");\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n};\n\nfunction fixup(x) {\n  if (!x) {\n    return EmptyProc;\n  }\n\n  for (var i = 0; i < x.args.length; ++i) {\n    var a = x.args[i];\n\n    if (i === 0) {\n      x.args[i] = {\n        name: a,\n        lvalue: true,\n        rvalue: !!x.rvalue,\n        count: x.count || 1\n      };\n    } else {\n      x.args[i] = {\n        name: a,\n        lvalue: false,\n        rvalue: true,\n        count: 1\n      };\n    }\n  }\n\n  if (!x.thisVars) {\n    x.thisVars = [];\n  }\n\n  if (!x.localVars) {\n    x.localVars = [];\n  }\n\n  return x;\n}\n\nfunction pcompile(user_args) {\n  return compile({\n    args: user_args.args,\n    pre: fixup(user_args.pre),\n    body: fixup(user_args.body),\n    post: fixup(user_args.proc),\n    funcName: user_args.funcName\n  });\n}\n\nfunction makeOp(user_args) {\n  var args = [];\n\n  for (var i = 0; i < user_args.args.length; ++i) {\n    args.push(\"a\" + i);\n  }\n\n  var wrapper = new Function(\"P\", [\"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"].join(\"\"));\n  return wrapper(pcompile(user_args));\n}\n\nvar assign_ops = {\n  add: \"+\",\n  sub: \"-\",\n  mul: \"*\",\n  div: \"/\",\n  mod: \"%\",\n  band: \"&\",\n  bor: \"|\",\n  bxor: \"^\",\n  lshift: \"<<\",\n  rshift: \">>\",\n  rrshift: \">>>\"\n};\n\n(function () {\n  for (var id in assign_ops) {\n    var op = assign_ops[id];\n    exports[id] = makeOp({\n      args: [\"array\", \"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=b\" + op + \"c\"\n      },\n      funcName: id\n    });\n    exports[id + \"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a\" + op + \"=b\"\n      },\n      rvalue: true,\n      funcName: id + \"eq\"\n    });\n    exports[id + \"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {\n        args: [\"a\", \"b\", \"s\"],\n        body: \"a=b\" + op + \"s\"\n      },\n      funcName: id + \"s\"\n    });\n    exports[id + \"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {\n        args: [\"a\", \"s\"],\n        body: \"a\" + op + \"=s\"\n      },\n      rvalue: true,\n      funcName: id + \"seq\"\n    });\n  }\n})();\n\nvar unary_ops = {\n  not: \"!\",\n  bnot: \"~\",\n  neg: \"-\",\n  recip: \"1.0/\"\n};\n\n(function () {\n  for (var id in unary_ops) {\n    var op = unary_ops[id];\n    exports[id] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=\" + op + \"b\"\n      },\n      funcName: id\n    });\n    exports[id + \"eq\"] = makeOp({\n      args: [\"array\"],\n      body: {\n        args: [\"a\"],\n        body: \"a=\" + op + \"a\"\n      },\n      rvalue: true,\n      count: 2,\n      funcName: id + \"eq\"\n    });\n  }\n})();\n\nvar binary_ops = {\n  and: \"&&\",\n  or: \"||\",\n  eq: \"===\",\n  neq: \"!==\",\n  lt: \"<\",\n  gt: \">\",\n  leq: \"<=\",\n  geq: \">=\"\n};\n\n(function () {\n  for (var id in binary_ops) {\n    var op = binary_ops[id];\n    exports[id] = makeOp({\n      args: [\"array\", \"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=b\" + op + \"c\"\n      },\n      funcName: id\n    });\n    exports[id + \"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {\n        args: [\"a\", \"b\", \"s\"],\n        body: \"a=b\" + op + \"s\"\n      },\n      funcName: id + \"s\"\n    });\n    exports[id + \"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=a\" + op + \"b\"\n      },\n      rvalue: true,\n      count: 2,\n      funcName: id + \"eq\"\n    });\n    exports[id + \"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {\n        args: [\"a\", \"s\"],\n        body: \"a=a\" + op + \"s\"\n      },\n      rvalue: true,\n      count: 2,\n      funcName: id + \"seq\"\n    });\n  }\n})();\n\nvar math_unary = [\"abs\", \"acos\", \"asin\", \"atan\", \"ceil\", \"cos\", \"exp\", \"floor\", \"log\", \"round\", \"sin\", \"sqrt\", \"tan\"];\n\n(function () {\n  for (var i = 0; i < math_unary.length; ++i) {\n    var f = math_unary[i];\n    exports[f] = makeOp({\n      args: [\"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(b)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f\n    });\n    exports[f + \"eq\"] = makeOp({\n      args: [\"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\"],\n        body: \"a=this_f(a)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"eq\"\n    });\n  }\n})();\n\nvar math_comm = [\"max\", \"min\", \"atan2\", \"pow\"];\n\n(function () {\n  for (var i = 0; i < math_comm.length; ++i) {\n    var f = math_comm[i];\n    exports[f] = makeOp({\n      args: [\"array\", \"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=this_f(b,c)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f\n    });\n    exports[f + \"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=this_f(b,c)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f + \"s\"\n    });\n    exports[f + \"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(a,b)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"eq\"\n    });\n    exports[f + \"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(a,b)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"seq\"\n    });\n  }\n})();\n\nvar math_noncomm = [\"atan2\", \"pow\"];\n\n(function () {\n  for (var i = 0; i < math_noncomm.length; ++i) {\n    var f = math_noncomm[i];\n    exports[f + \"op\"] = makeOp({\n      args: [\"array\", \"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=this_f(c,b)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f + \"op\"\n    });\n    exports[f + \"ops\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\", \"c\"],\n        body: \"a=this_f(c,b)\",\n        thisVars: [\"this_f\"]\n      },\n      funcName: f + \"ops\"\n    });\n    exports[f + \"opeq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(b,a)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"opeq\"\n    });\n    exports[f + \"opseq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      pre: {\n        args: [],\n        body: \"this_f=Math.\" + f,\n        thisVars: [\"this_f\"]\n      },\n      body: {\n        args: [\"a\", \"b\"],\n        body: \"a=this_f(b,a)\",\n        thisVars: [\"this_f\"]\n      },\n      rvalue: true,\n      count: 2,\n      funcName: f + \"opseq\"\n    });\n  }\n})();\n\nexports.any = compile({\n  args: [\"array\"],\n  pre: EmptyProc,\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"if(a){return true}\",\n    localVars: [],\n    thisVars: []\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [],\n    body: \"return false\"\n  },\n  funcName: \"any\"\n});\nexports.all = compile({\n  args: [\"array\"],\n  pre: EmptyProc,\n  body: {\n    args: [{\n      name: \"x\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"if(!x){return false}\",\n    localVars: [],\n    thisVars: []\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [],\n    body: \"return true\"\n  },\n  funcName: \"all\"\n});\nexports.sum = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"this_s+=a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"sum\"\n});\nexports.prod = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=1\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"this_s*=a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"prod\"\n});\nexports.norm2squared = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }],\n    body: \"this_s+=a*a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"norm2squared\"\n});\nexports.norm2 = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }],\n    body: \"this_s+=a*a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return Math.sqrt(this_s)\"\n  },\n  funcName: \"norm2\"\n});\nexports.norminf = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 4\n    }],\n    body: \"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"norminf\"\n});\nexports.norm1 = compile({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"this_s=0\"\n  },\n  body: {\n    args: [{\n      name: \"a\",\n      lvalue: false,\n      rvalue: true,\n      count: 3\n    }],\n    body: \"this_s+=a<0?-a:a\",\n    localVars: [],\n    thisVars: [\"this_s\"]\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [\"this_s\"],\n    body: \"return this_s\"\n  },\n  funcName: \"norm1\"\n});\nexports.sup = compile({\n  args: [\"array\"],\n  pre: {\n    body: \"this_h=-Infinity\",\n    args: [],\n    thisVars: [\"this_h\"],\n    localVars: []\n  },\n  body: {\n    body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n    args: [{\n      \"name\": \"_inline_1_arg0_\",\n      \"lvalue\": false,\n      \"rvalue\": true,\n      \"count\": 2\n    }],\n    thisVars: [\"this_h\"],\n    localVars: []\n  },\n  post: {\n    body: \"return this_h\",\n    args: [],\n    thisVars: [\"this_h\"],\n    localVars: []\n  }\n});\nexports.inf = compile({\n  args: [\"array\"],\n  pre: {\n    body: \"this_h=Infinity\",\n    args: [],\n    thisVars: [\"this_h\"],\n    localVars: []\n  },\n  body: {\n    body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n    args: [{\n      \"name\": \"_inline_1_arg0_\",\n      \"lvalue\": false,\n      \"rvalue\": true,\n      \"count\": 2\n    }],\n    thisVars: [\"this_h\"],\n    localVars: []\n  },\n  post: {\n    body: \"return this_h\",\n    args: [],\n    thisVars: [\"this_h\"],\n    localVars: []\n  }\n});\nexports.argmin = compile({\n  args: [\"index\", \"array\", \"shape\"],\n  pre: {\n    body: \"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args: [{\n      name: \"_inline_0_arg0_\",\n      lvalue: false,\n      rvalue: false,\n      count: 0\n    }, {\n      name: \"_inline_0_arg1_\",\n      lvalue: false,\n      rvalue: false,\n      count: 0\n    }, {\n      name: \"_inline_0_arg2_\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    thisVars: [\"this_i\", \"this_v\"],\n    localVars: []\n  },\n  body: {\n    body: \"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args: [{\n      name: \"_inline_1_arg0_\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }, {\n      name: \"_inline_1_arg1_\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }],\n    thisVars: [\"this_i\", \"this_v\"],\n    localVars: [\"_inline_1_k\"]\n  },\n  post: {\n    body: \"{return this_i}\",\n    args: [],\n    thisVars: [\"this_i\"],\n    localVars: []\n  }\n});\nexports.argmax = compile({\n  args: [\"index\", \"array\", \"shape\"],\n  pre: {\n    body: \"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args: [{\n      name: \"_inline_0_arg0_\",\n      lvalue: false,\n      rvalue: false,\n      count: 0\n    }, {\n      name: \"_inline_0_arg1_\",\n      lvalue: false,\n      rvalue: false,\n      count: 0\n    }, {\n      name: \"_inline_0_arg2_\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    thisVars: [\"this_i\", \"this_v\"],\n    localVars: []\n  },\n  body: {\n    body: \"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args: [{\n      name: \"_inline_1_arg0_\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }, {\n      name: \"_inline_1_arg1_\",\n      lvalue: false,\n      rvalue: true,\n      count: 2\n    }],\n    thisVars: [\"this_i\", \"this_v\"],\n    localVars: [\"_inline_1_k\"]\n  },\n  post: {\n    body: \"{return this_i}\",\n    args: [],\n    thisVars: [\"this_i\"],\n    localVars: []\n  }\n});\nexports.random = makeOp({\n  args: [\"array\"],\n  pre: {\n    args: [],\n    body: \"this_f=Math.random\",\n    thisVars: [\"this_f\"]\n  },\n  body: {\n    args: [\"a\"],\n    body: \"a=this_f()\",\n    thisVars: [\"this_f\"]\n  },\n  funcName: \"random\"\n});\nexports.assign = makeOp({\n  args: [\"array\", \"array\"],\n  body: {\n    args: [\"a\", \"b\"],\n    body: \"a=b\"\n  },\n  funcName: \"assign\"\n});\nexports.assigns = makeOp({\n  args: [\"array\", \"scalar\"],\n  body: {\n    args: [\"a\", \"b\"],\n    body: \"a=b\"\n  },\n  funcName: \"assigns\"\n});\nexports.equals = compile({\n  args: [\"array\", \"array\"],\n  pre: EmptyProc,\n  body: {\n    args: [{\n      name: \"x\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }, {\n      name: \"y\",\n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"if(x!==y){return false}\",\n    localVars: [],\n    thisVars: []\n  },\n  post: {\n    args: [],\n    localVars: [],\n    thisVars: [],\n    body: \"return true\"\n  },\n  funcName: \"equals\"\n});","map":{"version":3,"names":["compile","require","EmptyProc","body","args","thisVars","localVars","fixup","x","i","length","a","name","lvalue","rvalue","count","pcompile","user_args","pre","post","proc","funcName","makeOp","push","wrapper","Function","join","assign_ops","add","sub","mul","div","mod","band","bor","bxor","lshift","rshift","rrshift","id","op","exports","unary_ops","not","bnot","neg","recip","binary_ops","and","or","eq","neq","lt","gt","leq","geq","math_unary","f","math_comm","math_noncomm","any","all","sum","prod","norm2squared","norm2","norminf","norm1","sup","inf","argmin","argmax","random","assign","assigns","equals"],"sources":["D:/projects/test-game/node_modules/ndarray-ops/ndarray-ops.js"],"sourcesContent":["\"use strict\"\n\nvar compile = require(\"cwise-compiler\")\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n}\n\nfunction fixup(x) {\n  if(!x) {\n    return EmptyProc\n  }\n  for(var i=0; i<x.args.length; ++i) {\n    var a = x.args[i]\n    if(i === 0) {\n      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }\n    } else {\n      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}\n    }\n  }\n  if(!x.thisVars) {\n    x.thisVars = []\n  }\n  if(!x.localVars) {\n    x.localVars = []\n  }\n  return x\n}\n\nfunction pcompile(user_args) {\n  return compile({\n    args:     user_args.args,\n    pre:      fixup(user_args.pre),\n    body:     fixup(user_args.body),\n    post:     fixup(user_args.proc),\n    funcName: user_args.funcName\n  })\n}\n\nfunction makeOp(user_args) {\n  var args = []\n  for(var i=0; i<user_args.args.length; ++i) {\n    args.push(\"a\"+i)\n  }\n  var wrapper = new Function(\"P\", [\n    \"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"\n  ].join(\"\"))\n  return wrapper(pcompile(user_args))\n}\n\nvar assign_ops = {\n  add:  \"+\",\n  sub:  \"-\",\n  mul:  \"*\",\n  div:  \"/\",\n  mod:  \"%\",\n  band: \"&\",\n  bor:  \"|\",\n  bxor: \"^\",\n  lshift: \"<<\",\n  rshift: \">>\",\n  rrshift: \">>>\"\n}\n;(function(){\n  for(var id in assign_ops) {\n    var op = assign_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\",\"b\",\"c\"],\n             body: \"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\",\"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a\"+op+\"=b\"},\n      rvalue: true,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {args:[\"a\",\"b\",\"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\",\"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a\"+op+\"=s\"},\n      rvalue: true,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar unary_ops = {\n  not: \"!\",\n  bnot: \"~\",\n  neg: \"-\",\n  recip: \"1.0/\"\n}\n;(function(){\n  for(var id in unary_ops) {\n    var op = unary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a=\"+op+\"b\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\"],\n      body: {args:[\"a\"],\n             body:\"a=\"+op+\"a\"},\n      rvalue: true,\n      count: 2,\n      funcName: id+\"eq\"\n    })\n  }\n})();\n\nvar binary_ops = {\n  and: \"&&\",\n  or: \"||\",\n  eq: \"===\",\n  neq: \"!==\",\n  lt: \"<\",\n  gt: \">\",\n  leq: \"<=\",\n  geq: \">=\"\n}\n;(function() {\n  for(var id in binary_ops) {\n    var op = binary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\", \"b\", \"c\"],\n             body:\"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\",\"array\",\"scalar\"],\n      body: {args:[\"a\", \"b\", \"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\", \"b\"],\n             body:\"a=a\"+op+\"b\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a=a\"+op+\"s\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar math_unary = [\n  \"abs\",\n  \"acos\",\n  \"asin\",\n  \"atan\",\n  \"ceil\",\n  \"cos\",\n  \"exp\",\n  \"floor\",\n  \"log\",\n  \"round\",\n  \"sin\",\n  \"sqrt\",\n  \"tan\"\n]\n;(function() {\n  for(var i=0; i<math_unary.length; ++i) {\n    var f = math_unary[i]\n    exports[f] = makeOp({\n                    args: [\"array\", \"array\"],\n                    pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                    body: {args:[\"a\",\"b\"], body:\"a=this_f(b)\", thisVars:[\"this_f\"]},\n                    funcName: f\n                  })\n    exports[f+\"eq\"] = makeOp({\n                      args: [\"array\"],\n                      pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                      body: {args: [\"a\"], body:\"a=this_f(a)\", thisVars:[\"this_f\"]},\n                      rvalue: true,\n                      count: 2,\n                      funcName: f+\"eq\"\n                    })\n  }\n})();\n\nvar math_comm = [\n  \"max\",\n  \"min\",\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_comm.length; ++i) {\n    var f= math_comm[i]\n    exports[f] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f\n                })\n    exports[f+\"s\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"s\"\n                  })\n    exports[f+\"eq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"eq\"\n                  })\n    exports[f+\"seq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"seq\"\n                  })\n  }\n})();\n\nvar math_noncomm = [\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_noncomm.length; ++i) {\n    var f= math_noncomm[i]\n    exports[f+\"op\"] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"op\"\n                })\n    exports[f+\"ops\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"ops\"\n                  })\n    exports[f+\"opeq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"opeq\"\n                  })\n    exports[f+\"opseq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"opseq\"\n                  })\n  }\n})();\n\nexports.any = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"if(a){return true}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return false\"},\n  funcName: \"any\"\n})\n\nexports.all = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1}], body: \"if(!x){return false}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"all\"\n})\n\nexports.sum = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s+=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"sum\"\n})\n\nexports.prod = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=1\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s*=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"prod\"\n})\n\nexports.norm2squared = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm2squared\"\n})\n  \nexports.norm2 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return Math.sqrt(this_s)\"},\n  funcName: \"norm2\"\n})\n  \n\nexports.norminf = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:4}], body:\"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norminf\"\n})\n\nexports.norm1 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:3}], body: \"this_s+=a<0?-a:a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm1\"\n})\n\nexports.sup = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=-Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.inf = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.argmin = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})\n\nexports.argmax = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})  \n\nexports.random = makeOp({\n  args: [\"array\"],\n  pre: {args:[], body:\"this_f=Math.random\", thisVars:[\"this_f\"]},\n  body: {args: [\"a\"], body:\"a=this_f()\", thisVars:[\"this_f\"]},\n  funcName: \"random\"\n})\n\nexports.assign = makeOp({\n  args:[\"array\", \"array\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assign\" })\n\nexports.assigns = makeOp({\n  args:[\"array\", \"scalar\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assigns\" })\n\n\nexports.equals = compile({\n  args:[\"array\", \"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1},\n               {name:\"y\", lvalue:false, rvalue:true, count:1}], \n        body: \"if(x!==y){return false}\", \n        localVars: [], \n        thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"equals\"\n})\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}