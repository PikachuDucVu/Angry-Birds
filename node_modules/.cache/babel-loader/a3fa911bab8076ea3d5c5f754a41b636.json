{"ast":null,"code":"import { createGameLoop, createStage, createViewport, InputEvent, PolygonBatch, ShapeRenderer, Texture, Vector2, ViewportInputHandler, BitmapFont, TextureRegion, Animation, PlayMode } from \"gdxts\";\n/*\r\n1. draw bird\r\n2. draw pipe\r\n3. spawn pipe\r\n4. move pipe\r\n5. apply gravity to bird\r\n6. move bird (check inputHandler, apply speedY to bird, rotate bird)\r\n7. check collision (check win condition)\r\n8. try again\r\n*/\n\nexport const init2 = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, 600, 1000);\n  const gl = viewport.getContext();\n  const background1 = await Texture.load(gl, \"./flappy-bird.gif\");\n  const background2 = await Texture.load(gl, \"./flappy-bird2.gif\");\n  const obstacles = await Texture.load(gl, \"./obstacle.webp\");\n  const gameovericon = await Texture.load(gl, \"./gameover.png\");\n  const tapToPlay = await Texture.load(gl, \"./taptoplay.png\");\n  const font = await BitmapFont.load(gl, \"./font.fnt\");\n  const newBird = await Texture.load(gl, \"./newbird.png\");\n  const regions = TextureRegion.splitTexture(newBird, 3, 1);\n  const birdAnimation = new Animation(regions.slice(0, 3), 0.25);\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const inputHandler = new ViewportInputHandler(viewport); //config of bỉd\n\n  let characterPosition = new Vector2(250, 500);\n  let rotationOfBird = 0;\n  let i = 0;\n  let frame = 0; // animation\n\n  let firstClick = false;\n  let falling = true;\n  let runningGame = true; //config obstacle\n\n  let obstaclePosition = [595, 195, 1195, 195];\n  let obstacleSpeed = 400;\n  let heightObstacleUp1 = 300;\n  let heightObstacleDown1 = 270;\n  let heightObstacleUp2 = 350;\n  let heightObstacleDown2 = 220; //config game\n\n  let speedY = 0;\n  let gravityOfBird = 0;\n  let gravityGame = 0;\n  gl.clearColor(0, 0, 0, 1);\n  let layerbg2 = 595;\n  let layerbg1 = 0;\n  inputHandler.addEventListener(InputEvent.TouchStart, (x, y) => {\n    firstClick = true;\n\n    if (firstClick === true && runningGame === true) {\n      speedY = 520;\n      rotationOfBird = 0;\n      gravityOfBird = 0;\n      gravityGame = 300;\n    }\n\n    falling = false;\n  });\n\n  function moveOfBird(delta) {\n    if (!falling) {\n      characterPosition.y = characterPosition.y + speedY * delta;\n\n      if (rotationOfBird <= 0.25) {\n        setTimeout(() => {\n          rotationOfBird += 0.05; // console.log(rotationOfBird);\n        }, 50);\n      }\n\n      if (speedY <= 35) {\n        falling = true;\n      }\n    }\n\n    if (falling === false) {\n      characterPosition.y -= gravityGame * delta;\n\n      if (rotationOfBird >= -1.1) {\n        rotationOfBird -= 0.15 - delta;\n      }\n    }\n  }\n\n  function spawnAndMovePipe(delta) {\n    obstaclePosition[0] -= obstacleSpeed * delta;\n    obstaclePosition[2] -= obstacleSpeed * delta; //bg move\n\n    layerbg1 -= delta * obstacleSpeed;\n    layerbg2 -= delta * obstacleSpeed; // respawn pipe\n\n    if (obstaclePosition[0] < -200) {\n      obstaclePosition[0] = 695;\n\n      if (obstacleSpeed <= 520) {\n        obstacleSpeed *= 1.02;\n      }\n    }\n\n    if (obstaclePosition[2] < -200) {\n      obstaclePosition[2] = 695;\n\n      if (obstacleSpeed <= 500) {\n        obstacleSpeed *= 1.02;\n      }\n    }\n  }\n\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 600, 1000);\n    shapeRenderer.end();\n\n    if (firstClick === true && runningGame === true) {\n      spawnAndMovePipe(delta);\n      moveOfBird(delta);\n    } // draw background\n\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(background2, layerbg2, 0, 600, 1000);\n    batch.draw(background1, layerbg1, 0, 600, 1000);\n\n    if (layerbg1 <= -595) {\n      layerbg1 = 595;\n    }\n\n    if (layerbg2 <= -595) {\n      layerbg2 = 595;\n    } //draw chim\n\n\n    let region = birdAnimation.getKeyFrame(frame, PlayMode.LOOP);\n\n    if (i > 0.2) {\n      i = 0;\n      frame %= 3;\n    }\n\n    region.draw(batch, characterPosition.x, characterPosition.y, // height of chim\n    60, 60, 30, 30, rotationOfBird); //draw obstacle\n\n    batch.draw(obstacles, obstaclePosition[0] - 50, obstaclePosition[1], 150, heightObstacleDown1 // heightDown // default = 270 // max 500 min 150\n    );\n    batch.draw(obstacles, obstaclePosition[0] - 50, obstaclePosition[1] + 610, 150, heightObstacleUp1, // heightUp // default = 300 // max 500 min 150\n    75, 100, 47.13);\n    batch.draw(obstacles, obstaclePosition[2] - 50, obstaclePosition[3], 150, heightObstacleDown2 // heightDown // default = 270 // max 500 min 150\n    );\n    batch.draw(obstacles, obstaclePosition[2] - 50, obstaclePosition[3] + 610, 150, heightObstacleUp2, // heightUp // default = 300 // max 500 min 150\n    75, 100, 47.13);\n    batch.end();\n  });\n};","map":{"version":3,"names":["createGameLoop","createStage","createViewport","InputEvent","PolygonBatch","ShapeRenderer","Texture","Vector2","ViewportInputHandler","BitmapFont","TextureRegion","Animation","PlayMode","init2","stage","canvas","getCanvas","viewport","gl","getContext","background1","load","background2","obstacles","gameovericon","tapToPlay","font","newBird","regions","splitTexture","birdAnimation","slice","shapeRenderer","batch","camera","getCamera","inputHandler","characterPosition","rotationOfBird","i","frame","firstClick","falling","runningGame","obstaclePosition","obstacleSpeed","heightObstacleUp1","heightObstacleDown1","heightObstacleUp2","heightObstacleDown2","speedY","gravityOfBird","gravityGame","clearColor","layerbg2","layerbg1","addEventListener","TouchStart","x","y","moveOfBird","delta","setTimeout","spawnAndMovePipe","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end","draw","region","getKeyFrame","LOOP"],"sources":["D:/projects/test-game/src/index2.ts"],"sourcesContent":["import {\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  InputEvent,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  Vector2,\r\n  ViewportInputHandler,\r\n  BitmapFont,\r\n  TextureRegion,\r\n  Animation,\r\n  PlayMode,\r\n} from \"gdxts\";\r\n\r\n/*\r\n1. draw bird\r\n2. draw pipe\r\n3. spawn pipe\r\n4. move pipe\r\n5. apply gravity to bird\r\n6. move bird (check inputHandler, apply speedY to bird, rotate bird)\r\n7. check collision (check win condition)\r\n8. try again\r\n*/\r\n\r\nexport const init2 = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, 600, 1000);\r\n  const gl = viewport.getContext();\r\n\r\n  const background1 = await Texture.load(gl, \"./flappy-bird.gif\");\r\n  const background2 = await Texture.load(gl, \"./flappy-bird2.gif\");\r\n  const obstacles = await Texture.load(gl, \"./obstacle.webp\");\r\n  const gameovericon = await Texture.load(gl, \"./gameover.png\");\r\n  const tapToPlay = await Texture.load(gl, \"./taptoplay.png\");\r\n  const font = await BitmapFont.load(gl, \"./font.fnt\");\r\n  const newBird = await Texture.load(gl, \"./newbird.png\");\r\n  const regions = TextureRegion.splitTexture(newBird, 3, 1);\r\n  const birdAnimation = new Animation(regions.slice(0, 3), 0.25);\r\n\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const batch = new PolygonBatch(gl);\r\n  const camera = viewport.getCamera();\r\n  const inputHandler = new ViewportInputHandler(viewport);\r\n\r\n  //config of bỉd\r\n  let characterPosition = new Vector2(250, 500);\r\n  let rotationOfBird = 0;\r\n  let i = 0;\r\n  let frame = 0; // animation\r\n\r\n  let firstClick = false;\r\n  let falling = true;\r\n  let runningGame = true;\r\n\r\n  //config obstacle\r\n  let obstaclePosition = [595, 195, 1195, 195];\r\n  let obstacleSpeed = 400;\r\n  let heightObstacleUp1 = 300;\r\n  let heightObstacleDown1 = 270;\r\n  let heightObstacleUp2 = 350;\r\n  let heightObstacleDown2 = 220;\r\n\r\n  //config game\r\n  let speedY = 0;\r\n  let gravityOfBird = 0;\r\n  let gravityGame = 0;\r\n\r\n  gl.clearColor(0, 0, 0, 1);\r\n  let layerbg2 = 595;\r\n  let layerbg1 = 0;\r\n\r\n  inputHandler.addEventListener(InputEvent.TouchStart, (x, y) => {\r\n    firstClick = true;\r\n\r\n    if (firstClick === true && runningGame === true) {\r\n      speedY = 520;\r\n      rotationOfBird = 0;\r\n      gravityOfBird = 0;\r\n      gravityGame = 300;\r\n    }\r\n\r\n    falling = false;\r\n  });\r\n\r\n  function moveOfBird(delta: number) {\r\n    if (!falling) {\r\n      characterPosition.y = characterPosition.y + speedY * delta;\r\n      if (rotationOfBird <= 0.25) {\r\n        setTimeout(() => {\r\n          rotationOfBird += 0.05;\r\n          // console.log(rotationOfBird);\r\n        }, 50);\r\n      }\r\n\r\n      if (speedY <= 35) {\r\n        falling = true;\r\n      }\r\n    }\r\n\r\n    if (falling === false) {\r\n      characterPosition.y -= gravityGame * delta;\r\n      if (rotationOfBird >= -1.1) {\r\n        rotationOfBird -= 0.15 - delta;\r\n      }\r\n    }\r\n  }\r\n\r\n  function spawnAndMovePipe(delta: number) {\r\n    obstaclePosition[0] -= obstacleSpeed * delta;\r\n    obstaclePosition[2] -= obstacleSpeed * delta;\r\n\r\n    //bg move\r\n    layerbg1 -= delta * obstacleSpeed;\r\n    layerbg2 -= delta * obstacleSpeed;\r\n\r\n    // respawn pipe\r\n    if (obstaclePosition[0] < -200) {\r\n      obstaclePosition[0] = 695;\r\n\r\n      if (obstacleSpeed <= 520) {\r\n        obstacleSpeed *= 1.02;\r\n      }\r\n    }\r\n    if (obstaclePosition[2] < -200) {\r\n      obstaclePosition[2] = 695;\r\n\r\n      if (obstacleSpeed <= 500) {\r\n        obstacleSpeed *= 1.02;\r\n      }\r\n    }\r\n  }\r\n\r\n  createGameLoop((delta: number) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    shapeRenderer.setProjection(camera.projectionView.values);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, 600, 1000);\r\n    shapeRenderer.end();\r\n\r\n    if (firstClick === true && runningGame === true) {\r\n      spawnAndMovePipe(delta);\r\n      moveOfBird(delta);\r\n    }\r\n\r\n    // draw background\r\n    batch.setProjection(camera.projectionView.values);\r\n    batch.begin();\r\n    batch.draw(background2, layerbg2, 0, 600, 1000);\r\n    batch.draw(background1, layerbg1, 0, 600, 1000);\r\n    if (layerbg1 <= -595) {\r\n      layerbg1 = 595;\r\n    }\r\n    if (layerbg2 <= -595) {\r\n      layerbg2 = 595;\r\n    }\r\n\r\n    //draw chim\r\n    let region = birdAnimation.getKeyFrame(frame, PlayMode.LOOP);\r\n    if (i > 0.2) {\r\n      i = 0;\r\n      frame %= 3;\r\n    }\r\n    region.draw(\r\n      batch,\r\n      characterPosition.x,\r\n      characterPosition.y, // height of chim\r\n      60,\r\n      60,\r\n      30,\r\n      30,\r\n      rotationOfBird\r\n    );\r\n\r\n    //draw obstacle\r\n    batch.draw(\r\n      obstacles,\r\n      obstaclePosition[0] - 50,\r\n      obstaclePosition[1],\r\n      150,\r\n      heightObstacleDown1 // heightDown // default = 270 // max 500 min 150\r\n    );\r\n    batch.draw(\r\n      obstacles,\r\n      obstaclePosition[0] - 50,\r\n      obstaclePosition[1] + 610,\r\n      150,\r\n      heightObstacleUp1, // heightUp // default = 300 // max 500 min 150\r\n      75,\r\n      100,\r\n      47.13\r\n    );\r\n    batch.draw(\r\n      obstacles,\r\n      obstaclePosition[2] - 50,\r\n      obstaclePosition[3],\r\n      150,\r\n      heightObstacleDown2 // heightDown // default = 270 // max 500 min 150\r\n    );\r\n    batch.draw(\r\n      obstacles,\r\n      obstaclePosition[2] - 50,\r\n      obstaclePosition[3] + 610,\r\n      150,\r\n      heightObstacleUp2, // heightUp // default = 300 // max 500 min 150\r\n      75,\r\n      100,\r\n      47.13\r\n    );\r\n    batch.end();\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}