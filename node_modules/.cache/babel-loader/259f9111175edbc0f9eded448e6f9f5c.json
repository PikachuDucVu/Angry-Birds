{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextureRegion = void 0;\n\nvar TextureRegion = /*#__PURE__*/function () {\n  function TextureRegion(tex, x, y, width, height, extraData, invTexWidth, invTexHeight) {\n    var rotate = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n\n    _classCallCheck(this, TextureRegion);\n\n    this.name = null;\n    this.index = 0;\n    this.texture = null;\n    this.regionX = 0;\n    this.regionY = 0;\n    this.width = 0;\n    this.height = 0;\n    this.invTexWidth = 0;\n    this.invTexHeight = 0;\n    this.originalWidth = 0;\n    this.originalHeight = 0;\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.u = 0;\n    this.v = 0;\n    this.u2 = 0;\n    this.v2 = 0;\n    this.rotated = false;\n\n    if (!invTexWidth || !invTexHeight) {\n      invTexWidth = 1 / tex.width;\n      invTexHeight = 1 / tex.height;\n    }\n\n    var u = x * invTexWidth;\n    var v = (y + height) * invTexHeight;\n    var u2 = (x + width) * invTexWidth;\n    var v2 = y * invTexHeight;\n    this.texture = tex;\n    this.regionX = x;\n    this.regionY = y;\n    this.width = width;\n    this.height = height;\n    this.originalWidth = width;\n    this.originalHeight = height;\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.u = u;\n    this.v = v;\n    this.u2 = u2;\n    this.v2 = v2;\n    this.rotated = rotate;\n\n    for (var key in extraData) {\n      this[key] = extraData[key];\n    }\n  }\n\n  _createClass(TextureRegion, [{\n    key: \"draw\",\n    value: function draw(batch, x, y, width, height) {\n      var originX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var originY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var rotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var scaleX = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n      var scaleY = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n      var originalWidth = this.originalWidth,\n          originalHeight = this.originalHeight,\n          offsetX = this.offsetX,\n          offsetY = this.offsetY,\n          regionWidth = this.width,\n          regionHeight = this.height;\n      var xRatio = width / originalWidth;\n      var yRatio = height / originalHeight;\n      var drawWidth = regionWidth * xRatio;\n      var drawHeight = regionHeight * yRatio;\n      var drawX = x + offsetX * xRatio;\n      var drawY = 0;\n\n      if (batch.yDown) {\n        drawY = y + height - offsetY * yRatio - drawHeight;\n      } else {\n        drawY = y + offsetY * yRatio;\n      }\n\n      originX = originX - (drawX - x);\n      originY = originY - (drawY - y);\n      batch.draw(this.texture, drawX, drawY, drawWidth, drawHeight, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2, this.rotated);\n    }\n  }], [{\n    key: \"splitTexture\",\n    value: function splitTexture(texture, cols, rows) {\n      var width = texture.width,\n          height = texture.height;\n      var regionWidth = width / cols;\n      var regionHeight = height / rows;\n      var regions = [];\n\n      for (var y = 0; y < rows; y++) {\n        for (var x = 0; x < cols; x++) {\n          regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\n        }\n      }\n\n      return regions;\n    }\n  }]);\n\n  return TextureRegion;\n}();\n\nexports.TextureRegion = TextureRegion;","map":{"version":3,"names":["Object","defineProperty","exports","value","TextureRegion","tex","x","y","width","height","extraData","invTexWidth","invTexHeight","rotate","name","index","texture","regionX","regionY","originalWidth","originalHeight","offsetX","offsetY","u","v","u2","v2","rotated","key","batch","originX","originY","rotation","scaleX","scaleY","regionWidth","regionHeight","xRatio","yRatio","drawWidth","drawHeight","drawX","drawY","yDown","draw","cols","rows","regions","push"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/TextureRegion.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextureRegion = void 0;\r\nclass TextureRegion {\r\n    constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight, rotate = false) {\r\n        this.name = null;\r\n        this.index = 0;\r\n        this.texture = null;\r\n        this.regionX = 0;\r\n        this.regionY = 0;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.invTexWidth = 0;\r\n        this.invTexHeight = 0;\r\n        this.originalWidth = 0;\r\n        this.originalHeight = 0;\r\n        this.offsetX = 0;\r\n        this.offsetY = 0;\r\n        this.u = 0;\r\n        this.v = 0;\r\n        this.u2 = 0;\r\n        this.v2 = 0;\r\n        this.rotated = false;\r\n        if (!invTexWidth || !invTexHeight) {\r\n            invTexWidth = 1 / tex.width;\r\n            invTexHeight = 1 / tex.height;\r\n        }\r\n        const u = x * invTexWidth;\r\n        const v = (y + height) * invTexHeight;\r\n        const u2 = (x + width) * invTexWidth;\r\n        const v2 = y * invTexHeight;\r\n        this.texture = tex;\r\n        this.regionX = x;\r\n        this.regionY = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.originalWidth = width;\r\n        this.originalHeight = height;\r\n        this.offsetX = 0;\r\n        this.offsetY = 0;\r\n        this.u = u;\r\n        this.v = v;\r\n        this.u2 = u2;\r\n        this.v2 = v2;\r\n        this.rotated = rotate;\r\n        for (let key in extraData) {\r\n            this[key] = extraData[key];\r\n        }\r\n    }\r\n    static splitTexture(texture, cols, rows) {\r\n        const { width, height } = texture;\r\n        const regionWidth = width / cols;\r\n        const regionHeight = height / rows;\r\n        const regions = [];\r\n        for (let y = 0; y < rows; y++) {\r\n            for (let x = 0; x < cols; x++) {\r\n                regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\r\n            }\r\n        }\r\n        return regions;\r\n    }\r\n    draw(batch, x, y, width, height, originX = 0, originY = 0, rotation = 0, scaleX = 1, scaleY = 1) {\r\n        const { originalWidth, originalHeight, offsetX, offsetY, width: regionWidth, height: regionHeight } = this;\r\n        const xRatio = width / originalWidth;\r\n        const yRatio = height / originalHeight;\r\n        const drawWidth = regionWidth * xRatio;\r\n        const drawHeight = regionHeight * yRatio;\r\n        const drawX = x + offsetX * xRatio;\r\n        let drawY = 0;\r\n        if (batch.yDown) {\r\n            drawY = y + height - offsetY * yRatio - drawHeight;\r\n        }\r\n        else {\r\n            drawY = y + offsetY * yRatio;\r\n        }\r\n        originX = originX - (drawX - x);\r\n        originY = originY - (drawY - y);\r\n        batch.draw(this.texture, drawX, drawY, drawWidth, drawHeight, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2, this.rotated);\r\n    }\r\n}\r\nexports.TextureRegion = TextureRegion;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}