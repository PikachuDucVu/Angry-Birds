{"ast":null,"code":"import { createGameLoop, createStage, createViewport, PolygonBatch, ShapeRenderer, Texture, Color } from \"gdxts\";\nconst ROWS = 24;\nconst COLS = 12;\nconst GAME_WIDTH = 1500;\nconst GAME_HEIGHT = 2000;\nexport const init3 = async () => {\n  const stage = createStage();\n  const canvas = stage.getCanvas();\n  const viewport = createViewport(canvas, GAME_WIDTH, GAME_HEIGHT);\n  const gl = viewport.getContext();\n  const shapeRenderer = new ShapeRenderer(gl);\n  const batch = new PolygonBatch(gl);\n  const camera = viewport.getCamera();\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\n  const block = await Texture.load(gl, \"./borderBlock.png\");\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\n  const black = new Color(0, 0, 0, 1);\n  let map = [];\n  let delayTime = 0; //tetrominoes\n  //I\n\n  const iBlock = [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]]; //L\n\n  const lBlock = [[0, 0, 1], [1, 1, 1], [0, 0, 0]]; //L-reverse\n\n  const lReverseBlock = [[1, 0, 0], [1, 1, 1], [0, 0, 0]]; // Square\n\n  const sBlock = [[1, 1], [1, 1]]; // Z\n\n  const zBlock = [[0, 1, 1], [1, 1, 0], [0, 0, 0]]; // Z-reverse\n\n  const zReverseBlock = [[1, 1, 0], [0, 1, 1], [0, 0, 0]]; // T\n\n  const tBlock = [[0, 1, 0], [1, 1, 1], [0, 0, 0]];\n  const blocks = [iBlock, lReverseBlock, lBlock, sBlock, zBlock, zReverseBlock, tBlock];\n  let currentBlock = blocks[0];\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  function mapGame() {\n    for (let row = 0; row < ROWS; row++) {\n      map[row] = [];\n\n      for (let col = 0; col < COLS; col++) {\n        if (row >= 1) {\n          map[row].push(0);\n        } else {\n          map[row].push(1);\n        }\n      }\n\n      for (let col = 0; col < map[row].length; col++) {\n        map[row][0] = 1;\n        map[row][11] = 1;\n      }\n    }\n  }\n\n  mapGame();\n  createGameLoop(delta => {\n    delayTime += delta;\n\n    if (delayTime >= 0.5) {\n      delayTime = 0;\n    }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    shapeRenderer.setProjection(camera.projectionView.values);\n    shapeRenderer.begin();\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\n    shapeRenderer.end(); //draw border\n\n    batch.setProjection(camera.projectionView.values);\n    batch.begin();\n    batch.draw(bgRight, 1000, 0, 500, 2000);\n    batch.end();\n  });\n};","map":{"version":3,"names":["createGameLoop","createStage","createViewport","PolygonBatch","ShapeRenderer","Texture","Color","ROWS","COLS","GAME_WIDTH","GAME_HEIGHT","init3","stage","canvas","getCanvas","viewport","gl","getContext","shapeRenderer","batch","camera","getCamera","bgRight","load","block","mainBlock","black","map","delayTime","iBlock","lBlock","lReverseBlock","sBlock","zBlock","zReverseBlock","tBlock","blocks","currentBlock","getRandomInt","min","max","Math","floor","random","mapGame","row","col","push","length","delta","clear","COLOR_BUFFER_BIT","setProjection","projectionView","values","begin","rect","end","draw"],"sources":["D:/projects/test-game/src/index3.ts"],"sourcesContent":["import {\r\n  createGameLoop,\r\n  createStage,\r\n  createViewport,\r\n  PolygonBatch,\r\n  ShapeRenderer,\r\n  Texture,\r\n  Vector2,\r\n  BitmapFont,\r\n  TextureRegion,\r\n  Color,\r\n} from \"gdxts\";\r\n\r\nconst ROWS = 24;\r\nconst COLS = 12;\r\nconst GAME_WIDTH = 1500;\r\nconst GAME_HEIGHT = 2000;\r\n\r\nexport const init3 = async () => {\r\n  const stage = createStage();\r\n  const canvas = stage.getCanvas();\r\n  const viewport = createViewport(canvas, GAME_WIDTH, GAME_HEIGHT);\r\n  const gl = viewport.getContext();\r\n  const shapeRenderer = new ShapeRenderer(gl);\r\n  const batch = new PolygonBatch(gl);\r\n  const camera = viewport.getCamera();\r\n\r\n  const bgRight = await Texture.load(gl, \"./bg1.png\");\r\n  const block = await Texture.load(gl, \"./borderBlock.png\");\r\n  const mainBlock = await Texture.load(gl, \"./GreenBlock.png\");\r\n  const black = new Color(0, 0, 0, 1);\r\n\r\n  let map: any[] = [];\r\n  let delayTime = 0;\r\n\r\n  //tetrominoes\r\n  //I\r\n  const iBlock = [\r\n    [0, 0, 0, 0],\r\n    [1, 1, 1, 1],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n  ];\r\n\r\n  //L\r\n  const lBlock = [\r\n    [0, 0, 1],\r\n    [1, 1, 1],\r\n    [0, 0, 0],\r\n  ];\r\n\r\n  //L-reverse\r\n  const lReverseBlock = [\r\n    [1, 0, 0],\r\n    [1, 1, 1],\r\n    [0, 0, 0],\r\n  ];\r\n\r\n  // Square\r\n  const sBlock = [\r\n    [1, 1],\r\n    [1, 1],\r\n  ];\r\n\r\n  // Z\r\n  const zBlock = [\r\n    [0, 1, 1],\r\n    [1, 1, 0],\r\n    [0, 0, 0],\r\n  ];\r\n\r\n  // Z-reverse\r\n  const zReverseBlock = [\r\n    [1, 1, 0],\r\n    [0, 1, 1],\r\n    [0, 0, 0],\r\n  ];\r\n\r\n  // T\r\n  const tBlock = [\r\n    [0, 1, 0],\r\n    [1, 1, 1],\r\n    [0, 0, 0],\r\n  ];\r\n\r\n  const blocks = [\r\n    iBlock,\r\n    lReverseBlock,\r\n    lBlock,\r\n    sBlock,\r\n    zBlock,\r\n    zReverseBlock,\r\n    tBlock,\r\n  ];\r\n\r\n  let currentBlock = blocks[0];\r\n\r\n  function getRandomInt(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  function mapGame() {\r\n    for (let row = 0; row < ROWS; row++) {\r\n      map[row] = [];\r\n      for (let col = 0; col < COLS; col++) {\r\n        if (row >= 1) {\r\n          map[row].push(0);\r\n        } else {\r\n          map[row].push(1);\r\n        }\r\n      }\r\n      for (let col = 0; col < map[row].length; col++) {\r\n        map[row][0] = 1;\r\n        map[row][11] = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  mapGame();\r\n\r\n  createGameLoop((delta: number) => {\r\n    delayTime += delta;\r\n    if (delayTime >= 0.5) {\r\n      delayTime = 0;\r\n    }\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    shapeRenderer.setProjection(camera.projectionView.values);\r\n    shapeRenderer.begin();\r\n    shapeRenderer.rect(true, 0, 0, 1000, 2000, black);\r\n    shapeRenderer.end();\r\n\r\n    //draw border\r\n    batch.setProjection(camera.projectionView.values);\r\n    batch.begin();\r\n\r\n    batch.draw(bgRight, 1000, 0, 500, 2000);\r\n    batch.end();\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}