{"ast":null,"code":"export default class TextureRegion {\n  static splitTexture(texture, cols, rows) {\n    const {\n      width,\n      height\n    } = texture;\n    const regionWidth = width / cols;\n    const regionHeight = height / rows;\n    const regions = [];\n\n    for (let x = 0; x < cols; x++) {\n      for (let y = 0; y < rows; y++) {\n        regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\n      }\n    }\n\n    return regions;\n  }\n\n  constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight, rotate) {\n    if (!invTexWidth || !invTexHeight) {\n      invTexWidth = 1 / tex.width;\n      invTexHeight = 1 / tex.height;\n    }\n\n    const u = x * invTexWidth;\n    const v = y * invTexHeight;\n    const u2 = (x + width) * invTexWidth;\n    const v2 = (y + height) * invTexHeight;\n    this.texture = tex;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.originalWidth = width;\n    this.originalHeight = height;\n    this.offsetX = 0;\n    this.offsetY = 0;\n\n    if (rotate) {\n      this.u = u2;\n      this.v = v;\n      this.u2 = u;\n      this.v2 = v2;\n    } else {\n      this.u = u;\n      this.v = v;\n      this.u2 = u2;\n      this.v2 = v2;\n    }\n\n    for (let key in extraData) {\n      this[key] = extraData[key];\n    }\n  }\n\n  draw(batch, x, y, width, height) {\n    let originX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let originY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let rotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    let scaleX = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n    let scaleY = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n    const originalWidth = this.originalWidth;\n    const offsetX = this.offsetX;\n    const offsetY = this.offsetY;\n    const ratio = width / originalWidth;\n    const drawWidth = this.width * ratio;\n    const drawHeight = this.height * ratio;\n    const drawX = x + offsetX * ratio;\n    const drawY = y + height - offsetY * ratio - drawHeight;\n    originX = originX - (drawX - x);\n    originY = originY - (drawY - y);\n    batch.draw(this.texture, drawX, drawY, drawWidth, drawHeight, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2);\n  }\n\n}","map":{"version":3,"names":["TextureRegion","splitTexture","texture","cols","rows","width","height","regionWidth","regionHeight","regions","x","y","push","constructor","tex","extraData","invTexWidth","invTexHeight","rotate","u","v","u2","v2","originalWidth","originalHeight","offsetX","offsetY","key","draw","batch","originX","originY","rotation","scaleX","scaleY","ratio","drawWidth","drawHeight","drawX","drawY"],"sources":["D:/projects/test-game/node_modules/gdxjs/lib/TextureRegion.js"],"sourcesContent":["export default class TextureRegion {\n  static splitTexture(texture, cols, rows) {\n    const {\n      width,\n      height\n    } = texture;\n    const regionWidth = width / cols;\n    const regionHeight = height / rows;\n    const regions = [];\n\n    for (let x = 0; x < cols; x++) {\n      for (let y = 0; y < rows; y++) {\n        regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));\n      }\n    }\n\n    return regions;\n  }\n\n  constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight, rotate) {\n    if (!invTexWidth || !invTexHeight) {\n      invTexWidth = 1 / tex.width;\n      invTexHeight = 1 / tex.height;\n    }\n\n    const u = x * invTexWidth;\n    const v = y * invTexHeight;\n    const u2 = (x + width) * invTexWidth;\n    const v2 = (y + height) * invTexHeight;\n    this.texture = tex;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.originalWidth = width;\n    this.originalHeight = height;\n    this.offsetX = 0;\n    this.offsetY = 0;\n\n    if (rotate) {\n      this.u = u2;\n      this.v = v;\n      this.u2 = u;\n      this.v2 = v2;\n    } else {\n      this.u = u;\n      this.v = v;\n      this.u2 = u2;\n      this.v2 = v2;\n    }\n\n    for (let key in extraData) {\n      this[key] = extraData[key];\n    }\n  }\n\n  draw(batch, x, y, width, height, originX = 0, originY = 0, rotation = 0, scaleX = 1, scaleY = 1) {\n    const originalWidth = this.originalWidth;\n    const offsetX = this.offsetX;\n    const offsetY = this.offsetY;\n    const ratio = width / originalWidth;\n    const drawWidth = this.width * ratio;\n    const drawHeight = this.height * ratio;\n    const drawX = x + offsetX * ratio;\n    const drawY = y + height - offsetY * ratio - drawHeight;\n    originX = originX - (drawX - x);\n    originY = originY - (drawY - y);\n    batch.draw(this.texture, drawX, drawY, drawWidth, drawHeight, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}