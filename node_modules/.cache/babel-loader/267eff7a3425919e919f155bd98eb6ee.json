{"ast":null,"code":"\"use strict\";\n\nvar uniq = require(\"uniq\"); // This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)\n// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of \"pointers\" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.\n\n\nfunction innerFill(order, proc, body) {\n  var dimension = order.length,\n      nargs = proc.arrayArgs.length,\n      has_index = proc.indexArgs.length > 0,\n      code = [],\n      vars = [],\n      idx = 0,\n      pidx = 0,\n      i,\n      j;\n\n  for (i = 0; i < dimension; ++i) {\n    // Iteration variables\n    vars.push([\"i\", i, \"=0\"].join(\"\"));\n  } //Compute scan deltas\n\n\n  for (j = 0; j < nargs; ++j) {\n    for (i = 0; i < dimension; ++i) {\n      pidx = idx;\n      idx = order[i];\n\n      if (i === 0) {\n        // The innermost/fastest dimension's delta is simply its stride\n        vars.push([\"d\", j, \"s\", i, \"=t\", j, \"p\", idx].join(\"\"));\n      } else {\n        // For other dimensions the delta is basically the stride minus something which essentially \"rewinds\" the previous (more inner) dimension\n        vars.push([\"d\", j, \"s\", i, \"=(t\", j, \"p\", idx, \"-s\", pidx, \"*t\", j, \"p\", pidx, \")\"].join(\"\"));\n      }\n    }\n  }\n\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"));\n  } //Scan loop\n\n\n  for (i = dimension - 1; i >= 0; --i) {\n    // Start at largest stride and work your way inwards\n    idx = order[i];\n    code.push([\"for(i\", i, \"=0;i\", i, \"<s\", idx, \";++i\", i, \"){\"].join(\"\"));\n  } //Push body of inner loop\n\n\n  code.push(body); //Advance scan pointers\n\n  for (i = 0; i < dimension; ++i) {\n    pidx = idx;\n    idx = order[i];\n\n    for (j = 0; j < nargs; ++j) {\n      code.push([\"p\", j, \"+=d\", j, \"s\", i].join(\"\"));\n    }\n\n    if (has_index) {\n      if (i > 0) {\n        code.push([\"index[\", pidx, \"]-=s\", pidx].join(\"\"));\n      }\n\n      code.push([\"++index[\", idx, \"]\"].join(\"\"));\n    }\n\n    code.push(\"}\");\n  }\n\n  return code.join(\"\\n\");\n} // Generate \"outer\" loops that loop over blocks of data, applying \"inner\" loops to the blocks by manipulating the local variables in such a way that the inner loop only \"sees\" the current block.\n// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.\n//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and \"shape\" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.\n\n\nfunction outerFill(matched, order, proc, body) {\n  var dimension = order.length,\n      nargs = proc.arrayArgs.length,\n      blockSize = proc.blockSize,\n      has_index = proc.indexArgs.length > 0,\n      code = [];\n\n  for (var i = 0; i < nargs; ++i) {\n    code.push([\"var offset\", i, \"=p\", i].join(\"\"));\n  } //Generate loops for unmatched dimensions\n  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)\n  // TODO: It would be nice if the order in which these loops are placed would also be somehow \"optimal\" (at the very least we should check that it really doesn't hurt us if they're not).\n\n\n  for (var i = matched; i < dimension; ++i) {\n    code.push([\"for(var j\" + i + \"=SS[\", order[i], \"]|0;j\", i, \">0;){\"].join(\"\")); // Iterate back to front\n\n    code.push([\"if(j\", i, \"<\", blockSize, \"){\"].join(\"\")); // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).\n\n    code.push([\"s\", order[i], \"=j\", i].join(\"\"));\n    code.push([\"j\", i, \"=0\"].join(\"\"));\n    code.push([\"}else{s\", order[i], \"=\", blockSize].join(\"\"));\n    code.push([\"j\", i, \"-=\", blockSize, \"}\"].join(\"\"));\n\n    if (has_index) {\n      code.push([\"index[\", order[i], \"]=j\", i].join(\"\"));\n    }\n  }\n\n  for (var i = 0; i < nargs; ++i) {\n    var indexStr = [\"offset\" + i];\n\n    for (var j = matched; j < dimension; ++j) {\n      indexStr.push([\"j\", j, \"*t\", i, \"p\", order[j]].join(\"\"));\n    }\n\n    code.push([\"p\", i, \"=(\", indexStr.join(\"+\"), \")\"].join(\"\"));\n  }\n\n  code.push(innerFill(order, proc, body));\n\n  for (var i = matched; i < dimension; ++i) {\n    code.push(\"}\");\n  }\n\n  return code.join(\"\\n\");\n} //Count the number of compatible inner orders\n// This is the length of the longest common prefix of the arrays in orders.\n// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.\n// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.\n\n\nfunction countMatches(orders) {\n  var matched = 0,\n      dimension = orders[0].length;\n\n  while (matched < dimension) {\n    for (var j = 1; j < orders.length; ++j) {\n      if (orders[j][matched] !== orders[0][matched]) {\n        return matched;\n      }\n    }\n\n    ++matched;\n  }\n\n  return matched;\n} //Processes a block according to the given data types\n// Replaces variable names by different ones, either \"local\" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.\n\n\nfunction processBlock(block, proc, dtypes) {\n  var code = block.body;\n  var pre = [];\n  var post = [];\n\n  for (var i = 0; i < block.args.length; ++i) {\n    var carg = block.args[i];\n\n    if (carg.count <= 0) {\n      continue;\n    }\n\n    var re = new RegExp(carg.name, \"g\");\n    var ptrStr = \"\";\n    var arrNum = proc.arrayArgs.indexOf(i);\n\n    switch (proc.argTypes[i]) {\n      case \"offset\":\n        var offArgIndex = proc.offsetArgIndex.indexOf(i);\n        var offArg = proc.offsetArgs[offArgIndex];\n        arrNum = offArg.array;\n        ptrStr = \"+q\" + offArgIndex;\n      // Adds offset to the \"pointer\" in the array\n\n      case \"array\":\n        ptrStr = \"p\" + arrNum + ptrStr;\n        var localStr = \"l\" + i;\n        var arrStr = \"a\" + arrNum;\n\n        if (proc.arrayBlockIndices[arrNum] === 0) {\n          // Argument to body is just a single value from this array\n          if (carg.count === 1) {\n            // Argument/array used only once(?)\n            if (dtypes[arrNum] === \"generic\") {\n              if (carg.lvalue) {\n                pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")); // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n\n                code = code.replace(re, localStr);\n                post.push([arrStr, \".set(\", ptrStr, \",\", localStr, \")\"].join(\"\"));\n              } else {\n                code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"));\n              }\n            } else {\n              code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"));\n            }\n          } else if (dtypes[arrNum] === \"generic\") {\n            pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")); // TODO: Could we optimize by checking for carg.rvalue?\n\n            code = code.replace(re, localStr);\n\n            if (carg.lvalue) {\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr, \")\"].join(\"\"));\n            }\n          } else {\n            pre.push([\"var \", localStr, \"=\", arrStr, \"[\", ptrStr, \"]\"].join(\"\")); // TODO: Could we optimize by checking for carg.rvalue?\n\n            code = code.replace(re, localStr);\n\n            if (carg.lvalue) {\n              post.push([arrStr, \"[\", ptrStr, \"]=\", localStr].join(\"\"));\n            }\n          }\n        } else {\n          // Argument to body is a \"block\"\n          var reStrArr = [carg.name],\n              ptrStrArr = [ptrStr];\n\n          for (var j = 0; j < Math.abs(proc.arrayBlockIndices[arrNum]); j++) {\n            reStrArr.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\");\n            ptrStrArr.push(\"$\" + (j + 1) + \"*t\" + arrNum + \"b\" + j); // Matched index times stride\n          }\n\n          re = new RegExp(reStrArr.join(\"\"), \"g\");\n          ptrStr = ptrStrArr.join(\"+\");\n\n          if (dtypes[arrNum] === \"generic\") {\n            /*if(carg.lvalue) {\n              pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n              code = code.replace(re, localStr)\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            } else {\n              code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n            }*/\n            throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\");\n          } else {\n            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.\n            code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"));\n          }\n        }\n\n        break;\n\n      case \"scalar\":\n        code = code.replace(re, \"Y\" + proc.scalarArgs.indexOf(i));\n        break;\n\n      case \"index\":\n        code = code.replace(re, \"index\");\n        break;\n\n      case \"shape\":\n        code = code.replace(re, \"shape\");\n        break;\n    }\n  }\n\n  return [pre.join(\"\\n\"), code, post.join(\"\\n\")].join(\"\\n\").trim();\n}\n\nfunction typeSummary(dtypes) {\n  var summary = new Array(dtypes.length);\n  var allEqual = true;\n\n  for (var i = 0; i < dtypes.length; ++i) {\n    var t = dtypes[i];\n    var digits = t.match(/\\d+/);\n\n    if (!digits) {\n      digits = \"\";\n    } else {\n      digits = digits[0];\n    }\n\n    if (t.charAt(0) === 0) {\n      summary[i] = \"u\" + t.charAt(1) + digits;\n    } else {\n      summary[i] = t.charAt(0) + digits;\n    }\n\n    if (i > 0) {\n      allEqual = allEqual && summary[i] === summary[i - 1];\n    }\n  }\n\n  if (allEqual) {\n    return summary[0];\n  }\n\n  return summary.join(\"\");\n} //Generates a cwise operator\n\n\nfunction generateCWiseOp(proc, typesig) {\n  //Compute dimension\n  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.\n  var dimension = typesig[1].length - Math.abs(proc.arrayBlockIndices[0]) | 0;\n  var orders = new Array(proc.arrayArgs.length);\n  var dtypes = new Array(proc.arrayArgs.length);\n\n  for (var i = 0; i < proc.arrayArgs.length; ++i) {\n    dtypes[i] = typesig[2 * i];\n    orders[i] = typesig[2 * i + 1];\n  } //Determine where block and loop indices start and end\n\n\n  var blockBegin = [],\n      blockEnd = []; // These indices are exposed as blocks\n\n  var loopBegin = [],\n      loopEnd = []; // These indices are iterated over\n\n  var loopOrders = []; // orders restricted to the loop indices\n\n  for (var i = 0; i < proc.arrayArgs.length; ++i) {\n    if (proc.arrayBlockIndices[i] < 0) {\n      loopBegin.push(0);\n      loopEnd.push(dimension);\n      blockBegin.push(dimension);\n      blockEnd.push(dimension + proc.arrayBlockIndices[i]);\n    } else {\n      loopBegin.push(proc.arrayBlockIndices[i]); // Non-negative\n\n      loopEnd.push(proc.arrayBlockIndices[i] + dimension);\n      blockBegin.push(0);\n      blockEnd.push(proc.arrayBlockIndices[i]);\n    }\n\n    var newOrder = [];\n\n    for (var j = 0; j < orders[i].length; j++) {\n      if (loopBegin[i] <= orders[i][j] && orders[i][j] < loopEnd[i]) {\n        newOrder.push(orders[i][j] - loopBegin[i]); // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.\n      }\n    }\n\n    loopOrders.push(newOrder);\n  } //First create arguments for procedure\n\n\n  var arglist = [\"SS\"]; // SS is the overall shape over which we iterate\n\n  var code = [\"'use strict'\"];\n  var vars = [];\n\n  for (var j = 0; j < dimension; ++j) {\n    vars.push([\"s\", j, \"=SS[\", j, \"]\"].join(\"\")); // The limits for each dimension.\n  }\n\n  for (var i = 0; i < proc.arrayArgs.length; ++i) {\n    arglist.push(\"a\" + i); // Actual data array\n\n    arglist.push(\"t\" + i); // Strides\n\n    arglist.push(\"p\" + i); // Offset in the array at which the data starts (also used for iterating over the data)\n\n    for (var j = 0; j < dimension; ++j) {\n      // Unpack the strides into vars for looping\n      vars.push([\"t\", i, \"p\", j, \"=t\", i, \"[\", loopBegin[i] + j, \"]\"].join(\"\"));\n    }\n\n    for (var j = 0; j < Math.abs(proc.arrayBlockIndices[i]); ++j) {\n      // Unpack the strides into vars for block iteration\n      vars.push([\"t\", i, \"b\", j, \"=t\", i, \"[\", blockBegin[i] + j, \"]\"].join(\"\"));\n    }\n  }\n\n  for (var i = 0; i < proc.scalarArgs.length; ++i) {\n    arglist.push(\"Y\" + i);\n  }\n\n  if (proc.shapeArgs.length > 0) {\n    vars.push(\"shape=SS.slice(0)\"); // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)\n  }\n\n  if (proc.indexArgs.length > 0) {\n    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.\n    var zeros = new Array(dimension);\n\n    for (var i = 0; i < dimension; ++i) {\n      zeros[i] = \"0\";\n    }\n\n    vars.push([\"index=[\", zeros.join(\",\"), \"]\"].join(\"\"));\n  }\n\n  for (var i = 0; i < proc.offsetArgs.length; ++i) {\n    // Offset arguments used for stencil operations\n    var off_arg = proc.offsetArgs[i];\n    var init_string = [];\n\n    for (var j = 0; j < off_arg.offset.length; ++j) {\n      if (off_arg.offset[j] === 0) {\n        continue;\n      } else if (off_arg.offset[j] === 1) {\n        init_string.push([\"t\", off_arg.array, \"p\", j].join(\"\"));\n      } else {\n        init_string.push([off_arg.offset[j], \"*t\", off_arg.array, \"p\", j].join(\"\"));\n      }\n    }\n\n    if (init_string.length === 0) {\n      vars.push(\"q\" + i + \"=0\");\n    } else {\n      vars.push([\"q\", i, \"=\", init_string.join(\"+\")].join(\"\"));\n    }\n  } //Prepare this variables\n\n\n  var thisVars = uniq([].concat(proc.pre.thisVars).concat(proc.body.thisVars).concat(proc.post.thisVars));\n  vars = vars.concat(thisVars);\n\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"));\n  }\n\n  for (var i = 0; i < proc.arrayArgs.length; ++i) {\n    code.push(\"p\" + i + \"|=0\");\n  } //Inline prelude\n\n\n  if (proc.pre.body.length > 3) {\n    code.push(processBlock(proc.pre, proc, dtypes));\n  } //Process body\n\n\n  var body = processBlock(proc.body, proc, dtypes);\n  var matched = countMatches(loopOrders);\n\n  if (matched < dimension) {\n    code.push(outerFill(matched, loopOrders[0], proc, body)); // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.\n  } else {\n    code.push(innerFill(loopOrders[0], proc, body));\n  } //Inline epilog\n\n\n  if (proc.post.body.length > 3) {\n    code.push(processBlock(proc.post, proc, dtypes));\n  }\n\n  if (proc.debug) {\n    console.log(\"-----Generated cwise routine for \", typesig, \":\\n\" + code.join(\"\\n\") + \"\\n----------\");\n  }\n\n  var loopName = [proc.funcName || \"unnamed\", \"_cwise_loop_\", orders[0].join(\"s\"), \"m\", matched, typeSummary(dtypes)].join(\"\");\n  var f = new Function([\"function \", loopName, \"(\", arglist.join(\",\"), \"){\", code.join(\"\\n\"), \"} return \", loopName].join(\"\"));\n  return f();\n}\n\nmodule.exports = generateCWiseOp;","map":{"version":3,"names":["uniq","require","innerFill","order","proc","body","dimension","length","nargs","arrayArgs","has_index","indexArgs","code","vars","idx","pidx","i","j","push","join","outerFill","matched","blockSize","indexStr","countMatches","orders","processBlock","block","dtypes","pre","post","args","carg","count","re","RegExp","name","ptrStr","arrNum","indexOf","argTypes","offArgIndex","offsetArgIndex","offArg","offsetArgs","array","localStr","arrStr","arrayBlockIndices","lvalue","replace","reStrArr","ptrStrArr","Math","abs","Error","scalarArgs","trim","typeSummary","summary","Array","allEqual","t","digits","match","charAt","generateCWiseOp","typesig","blockBegin","blockEnd","loopBegin","loopEnd","loopOrders","newOrder","arglist","shapeArgs","zeros","off_arg","init_string","offset","thisVars","concat","debug","console","log","loopName","funcName","f","Function","module","exports"],"sources":["D:/projects/test-game/node_modules/cwise-compiler/lib/compile.js"],"sourcesContent":["\"use strict\"\n\nvar uniq = require(\"uniq\")\n\n// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)\n// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of \"pointers\" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.\nfunction innerFill(order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , has_index = proc.indexArgs.length>0\n    , code = []\n    , vars = []\n    , idx=0, pidx=0, i, j\n  for(i=0; i<dimension; ++i) { // Iteration variables\n    vars.push([\"i\",i,\"=0\"].join(\"\"))\n  }\n  //Compute scan deltas\n  for(j=0; j<nargs; ++j) {\n    for(i=0; i<dimension; ++i) {\n      pidx = idx\n      idx = order[i]\n      if(i === 0) { // The innermost/fastest dimension's delta is simply its stride\n        vars.push([\"d\",j,\"s\",i,\"=t\",j,\"p\",idx].join(\"\"))\n      } else { // For other dimensions the delta is basically the stride minus something which essentially \"rewinds\" the previous (more inner) dimension\n        vars.push([\"d\",j,\"s\",i,\"=(t\",j,\"p\",idx,\"-s\",pidx,\"*t\",j,\"p\",pidx,\")\"].join(\"\"))\n      }\n    }\n  }\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }  \n  //Scan loop\n  for(i=dimension-1; i>=0; --i) { // Start at largest stride and work your way inwards\n    idx = order[i]\n    code.push([\"for(i\",i,\"=0;i\",i,\"<s\",idx,\";++i\",i,\"){\"].join(\"\"))\n  }\n  //Push body of inner loop\n  code.push(body)\n  //Advance scan pointers\n  for(i=0; i<dimension; ++i) {\n    pidx = idx\n    idx = order[i]\n    for(j=0; j<nargs; ++j) {\n      code.push([\"p\",j,\"+=d\",j,\"s\",i].join(\"\"))\n    }\n    if(has_index) {\n      if(i > 0) {\n        code.push([\"index[\",pidx,\"]-=s\",pidx].join(\"\"))\n      }\n      code.push([\"++index[\",idx,\"]\"].join(\"\"))\n    }\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n// Generate \"outer\" loops that loop over blocks of data, applying \"inner\" loops to the blocks by manipulating the local variables in such a way that the inner loop only \"sees\" the current block.\n// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.\n//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and \"shape\" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.\nfunction outerFill(matched, order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , blockSize = proc.blockSize\n    , has_index = proc.indexArgs.length > 0\n    , code = []\n  for(var i=0; i<nargs; ++i) {\n    code.push([\"var offset\",i,\"=p\",i].join(\"\"))\n  }\n  //Generate loops for unmatched dimensions\n  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)\n  // TODO: It would be nice if the order in which these loops are placed would also be somehow \"optimal\" (at the very least we should check that it really doesn't hurt us if they're not).\n  for(var i=matched; i<dimension; ++i) {\n    code.push([\"for(var j\"+i+\"=SS[\", order[i], \"]|0;j\", i, \">0;){\"].join(\"\")) // Iterate back to front\n    code.push([\"if(j\",i,\"<\",blockSize,\"){\"].join(\"\")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).\n    code.push([\"s\",order[i],\"=j\",i].join(\"\"))\n    code.push([\"j\",i,\"=0\"].join(\"\"))\n    code.push([\"}else{s\",order[i],\"=\",blockSize].join(\"\"))\n    code.push([\"j\",i,\"-=\",blockSize,\"}\"].join(\"\"))\n    if(has_index) {\n      code.push([\"index[\",order[i],\"]=j\",i].join(\"\"))\n    }\n  }\n  for(var i=0; i<nargs; ++i) {\n    var indexStr = [\"offset\"+i]\n    for(var j=matched; j<dimension; ++j) {\n      indexStr.push([\"j\",j,\"*t\",i,\"p\",order[j]].join(\"\"))\n    }\n    code.push([\"p\",i,\"=(\",indexStr.join(\"+\"),\")\"].join(\"\"))\n  }\n  code.push(innerFill(order, proc, body))\n  for(var i=matched; i<dimension; ++i) {\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n//Count the number of compatible inner orders\n// This is the length of the longest common prefix of the arrays in orders.\n// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.\n// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.\nfunction countMatches(orders) {\n  var matched = 0, dimension = orders[0].length\n  while(matched < dimension) {\n    for(var j=1; j<orders.length; ++j) {\n      if(orders[j][matched] !== orders[0][matched]) {\n        return matched\n      }\n    }\n    ++matched\n  }\n  return matched\n}\n\n//Processes a block according to the given data types\n// Replaces variable names by different ones, either \"local\" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.\nfunction processBlock(block, proc, dtypes) {\n  var code = block.body\n  var pre = []\n  var post = []\n  for(var i=0; i<block.args.length; ++i) {\n    var carg = block.args[i]\n    if(carg.count <= 0) {\n      continue\n    }\n    var re = new RegExp(carg.name, \"g\")\n    var ptrStr = \"\"\n    var arrNum = proc.arrayArgs.indexOf(i)\n    switch(proc.argTypes[i]) {\n      case \"offset\":\n        var offArgIndex = proc.offsetArgIndex.indexOf(i)\n        var offArg = proc.offsetArgs[offArgIndex]\n        arrNum = offArg.array\n        ptrStr = \"+q\" + offArgIndex // Adds offset to the \"pointer\" in the array\n      case \"array\":\n        ptrStr = \"p\" + arrNum + ptrStr\n        var localStr = \"l\" + i\n        var arrStr = \"a\" + arrNum\n        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array\n          if(carg.count === 1) { // Argument/array used only once(?)\n            if(dtypes[arrNum] === \"generic\") {\n              if(carg.lvalue) {\n                pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n                code = code.replace(re, localStr)\n                post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n              } else {\n                code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n              }\n            } else {\n              code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n            }\n          } else if(dtypes[arrNum] === \"generic\") {\n            pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            }\n          } else {\n            pre.push([\"var \", localStr, \"=\", arrStr, \"[\", ptrStr, \"]\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \"[\", ptrStr, \"]=\", localStr].join(\"\"))\n            }\n          }\n        } else { // Argument to body is a \"block\"\n          var reStrArr = [carg.name], ptrStrArr = [ptrStr]\n          for(var j=0; j<Math.abs(proc.arrayBlockIndices[arrNum]); j++) {\n            reStrArr.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\")\n            ptrStrArr.push(\"$\" + (j+1) + \"*t\" + arrNum + \"b\" + j) // Matched index times stride\n          }\n          re = new RegExp(reStrArr.join(\"\"), \"g\")\n          ptrStr = ptrStrArr.join(\"+\")\n          if(dtypes[arrNum] === \"generic\") {\n            /*if(carg.lvalue) {\n              pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n              code = code.replace(re, localStr)\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            } else {\n              code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n            }*/\n            throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\")\n          } else {\n            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.\n            code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n          }\n        }\n      break\n      case \"scalar\":\n        code = code.replace(re, \"Y\" + proc.scalarArgs.indexOf(i))\n      break\n      case \"index\":\n        code = code.replace(re, \"index\")\n      break\n      case \"shape\":\n        code = code.replace(re, \"shape\")\n      break\n    }\n  }\n  return [pre.join(\"\\n\"), code, post.join(\"\\n\")].join(\"\\n\").trim()\n}\n\nfunction typeSummary(dtypes) {\n  var summary = new Array(dtypes.length)\n  var allEqual = true\n  for(var i=0; i<dtypes.length; ++i) {\n    var t = dtypes[i]\n    var digits = t.match(/\\d+/)\n    if(!digits) {\n      digits = \"\"\n    } else {\n      digits = digits[0]\n    }\n    if(t.charAt(0) === 0) {\n      summary[i] = \"u\" + t.charAt(1) + digits\n    } else {\n      summary[i] = t.charAt(0) + digits\n    }\n    if(i > 0) {\n      allEqual = allEqual && summary[i] === summary[i-1]\n    }\n  }\n  if(allEqual) {\n    return summary[0]\n  }\n  return summary.join(\"\")\n}\n\n//Generates a cwise operator\nfunction generateCWiseOp(proc, typesig) {\n\n  //Compute dimension\n  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.\n  var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0]))|0\n  var orders = new Array(proc.arrayArgs.length)\n  var dtypes = new Array(proc.arrayArgs.length)\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    dtypes[i] = typesig[2*i]\n    orders[i] = typesig[2*i+1]\n  }\n  \n  //Determine where block and loop indices start and end\n  var blockBegin = [], blockEnd = [] // These indices are exposed as blocks\n  var loopBegin = [], loopEnd = [] // These indices are iterated over\n  var loopOrders = [] // orders restricted to the loop indices\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    if (proc.arrayBlockIndices[i]<0) {\n      loopBegin.push(0)\n      loopEnd.push(dimension)\n      blockBegin.push(dimension)\n      blockEnd.push(dimension+proc.arrayBlockIndices[i])\n    } else {\n      loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative\n      loopEnd.push(proc.arrayBlockIndices[i]+dimension)\n      blockBegin.push(0)\n      blockEnd.push(proc.arrayBlockIndices[i])\n    }\n    var newOrder = []\n    for(var j=0; j<orders[i].length; j++) {\n      if (loopBegin[i]<=orders[i][j] && orders[i][j]<loopEnd[i]) {\n        newOrder.push(orders[i][j]-loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.\n      }\n    }\n    loopOrders.push(newOrder)\n  }\n\n  //First create arguments for procedure\n  var arglist = [\"SS\"] // SS is the overall shape over which we iterate\n  var code = [\"'use strict'\"]\n  var vars = []\n  \n  for(var j=0; j<dimension; ++j) {\n    vars.push([\"s\", j, \"=SS[\", j, \"]\"].join(\"\")) // The limits for each dimension.\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    arglist.push(\"a\"+i) // Actual data array\n    arglist.push(\"t\"+i) // Strides\n    arglist.push(\"p\"+i) // Offset in the array at which the data starts (also used for iterating over the data)\n    \n    for(var j=0; j<dimension; ++j) { // Unpack the strides into vars for looping\n      vars.push([\"t\",i,\"p\",j,\"=t\",i,\"[\",loopBegin[i]+j,\"]\"].join(\"\"))\n    }\n    \n    for(var j=0; j<Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration\n      vars.push([\"t\",i,\"b\",j,\"=t\",i,\"[\",blockBegin[i]+j,\"]\"].join(\"\"))\n    }\n  }\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\n    arglist.push(\"Y\" + i)\n  }\n  if(proc.shapeArgs.length > 0) {\n    vars.push(\"shape=SS.slice(0)\") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)\n  }\n  if(proc.indexArgs.length > 0) {\n    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.\n    var zeros = new Array(dimension)\n    for(var i=0; i<dimension; ++i) {\n      zeros[i] = \"0\"\n    }\n    vars.push([\"index=[\", zeros.join(\",\"), \"]\"].join(\"\"))\n  }\n  for(var i=0; i<proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations\n    var off_arg = proc.offsetArgs[i]\n    var init_string = []\n    for(var j=0; j<off_arg.offset.length; ++j) {\n      if(off_arg.offset[j] === 0) {\n        continue\n      } else if(off_arg.offset[j] === 1) {\n        init_string.push([\"t\", off_arg.array, \"p\", j].join(\"\"))      \n      } else {\n        init_string.push([off_arg.offset[j], \"*t\", off_arg.array, \"p\", j].join(\"\"))\n      }\n    }\n    if(init_string.length === 0) {\n      vars.push(\"q\" + i + \"=0\")\n    } else {\n      vars.push([\"q\", i, \"=\", init_string.join(\"+\")].join(\"\"))\n    }\n  }\n\n  //Prepare this variables\n  var thisVars = uniq([].concat(proc.pre.thisVars)\n                      .concat(proc.body.thisVars)\n                      .concat(proc.post.thisVars))\n  vars = vars.concat(thisVars)\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    code.push(\"p\"+i+\"|=0\")\n  }\n  \n  //Inline prelude\n  if(proc.pre.body.length > 3) {\n    code.push(processBlock(proc.pre, proc, dtypes))\n  }\n\n  //Process body\n  var body = processBlock(proc.body, proc, dtypes)\n  var matched = countMatches(loopOrders)\n  if(matched < dimension) {\n    code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.\n  } else {\n    code.push(innerFill(loopOrders[0], proc, body))\n  }\n\n  //Inline epilog\n  if(proc.post.body.length > 3) {\n    code.push(processBlock(proc.post, proc, dtypes))\n  }\n  \n  if(proc.debug) {\n    console.log(\"-----Generated cwise routine for \", typesig, \":\\n\" + code.join(\"\\n\") + \"\\n----------\")\n  }\n  \n  var loopName = [(proc.funcName||\"unnamed\"), \"_cwise_loop_\", orders[0].join(\"s\"),\"m\",matched,typeSummary(dtypes)].join(\"\")\n  var f = new Function([\"function \",loopName,\"(\", arglist.join(\",\"),\"){\", code.join(\"\\n\"),\"} return \", loopName].join(\"\"))\n  return f()\n}\nmodule.exports = generateCWiseOp\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}