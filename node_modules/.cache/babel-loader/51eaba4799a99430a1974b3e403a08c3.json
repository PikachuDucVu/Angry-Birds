{"ast":null,"code":"/**\n * FastBitSet.js : a fast bit set implementation in JavaScript.\n * (c) the authors\n * Licensed under the Apache License, Version 2.0.\n *\n * Speed-optimized BitSet implementation for modern browsers and JavaScript engines.\n *\n * A BitSet is an ideal data structure to implement a Set when values being stored are\n * reasonably small integers. It can be orders of magnitude faster than a generic set implementation.\n * The FastBitSet implementation optimizes for speed, leveraging commonly available features\n * like typed arrays.\n *\n * Simple usage :\n *  // var FastBitSet = require(\"fastbitset\");// if you use node\n *  var b = new FastBitSet();// initially empty\n *  b.add(1);// add the value \"1\"\n *  b.has(1); // check that the value is present! (will return true)\n *  b.add(2);\n *  console.log(\"\"+b);// should display {1,2}\n *  b.add(10);\n *  b.array(); // would return [1,2,10]\n *\n *  var c = new FastBitSet([1,2,3,10]); // create bitset initialized with values 1,2,3,10\n *  c.difference(b); // from c, remove elements that are in b\n *  var su = c.union_size(b);// compute the size of the union (bitsets are unchanged)\n * c.union(b); // c will contain all elements that are in c and b\n * var s1 = c.intersection_size(b);// compute the size of the intersection (bitsets are unchanged)\n * c.intersection(b); // c will only contain elements that are in both c and b\n * c = b.clone(); // create a (deep) copy of b and assign it to c.\n * c.equals(b); // check whether c and b are equal\n *\n *   See README.md file for a more complete description.\n *\n * You can install the library under node with the command line\n *   npm install fastbitset\n */\n'use strict';\n\nvar _createForOfIteratorHelper = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nfunction isIterable(obj) {\n  if (obj == null) {\n    return false;\n  }\n\n  return obj[Symbol.iterator] !== undefined;\n} // you can provide an iterable\n\n\nfunction FastBitSet(iterable) {\n  this.words = [];\n\n  if (isIterable(iterable)) {\n    var _iterator = _createForOfIteratorHelper(iterable),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        this.add(key);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n} // Add the value (Set the bit at index to true)\n\n\nFastBitSet.prototype.add = function (index) {\n  this.resize(index);\n  this.words[index >>> 5] |= 1 << index;\n}; // If the value was not in the set, add it, otherwise remove it (flip bit at index)\n\n\nFastBitSet.prototype.flip = function (index) {\n  this.resize(index);\n  this.words[index >>> 5] ^= 1 << index;\n}; // Remove all values, reset memory usage\n\n\nFastBitSet.prototype.clear = function () {\n  this.words = [];\n}; // Set the bit at index to false\n\n\nFastBitSet.prototype.remove = function (index) {\n  this.resize(index);\n  this.words[index >>> 5] &= ~(1 << index);\n}; // Return true if no bit is set\n\n\nFastBitSet.prototype.isEmpty = function (index) {\n  var c = this.words.length;\n\n  for (var i = 0; i < c; i++) {\n    if (this.words[i] !== 0) return false;\n  }\n\n  return true;\n}; // Is the value contained in the set? Is the bit at index true or false? Returns a boolean\n\n\nFastBitSet.prototype.has = function (index) {\n  return (this.words[index >>> 5] & 1 << index) !== 0;\n}; // Tries to add the value (Set the bit at index to true), return 1 if the\n// value was added, return 0 if the value was already present\n\n\nFastBitSet.prototype.checkedAdd = function (index) {\n  this.resize(index);\n  var word = this.words[index >>> 5];\n  var newword = word | 1 << index;\n  this.words[index >>> 5] = newword;\n  return (newword ^ word) >>> index;\n}; // Reduce the memory usage to a minimum\n\n\nFastBitSet.prototype.trim = function (index) {\n  var nl = this.words.length;\n\n  while (nl > 0 && this.words[nl - 1] === 0) {\n    nl--;\n  }\n\n  this.words = this.words.slice(0, nl);\n}; // Resize the bitset so that we can write a value at index\n\n\nFastBitSet.prototype.resize = function (index) {\n  var count = index + 32 >>> 5; // just what is needed\n\n  for (var i = this.words.length; i < count; i++) {\n    this.words[i] = 0;\n  }\n}; // fast function to compute the Hamming weight of a 32-bit unsigned integer\n\n\nFastBitSet.prototype.hammingWeight = function (v) {\n  v -= v >>> 1 & 0x55555555; // works with signed or unsigned shifts\n\n  v = (v & 0x33333333) + (v >>> 2 & 0x33333333);\n  return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;\n}; // fast function to compute the Hamming weight of four 32-bit unsigned integers\n\n\nFastBitSet.prototype.hammingWeight4 = function (v1, v2, v3, v4) {\n  v1 -= v1 >>> 1 & 0x55555555; // works with signed or unsigned shifts\n\n  v2 -= v2 >>> 1 & 0x55555555; // works with signed or unsigned shifts\n\n  v3 -= v3 >>> 1 & 0x55555555; // works with signed or unsigned shifts\n\n  v4 -= v4 >>> 1 & 0x55555555; // works with signed or unsigned shifts\n\n  v1 = (v1 & 0x33333333) + (v1 >>> 2 & 0x33333333);\n  v2 = (v2 & 0x33333333) + (v2 >>> 2 & 0x33333333);\n  v3 = (v3 & 0x33333333) + (v3 >>> 2 & 0x33333333);\n  v4 = (v4 & 0x33333333) + (v4 >>> 2 & 0x33333333);\n  v1 = v1 + (v1 >>> 4) & 0xF0F0F0F;\n  v2 = v2 + (v2 >>> 4) & 0xF0F0F0F;\n  v3 = v3 + (v3 >>> 4) & 0xF0F0F0F;\n  v4 = v4 + (v4 >>> 4) & 0xF0F0F0F;\n  return (v1 + v2 + v3 + v4) * 0x1010101 >>> 24;\n}; // How many values stored in the set? How many set bits?\n\n\nFastBitSet.prototype.size = function () {\n  var answer = 0;\n  var c = this.words.length;\n  var w = this.words;\n  var i = 0;\n\n  for (; i < c; i++) {\n    answer += this.hammingWeight(w[i]);\n  }\n\n  return answer;\n}; // Return an array with the set bit locations (values)\n\n\nFastBitSet.prototype.array = function () {\n  var answer = new Array(this.size());\n  var pos = 0 | 0;\n  var c = this.words.length;\n\n  for (var k = 0; k < c; ++k) {\n    var w = this.words[k];\n\n    while (w != 0) {\n      var t = w & -w;\n      answer[pos++] = (k << 5) + this.hammingWeight(t - 1 | 0);\n      w ^= t;\n    }\n  }\n\n  return answer;\n}; // Return an array with the set bit locations (values)\n\n\nFastBitSet.prototype.forEach = function (fnc) {\n  var c = this.words.length;\n\n  for (var k = 0; k < c; ++k) {\n    var w = this.words[k];\n\n    while (w != 0) {\n      var t = w & -w;\n      fnc((k << 5) + this.hammingWeight(t - 1 | 0));\n      w ^= t;\n    }\n  }\n}; // Creates a copy of this bitmap\n\n\nFastBitSet.prototype.clone = function () {\n  var clone = Object.create(FastBitSet.prototype);\n  clone.words = this.words.slice();\n  return clone;\n}; // Check if this bitset intersects with another one,\n// no bitmap is modified\n\n\nFastBitSet.prototype.intersects = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n\n  for (var k = 0 | 0; k < newcount; ++k) {\n    if ((this.words[k] & otherbitmap.words[k]) !== 0) return true;\n  }\n\n  return false;\n}; // Computes the intersection between this bitset and another one,\n// the current bitmap is modified  (and returned by the function)\n\n\nFastBitSet.prototype.intersection = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n  var k = 0 | 0;\n\n  for (; k + 7 < newcount; k += 8) {\n    this.words[k] &= otherbitmap.words[k];\n    this.words[k + 1] &= otherbitmap.words[k + 1];\n    this.words[k + 2] &= otherbitmap.words[k + 2];\n    this.words[k + 3] &= otherbitmap.words[k + 3];\n    this.words[k + 4] &= otherbitmap.words[k + 4];\n    this.words[k + 5] &= otherbitmap.words[k + 5];\n    this.words[k + 6] &= otherbitmap.words[k + 6];\n    this.words[k + 7] &= otherbitmap.words[k + 7];\n  }\n\n  for (; k < newcount; ++k) {\n    this.words[k] &= otherbitmap.words[k];\n  }\n\n  var c = this.words.length;\n\n  for (var k = newcount; k < c; ++k) {\n    this.words[k] = 0;\n  }\n\n  return this;\n}; // Computes the size of the intersection between this bitset and another one\n\n\nFastBitSet.prototype.intersection_size = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n  var answer = 0 | 0;\n\n  for (var k = 0 | 0; k < newcount; ++k) {\n    answer += this.hammingWeight(this.words[k] & otherbitmap.words[k]);\n  }\n\n  return answer;\n}; // Computes the intersection between this bitset and another one,\n// a new bitmap is generated\n\n\nFastBitSet.prototype.new_intersection = function (otherbitmap) {\n  var answer = Object.create(FastBitSet.prototype);\n  var count = Math.min(this.words.length, otherbitmap.words.length);\n  answer.words = new Array(count);\n  var c = count;\n  var k = 0 | 0;\n\n  for (; k + 7 < c; k += 8) {\n    answer.words[k] = this.words[k] & otherbitmap.words[k];\n    answer.words[k + 1] = this.words[k + 1] & otherbitmap.words[k + 1];\n    answer.words[k + 2] = this.words[k + 2] & otherbitmap.words[k + 2];\n    answer.words[k + 3] = this.words[k + 3] & otherbitmap.words[k + 3];\n    answer.words[k + 4] = this.words[k + 4] & otherbitmap.words[k + 4];\n    answer.words[k + 5] = this.words[k + 5] & otherbitmap.words[k + 5];\n    answer.words[k + 6] = this.words[k + 6] & otherbitmap.words[k + 6];\n    answer.words[k + 7] = this.words[k + 7] & otherbitmap.words[k + 7];\n  }\n\n  for (; k < c; ++k) {\n    answer.words[k] = this.words[k] & otherbitmap.words[k];\n  }\n\n  return answer;\n}; // Computes the intersection between this bitset and another one,\n// the current bitmap is modified\n\n\nFastBitSet.prototype.equals = function (otherbitmap) {\n  var mcount = Math.min(this.words.length, otherbitmap.words.length);\n\n  for (var k = 0 | 0; k < mcount; ++k) {\n    if (this.words[k] != otherbitmap.words[k]) return false;\n  }\n\n  if (this.words.length < otherbitmap.words.length) {\n    var c = otherbitmap.words.length;\n\n    for (var k = this.words.length; k < c; ++k) {\n      if (otherbitmap.words[k] != 0) return false;\n    }\n  } else if (otherbitmap.words.length < this.words.length) {\n    var c = this.words.length;\n\n    for (var k = otherbitmap.words.length; k < c; ++k) {\n      if (this.words[k] != 0) return false;\n    }\n  }\n\n  return true;\n}; // Computes the difference between this bitset and another one,\n// the current bitset is modified (and returned by the function)\n\n\nFastBitSet.prototype.difference = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n  var k = 0 | 0;\n\n  for (; k + 7 < newcount; k += 8) {\n    this.words[k] &= ~otherbitmap.words[k];\n    this.words[k + 1] &= ~otherbitmap.words[k + 1];\n    this.words[k + 2] &= ~otherbitmap.words[k + 2];\n    this.words[k + 3] &= ~otherbitmap.words[k + 3];\n    this.words[k + 4] &= ~otherbitmap.words[k + 4];\n    this.words[k + 5] &= ~otherbitmap.words[k + 5];\n    this.words[k + 6] &= ~otherbitmap.words[k + 6];\n    this.words[k + 7] &= ~otherbitmap.words[k + 7];\n  }\n\n  for (; k < newcount; ++k) {\n    this.words[k] &= ~otherbitmap.words[k];\n  }\n\n  return this;\n}; // Computes the size of the difference between this bitset and another one\n\n\nFastBitSet.prototype.difference_size = function (otherbitmap) {\n  var newcount = Math.min(this.words.length, otherbitmap.words.length);\n  var answer = 0 | 0;\n  var k = 0 | 0;\n\n  for (; k < newcount; ++k) {\n    answer += this.hammingWeight(this.words[k] & ~otherbitmap.words[k]);\n  }\n\n  var c = this.words.length;\n\n  for (; k < c; ++k) {\n    answer += this.hammingWeight(this.words[k]);\n  }\n\n  return answer;\n}; // Returns a string representation\n\n\nFastBitSet.prototype.toString = function () {\n  return '{' + this.array().join(',') + '}';\n}; // Computes the union between this bitset and another one,\n// the current bitset is modified  (and returned by the function)\n\n\nFastBitSet.prototype.union = function (otherbitmap) {\n  var mcount = Math.min(this.words.length, otherbitmap.words.length);\n  var k = 0 | 0;\n\n  for (; k + 7 < mcount; k += 8) {\n    this.words[k] |= otherbitmap.words[k];\n    this.words[k + 1] |= otherbitmap.words[k + 1];\n    this.words[k + 2] |= otherbitmap.words[k + 2];\n    this.words[k + 3] |= otherbitmap.words[k + 3];\n    this.words[k + 4] |= otherbitmap.words[k + 4];\n    this.words[k + 5] |= otherbitmap.words[k + 5];\n    this.words[k + 6] |= otherbitmap.words[k + 6];\n    this.words[k + 7] |= otherbitmap.words[k + 7];\n  }\n\n  for (; k < mcount; ++k) {\n    this.words[k] |= otherbitmap.words[k];\n  }\n\n  if (this.words.length < otherbitmap.words.length) {\n    this.resize((otherbitmap.words.length << 5) - 1);\n    var c = otherbitmap.words.length;\n\n    for (var k = mcount; k < c; ++k) {\n      this.words[k] = otherbitmap.words[k];\n    }\n  }\n\n  return this;\n};\n\nFastBitSet.prototype.new_union = function (otherbitmap) {\n  var answer = Object.create(FastBitSet.prototype);\n  var count = Math.max(this.words.length, otherbitmap.words.length);\n  answer.words = new Array(count);\n  var mcount = Math.min(this.words.length, otherbitmap.words.length);\n  var k = 0;\n\n  for (; k + 7 < mcount; k += 8) {\n    answer.words[k] = this.words[k] | otherbitmap.words[k];\n    answer.words[k + 1] = this.words[k + 1] | otherbitmap.words[k + 1];\n    answer.words[k + 2] = this.words[k + 2] | otherbitmap.words[k + 2];\n    answer.words[k + 3] = this.words[k + 3] | otherbitmap.words[k + 3];\n    answer.words[k + 4] = this.words[k + 4] | otherbitmap.words[k + 4];\n    answer.words[k + 5] = this.words[k + 5] | otherbitmap.words[k + 5];\n    answer.words[k + 6] = this.words[k + 6] | otherbitmap.words[k + 6];\n    answer.words[k + 7] = this.words[k + 7] | otherbitmap.words[k + 7];\n  }\n\n  for (; k < mcount; ++k) {\n    answer.words[k] = this.words[k] | otherbitmap.words[k];\n  }\n\n  var c = this.words.length;\n\n  for (var k = mcount; k < c; ++k) {\n    answer.words[k] = this.words[k];\n  }\n\n  var c2 = otherbitmap.words.length;\n\n  for (var k = mcount; k < c2; ++k) {\n    answer.words[k] = otherbitmap.words[k];\n  }\n\n  return answer;\n}; // Computes the difference between this bitset and another one,\n// a new bitmap is generated\n\n\nFastBitSet.prototype.new_difference = function (otherbitmap) {\n  return this.clone().difference(otherbitmap); // should be fast enough\n}; // Computes the size union between this bitset and another one\n\n\nFastBitSet.prototype.union_size = function (otherbitmap) {\n  var mcount = Math.min(this.words.length, otherbitmap.words.length);\n  var answer = 0 | 0;\n\n  for (var k = 0 | 0; k < mcount; ++k) {\n    answer += this.hammingWeight(this.words[k] | otherbitmap.words[k]);\n  }\n\n  if (this.words.length < otherbitmap.words.length) {\n    var c = otherbitmap.words.length;\n\n    for (var k = this.words.length; k < c; ++k) {\n      answer += this.hammingWeight(otherbitmap.words[k] | 0);\n    }\n  } else {\n    var c = this.words.length;\n\n    for (var k = otherbitmap.words.length; k < c; ++k) {\n      answer += this.hammingWeight(this.words[k] | 0);\n    }\n  }\n\n  return answer;\n}; ///////////////\n\n\nmodule.exports = FastBitSet;","map":{"version":3,"names":["isIterable","obj","Symbol","iterator","undefined","FastBitSet","iterable","words","key","add","prototype","index","resize","flip","clear","remove","isEmpty","c","length","i","has","checkedAdd","word","newword","trim","nl","slice","count","hammingWeight","v","hammingWeight4","v1","v2","v3","v4","size","answer","w","array","Array","pos","k","t","forEach","fnc","clone","Object","create","intersects","otherbitmap","newcount","Math","min","intersection","intersection_size","new_intersection","equals","mcount","difference","difference_size","toString","join","union","new_union","max","c2","new_difference","union_size","module","exports"],"sources":["D:/projects/test-game/node_modules/fastbitset/FastBitSet.js"],"sourcesContent":["/**\n * FastBitSet.js : a fast bit set implementation in JavaScript.\n * (c) the authors\n * Licensed under the Apache License, Version 2.0.\n *\n * Speed-optimized BitSet implementation for modern browsers and JavaScript engines.\n *\n * A BitSet is an ideal data structure to implement a Set when values being stored are\n * reasonably small integers. It can be orders of magnitude faster than a generic set implementation.\n * The FastBitSet implementation optimizes for speed, leveraging commonly available features\n * like typed arrays.\n *\n * Simple usage :\n *  // var FastBitSet = require(\"fastbitset\");// if you use node\n *  var b = new FastBitSet();// initially empty\n *  b.add(1);// add the value \"1\"\n *  b.has(1); // check that the value is present! (will return true)\n *  b.add(2);\n *  console.log(\"\"+b);// should display {1,2}\n *  b.add(10);\n *  b.array(); // would return [1,2,10]\n *\n *  var c = new FastBitSet([1,2,3,10]); // create bitset initialized with values 1,2,3,10\n *  c.difference(b); // from c, remove elements that are in b\n *  var su = c.union_size(b);// compute the size of the union (bitsets are unchanged)\n * c.union(b); // c will contain all elements that are in c and b\n * var s1 = c.intersection_size(b);// compute the size of the intersection (bitsets are unchanged)\n * c.intersection(b); // c will only contain elements that are in both c and b\n * c = b.clone(); // create a (deep) copy of b and assign it to c.\n * c.equals(b); // check whether c and b are equal\n *\n *   See README.md file for a more complete description.\n *\n * You can install the library under node with the command line\n *   npm install fastbitset\n */\n'use strict';\n\nfunction isIterable(obj) {\n  if (obj == null) {\n    return false;\n  }\n  return obj[Symbol.iterator] !== undefined;\n}\n\n// you can provide an iterable\nfunction FastBitSet(iterable) {\n  this.words = []\n  if (isIterable(iterable)) {\n    for (var key of iterable) {\n      this.add(key);\n    }\n  }\n}\n\n// Add the value (Set the bit at index to true)\nFastBitSet.prototype.add = function(index) {\n  this.resize(index);\n  this.words[index >>> 5] |= 1 << index ;\n};\n\n// If the value was not in the set, add it, otherwise remove it (flip bit at index)\nFastBitSet.prototype.flip = function(index) {\n  this.resize(index);\n  this.words[index >>> 5] ^= 1 << index ;\n};\n\n// Remove all values, reset memory usage\nFastBitSet.prototype.clear = function() {\n  this.words = []\n};\n\n// Set the bit at index to false\nFastBitSet.prototype.remove = function(index) {\n  this.resize(index);\n  this.words[index  >>> 5] &= ~(1 << index);\n};\n\n// Return true if no bit is set\nFastBitSet.prototype.isEmpty = function(index) {\n  var c = this.words.length;\n  for (var  i = 0; i < c; i++) {\n    if (this.words[i] !== 0) return false;\n  }\n  return true;\n};\n\n// Is the value contained in the set? Is the bit at index true or false? Returns a boolean\nFastBitSet.prototype.has = function(index) {\n  return (this.words[index  >>> 5] & (1 << index)) !== 0;\n};\n\n// Tries to add the value (Set the bit at index to true), return 1 if the\n// value was added, return 0 if the value was already present\nFastBitSet.prototype.checkedAdd = function(index) {\n  this.resize(index);\n  var word = this.words[index  >>> 5]\n  var newword = word | (1 << index)\n  this.words[index >>> 5] = newword\n  return (newword ^ word) >>> index\n};\n\n\n// Reduce the memory usage to a minimum\nFastBitSet.prototype.trim = function(index) {\n  var nl = this.words.length\n  while ((nl > 0) && (this.words[nl - 1] === 0)) {\n      nl--;\n  }\n  this.words = this.words.slice(0,nl);\n};\n\n\n// Resize the bitset so that we can write a value at index\nFastBitSet.prototype.resize = function(index) {\n  var count = (index + 32) >>> 5;// just what is needed\n  for(var i = this.words.length; i < count; i++) this.words[i] = 0;\n};\n\n// fast function to compute the Hamming weight of a 32-bit unsigned integer\nFastBitSet.prototype.hammingWeight = function(v) {\n  v -= ((v >>> 1) & 0x55555555);// works with signed or unsigned shifts\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n};\n\n\n// fast function to compute the Hamming weight of four 32-bit unsigned integers\nFastBitSet.prototype.hammingWeight4 = function(v1,v2,v3,v4) {\n  v1 -= ((v1 >>> 1) & 0x55555555);// works with signed or unsigned shifts\n  v2 -= ((v2 >>> 1) & 0x55555555);// works with signed or unsigned shifts\n  v3 -= ((v3 >>> 1) & 0x55555555);// works with signed or unsigned shifts\n  v4 -= ((v4 >>> 1) & 0x55555555);// works with signed or unsigned shifts\n\n  v1 = (v1 & 0x33333333) + ((v1 >>> 2) & 0x33333333);\n  v2 = (v2 & 0x33333333) + ((v2 >>> 2) & 0x33333333);\n  v3 = (v3 & 0x33333333) + ((v3 >>> 2) & 0x33333333);\n  v4 = (v4 & 0x33333333) + ((v4 >>> 2) & 0x33333333);\n\n  v1 = v1 + (v1 >>> 4) & 0xF0F0F0F;\n  v2 = v2 + (v2 >>> 4) & 0xF0F0F0F;\n  v3 = v3 + (v3 >>> 4) & 0xF0F0F0F;\n  v4 = v4 + (v4 >>> 4) & 0xF0F0F0F;\n  return (( (v1 + v2 + v3 + v4) * 0x1010101) >>> 24);\n};\n\n// How many values stored in the set? How many set bits?\nFastBitSet.prototype.size = function() {\n  var answer = 0;\n  var c = this.words.length;\n  var w = this.words;\n  var i = 0;\n  for (; i < c; i++) {\n    answer += this.hammingWeight(w[i]);\n  }\n  return answer;\n};\n\n// Return an array with the set bit locations (values)\nFastBitSet.prototype.array = function() {\n  var answer = new Array(this.size());\n  var pos = 0 | 0;\n  var c = this.words.length;\n  for (var k = 0; k < c; ++k) {\n    var w =  this.words[k];\n    while (w != 0) {\n      var t = w & -w;\n      answer[pos++] = (k << 5) + this.hammingWeight((t - 1) | 0);\n      w ^= t;\n    }\n  }\n  return answer;\n};\n\n\n// Return an array with the set bit locations (values)\nFastBitSet.prototype.forEach = function(fnc) {\n  var c = this.words.length;\n  for (var k = 0; k < c; ++k) {\n    var w =  this.words[k];\n    while (w != 0) {\n      var t = w & -w;\n      fnc((k << 5) + this.hammingWeight((t - 1) | 0));\n      w ^= t;\n    }\n  }\n};\n\n// Creates a copy of this bitmap\nFastBitSet.prototype.clone = function() {\n  var clone = Object.create(FastBitSet.prototype);\n  clone.words = this.words.slice();\n  return clone;\n};\n\n// Check if this bitset intersects with another one,\n// no bitmap is modified\nFastBitSet.prototype.intersects = function(otherbitmap) {\n  var newcount = Math.min(this.words.length,otherbitmap.words.length);\n  for (var k = 0 | 0; k < newcount; ++k) {\n    if ((this.words[k] & otherbitmap.words[k]) !== 0) return true;\n  }\n  return false;\n};\n\n// Computes the intersection between this bitset and another one,\n// the current bitmap is modified  (and returned by the function)\nFastBitSet.prototype.intersection = function(otherbitmap) {\n  var newcount = Math.min(this.words.length,otherbitmap.words.length);\n  var k = 0 | 0;\n  for (; k + 7 < newcount; k += 8) {\n    this.words[k] &= otherbitmap.words[k];\n    this.words[k + 1] &= otherbitmap.words[k + 1];\n    this.words[k + 2] &= otherbitmap.words[k + 2];\n    this.words[k + 3] &= otherbitmap.words[k + 3];\n    this.words[k + 4] &= otherbitmap.words[k + 4];\n    this.words[k + 5] &= otherbitmap.words[k + 5];\n    this.words[k + 6] &= otherbitmap.words[k + 6];\n    this.words[k + 7] &= otherbitmap.words[k + 7];\n  }\n  for (; k < newcount; ++k) {\n    this.words[k] &= otherbitmap.words[k];\n  }\n  var c = this.words.length;\n  for (var k = newcount; k < c; ++k) {\n    this.words[k] = 0;\n  }\n  return this;\n};\n\n// Computes the size of the intersection between this bitset and another one\nFastBitSet.prototype.intersection_size = function(otherbitmap) {\n  var newcount = Math.min(this.words.length,otherbitmap.words.length);\n  var answer = 0 | 0;\n  for (var k = 0 | 0; k < newcount; ++k) {\n    answer += this.hammingWeight(this.words[k] & otherbitmap.words[k]);\n  }\n\n  return answer;\n};\n\n// Computes the intersection between this bitset and another one,\n// a new bitmap is generated\nFastBitSet.prototype.new_intersection = function(otherbitmap) {\n  var answer = Object.create(FastBitSet.prototype);\n  var count = Math.min(this.words.length,otherbitmap.words.length);\n  answer.words = new Array(count);\n  var c = count;\n  var k = 0 | 0;\n  for (; k + 7  < c; k += 8) {\n      answer.words[k] = this.words[k] & otherbitmap.words[k];\n      answer.words[k+1] = this.words[k+1] & otherbitmap.words[k+1];\n      answer.words[k+2] = this.words[k+2] & otherbitmap.words[k+2];\n      answer.words[k+3] = this.words[k+3] & otherbitmap.words[k+3];\n      answer.words[k+4] = this.words[k+4] & otherbitmap.words[k+4];\n      answer.words[k+5] = this.words[k+5] & otherbitmap.words[k+5];\n      answer.words[k+6] = this.words[k+6] & otherbitmap.words[k+6];\n      answer.words[k+7] = this.words[k+7] & otherbitmap.words[k+7];\n  }\n  for (; k < c; ++k) {\n    answer.words[k] = this.words[k] & otherbitmap.words[k];\n  }\n  return answer;\n};\n\n// Computes the intersection between this bitset and another one,\n// the current bitmap is modified\nFastBitSet.prototype.equals = function(otherbitmap) {\n  var mcount = Math.min(this.words.length , otherbitmap.words.length);\n  for (var k = 0 | 0; k < mcount; ++k) {\n    if (this.words[k] != otherbitmap.words[k]) return false;\n  }\n  if (this.words.length < otherbitmap.words.length) {\n    var c = otherbitmap.words.length;\n    for (var k = this.words.length; k < c; ++k) {\n      if (otherbitmap.words[k] != 0) return false;\n    }\n  } else if (otherbitmap.words.length < this.words.length) {\n    var c = this.words.length;\n    for (var k = otherbitmap.words.length; k < c; ++k) {\n      if (this.words[k] != 0) return false;\n    }\n  }\n  return true;\n};\n\n// Computes the difference between this bitset and another one,\n// the current bitset is modified (and returned by the function)\nFastBitSet.prototype.difference = function(otherbitmap) {\n  var newcount = Math.min(this.words.length,otherbitmap.words.length);\n  var k = 0 | 0;\n  for (; k + 7 < newcount; k += 8) {\n    this.words[k] &= ~otherbitmap.words[k];\n    this.words[k + 1] &= ~otherbitmap.words[k + 1];\n    this.words[k + 2] &= ~otherbitmap.words[k + 2];\n    this.words[k + 3] &= ~otherbitmap.words[k + 3];\n    this.words[k + 4] &= ~otherbitmap.words[k + 4];\n    this.words[k + 5] &= ~otherbitmap.words[k + 5];\n    this.words[k + 6] &= ~otherbitmap.words[k + 6];\n    this.words[k + 7] &= ~otherbitmap.words[k + 7];\n  }\n  for (; k < newcount; ++k) {\n    this.words[k] &= ~otherbitmap.words[k];\n  }\n  return this;\n};\n\n// Computes the size of the difference between this bitset and another one\nFastBitSet.prototype.difference_size = function(otherbitmap) {\n  var newcount = Math.min(this.words.length,otherbitmap.words.length);\n  var answer = 0 | 0;\n  var k = 0 | 0;\n  for (; k < newcount; ++k) {\n    answer += this.hammingWeight(this.words[k] & (~otherbitmap.words[k]));\n  }\n  var c = this.words.length;\n  for (; k < c; ++k) {\n    answer += this.hammingWeight(this.words[k]);\n  }\n  return answer;\n};\n\n// Returns a string representation\nFastBitSet.prototype.toString = function() {\n  return '{' + this.array().join(',') + '}';\n};\n\n// Computes the union between this bitset and another one,\n// the current bitset is modified  (and returned by the function)\nFastBitSet.prototype.union = function(otherbitmap) {\n  var mcount = Math.min(this.words.length,otherbitmap.words.length);\n  var k = 0 | 0;\n  for (; k + 7  < mcount; k += 8) {\n    this.words[k] |= otherbitmap.words[k];\n    this.words[k + 1] |= otherbitmap.words[k + 1];\n    this.words[k + 2] |= otherbitmap.words[k + 2];\n    this.words[k + 3] |= otherbitmap.words[k + 3];\n    this.words[k + 4] |= otherbitmap.words[k + 4];\n    this.words[k + 5] |= otherbitmap.words[k + 5];\n    this.words[k + 6] |= otherbitmap.words[k + 6];\n    this.words[k + 7] |= otherbitmap.words[k + 7];\n  }\n  for (; k < mcount; ++k) {\n    this.words[k] |= otherbitmap.words[k];\n  }\n  if (this.words.length < otherbitmap.words.length) {\n    this.resize((otherbitmap.words.length  << 5) - 1);\n    var c = otherbitmap.words.length;\n    for (var k = mcount; k < c; ++k) {\n      this.words[k] = otherbitmap.words[k];\n    }\n  }\n  return this;\n};\n\nFastBitSet.prototype.new_union = function(otherbitmap) {\n  var answer = Object.create(FastBitSet.prototype);\n  var count = Math.max(this.words.length,otherbitmap.words.length);\n  answer.words = new Array(count);\n  var mcount = Math.min(this.words.length,otherbitmap.words.length)\n  var k = 0;\n  for (; k + 7  < mcount; k += 8) {\n      answer.words[k] = this.words[k] | otherbitmap.words[k];\n      answer.words[k+1] = this.words[k+1] | otherbitmap.words[k+1];\n      answer.words[k+2] = this.words[k+2] | otherbitmap.words[k+2];\n      answer.words[k+3] = this.words[k+3] | otherbitmap.words[k+3];\n      answer.words[k+4] = this.words[k+4] | otherbitmap.words[k+4];\n      answer.words[k+5] = this.words[k+5] | otherbitmap.words[k+5];\n      answer.words[k+6] = this.words[k+6] | otherbitmap.words[k+6];\n      answer.words[k+7] = this.words[k+7] | otherbitmap.words[k+7];\n  }\n  for (; k < mcount; ++k) {\n      answer.words[k] = this.words[k] | otherbitmap.words[k];\n  }\n  var c = this.words.length;\n  for (var k = mcount; k < c; ++k) {\n      answer.words[k] = this.words[k] ;\n  }\n  var c2 = otherbitmap.words.length;\n  for (var k = mcount; k < c2; ++k) {\n      answer.words[k] = otherbitmap.words[k] ;\n  }\n  return answer;\n};\n\n\n// Computes the difference between this bitset and another one,\n// a new bitmap is generated\nFastBitSet.prototype.new_difference = function(otherbitmap) {\n  return this.clone().difference(otherbitmap);// should be fast enough\n};\n\n// Computes the size union between this bitset and another one\nFastBitSet.prototype.union_size = function(otherbitmap) {\n  var mcount = Math.min(this.words.length,otherbitmap.words.length);\n  var answer = 0 | 0;\n  for (var k = 0 | 0; k < mcount; ++k) {\n    answer += this.hammingWeight(this.words[k] | otherbitmap.words[k]);\n  }\n  if (this.words.length < otherbitmap.words.length) {\n    var c = otherbitmap.words.length;\n    for (var k = this.words.length ; k < c; ++k) {\n      answer += this.hammingWeight(otherbitmap.words[k] | 0);\n    }\n  } else {\n    var c = this.words.length;\n    for (var k = otherbitmap.words.length ; k < c; ++k) {\n      answer += this.hammingWeight(this.words[k] | 0);\n    }\n  }\n  return answer;\n};\n\n\n\n\n///////////////\n\nmodule.exports = FastBitSet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}