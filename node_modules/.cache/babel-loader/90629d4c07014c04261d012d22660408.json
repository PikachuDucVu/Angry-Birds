{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _classCallCheck = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/projects/test-game/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Color2Attribute = exports.ColorAttribute = exports.TexCoordAttribute = exports.Position3Attribute = exports.Position2Attribute = exports.VertexAttribute = exports.VertexAttributeType = exports.Mesh = void 0;\n\nvar Shader_1 = require(\"./Shader\");\n\nvar WebGL_1 = require(\"./WebGL\");\n\nvar Mesh = /*#__PURE__*/function () {\n  function Mesh(context, attributes, maxVertices, maxIndices) {\n    _classCallCheck(this, Mesh);\n\n    this.attributes = attributes;\n    this.verticesLength = 0;\n    this.dirtyVertices = false;\n    this.indicesLength = 0;\n    this.dirtyIndices = false;\n    this.elementsPerVertex = 0;\n    this.context = context instanceof WebGL_1.ManagedWebGLRenderingContext ? context : new WebGL_1.ManagedWebGLRenderingContext(context);\n    this.elementsPerVertex = 0;\n\n    for (var i = 0; i < attributes.length; i++) {\n      this.elementsPerVertex += attributes[i].numElements;\n    }\n\n    this.vertices = new Float32Array(maxVertices * this.elementsPerVertex);\n    this.indices = new Uint16Array(maxIndices);\n    this.context.addRestorable(this);\n  }\n\n  _createClass(Mesh, [{\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.attributes;\n    }\n  }, {\n    key: \"maxVertices\",\n    value: function maxVertices() {\n      return this.vertices.length / this.elementsPerVertex;\n    }\n  }, {\n    key: \"numVertices\",\n    value: function numVertices() {\n      return this.verticesLength / this.elementsPerVertex;\n    }\n  }, {\n    key: \"setVerticesLength\",\n    value: function setVerticesLength(length) {\n      this.dirtyVertices = true;\n      this.verticesLength = length;\n    }\n  }, {\n    key: \"getVertices\",\n    value: function getVertices() {\n      return this.vertices;\n    }\n  }, {\n    key: \"maxIndices\",\n    value: function maxIndices() {\n      return this.indices.length;\n    }\n  }, {\n    key: \"numIndices\",\n    value: function numIndices() {\n      return this.indicesLength;\n    }\n  }, {\n    key: \"setIndicesLength\",\n    value: function setIndicesLength(length) {\n      this.dirtyIndices = true;\n      this.indicesLength = length;\n    }\n  }, {\n    key: \"getIndices\",\n    value: function getIndices() {\n      return this.indices;\n    }\n  }, {\n    key: \"getVertexSizeInFloats\",\n    value: function getVertexSizeInFloats() {\n      var size = 0;\n\n      for (var i = 0; i < this.attributes.length; i++) {\n        var attribute = this.attributes[i];\n        size += attribute.numElements;\n      }\n\n      return size;\n    }\n  }, {\n    key: \"setVertices\",\n    value: function setVertices(vertices) {\n      this.dirtyVertices = true;\n      if (vertices.length > this.vertices.length) throw Error(\"Mesh can't store more than \" + this.maxVertices() + \" vertices\");\n      this.vertices.set(vertices, 0);\n      this.verticesLength = vertices.length;\n    }\n  }, {\n    key: \"setIndices\",\n    value: function setIndices(indices) {\n      this.dirtyIndices = true;\n      if (indices.length > this.indices.length) throw Error(\"Mesh can't store more than \" + this.maxIndices() + \" indices\");\n      this.indices.set(indices, 0);\n      this.indicesLength = indices.length;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(shader, primitiveType) {\n      this.drawWithOffset(shader, primitiveType, 0, this.indicesLength > 0 ? this.indicesLength : this.verticesLength / this.elementsPerVertex);\n    }\n  }, {\n    key: \"drawWithOffset\",\n    value: function drawWithOffset(shader, primitiveType, offset, count) {\n      var gl = this.context.gl;\n      if (this.dirtyVertices || this.dirtyIndices) this.update();\n      this.bind(shader);\n\n      if (this.indicesLength > 0) {\n        gl.drawElements(primitiveType, count, gl.UNSIGNED_SHORT, offset * 2);\n      } else {\n        gl.drawArrays(primitiveType, offset, count);\n      }\n\n      this.unbind(shader);\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(shader) {\n      var gl = this.context.gl;\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.verticesBuffer);\n      var offset = 0;\n\n      for (var i = 0; i < this.attributes.length; i++) {\n        var attrib = this.attributes[i];\n        var location = shader.getAttributeLocation(attrib.name);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, attrib.numElements, gl.FLOAT, false, this.elementsPerVertex * 4, offset * 4);\n        offset += attrib.numElements;\n      }\n\n      if (this.indicesLength > 0) gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind(shader) {\n      var gl = this.context.gl;\n\n      for (var i = 0; i < this.attributes.length; i++) {\n        var attrib = this.attributes[i];\n        var location = shader.getAttributeLocation(attrib.name);\n        gl.disableVertexAttribArray(location);\n      }\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n      if (this.indicesLength > 0) gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var gl = this.context.gl;\n\n      if (this.dirtyVertices) {\n        if (!this.verticesBuffer) {\n          this.verticesBuffer = gl.createBuffer();\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.verticesBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.vertices.subarray(0, this.verticesLength), gl.DYNAMIC_DRAW);\n        this.dirtyVertices = false;\n      }\n\n      if (this.dirtyIndices) {\n        if (!this.indicesBuffer) {\n          this.indicesBuffer = gl.createBuffer();\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices.subarray(0, this.indicesLength), gl.DYNAMIC_DRAW);\n        this.dirtyIndices = false;\n      }\n    }\n  }, {\n    key: \"restore\",\n    value: function restore() {\n      this.verticesBuffer = null;\n      this.indicesBuffer = null;\n      this.update();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.context.removeRestorable(this);\n      var gl = this.context.gl;\n      gl.deleteBuffer(this.verticesBuffer);\n      gl.deleteBuffer(this.indicesBuffer);\n    }\n  }]);\n\n  return Mesh;\n}();\n\nexports.Mesh = Mesh;\nvar VertexAttributeType;\n\n(function (VertexAttributeType) {\n  VertexAttributeType[VertexAttributeType[\"Float\"] = 0] = \"Float\";\n})(VertexAttributeType = exports.VertexAttributeType || (exports.VertexAttributeType = {}));\n\nvar VertexAttribute = /*#__PURE__*/_createClass(function VertexAttribute(name, type, numElements) {\n  _classCallCheck(this, VertexAttribute);\n\n  this.name = name;\n  this.type = type;\n  this.numElements = numElements;\n});\n\nexports.VertexAttribute = VertexAttribute;\n\nvar Position2Attribute = /*#__PURE__*/function (_VertexAttribute) {\n  _inherits(Position2Attribute, _VertexAttribute);\n\n  var _super = _createSuper(Position2Attribute);\n\n  function Position2Attribute() {\n    _classCallCheck(this, Position2Attribute);\n\n    return _super.call(this, Shader_1.Shader.POSITION, VertexAttributeType.Float, 2);\n  }\n\n  return _createClass(Position2Attribute);\n}(VertexAttribute);\n\nexports.Position2Attribute = Position2Attribute;\n\nvar Position3Attribute = /*#__PURE__*/function (_VertexAttribute2) {\n  _inherits(Position3Attribute, _VertexAttribute2);\n\n  var _super2 = _createSuper(Position3Attribute);\n\n  function Position3Attribute() {\n    _classCallCheck(this, Position3Attribute);\n\n    return _super2.call(this, Shader_1.Shader.POSITION, VertexAttributeType.Float, 3);\n  }\n\n  return _createClass(Position3Attribute);\n}(VertexAttribute);\n\nexports.Position3Attribute = Position3Attribute;\n\nvar TexCoordAttribute = /*#__PURE__*/function (_VertexAttribute3) {\n  _inherits(TexCoordAttribute, _VertexAttribute3);\n\n  var _super3 = _createSuper(TexCoordAttribute);\n\n  function TexCoordAttribute() {\n    var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    _classCallCheck(this, TexCoordAttribute);\n\n    return _super3.call(this, Shader_1.Shader.TEXCOORDS + (unit === 0 ? \"\" : unit), VertexAttributeType.Float, 2);\n  }\n\n  return _createClass(TexCoordAttribute);\n}(VertexAttribute);\n\nexports.TexCoordAttribute = TexCoordAttribute;\n\nvar ColorAttribute = /*#__PURE__*/function (_VertexAttribute4) {\n  _inherits(ColorAttribute, _VertexAttribute4);\n\n  var _super4 = _createSuper(ColorAttribute);\n\n  function ColorAttribute() {\n    _classCallCheck(this, ColorAttribute);\n\n    return _super4.call(this, Shader_1.Shader.COLOR, VertexAttributeType.Float, 4);\n  }\n\n  return _createClass(ColorAttribute);\n}(VertexAttribute);\n\nexports.ColorAttribute = ColorAttribute;\n\nvar Color2Attribute = /*#__PURE__*/function (_VertexAttribute5) {\n  _inherits(Color2Attribute, _VertexAttribute5);\n\n  var _super5 = _createSuper(Color2Attribute);\n\n  function Color2Attribute() {\n    _classCallCheck(this, Color2Attribute);\n\n    return _super5.call(this, Shader_1.Shader.COLOR2, VertexAttributeType.Float, 4);\n  }\n\n  return _createClass(Color2Attribute);\n}(VertexAttribute);\n\nexports.Color2Attribute = Color2Attribute;","map":{"version":3,"names":["Object","defineProperty","exports","value","Color2Attribute","ColorAttribute","TexCoordAttribute","Position3Attribute","Position2Attribute","VertexAttribute","VertexAttributeType","Mesh","Shader_1","require","WebGL_1","context","attributes","maxVertices","maxIndices","verticesLength","dirtyVertices","indicesLength","dirtyIndices","elementsPerVertex","ManagedWebGLRenderingContext","i","length","numElements","vertices","Float32Array","indices","Uint16Array","addRestorable","size","attribute","Error","set","shader","primitiveType","drawWithOffset","offset","count","gl","update","bind","drawElements","UNSIGNED_SHORT","drawArrays","unbind","bindBuffer","ARRAY_BUFFER","verticesBuffer","attrib","location","getAttributeLocation","name","enableVertexAttribArray","vertexAttribPointer","FLOAT","ELEMENT_ARRAY_BUFFER","indicesBuffer","disableVertexAttribArray","createBuffer","bufferData","subarray","DYNAMIC_DRAW","removeRestorable","deleteBuffer","type","Shader","POSITION","Float","unit","TEXCOORDS","COLOR","COLOR2"],"sources":["D:/projects/test-game/node_modules/gdxts/dist/lib/Mesh.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Color2Attribute = exports.ColorAttribute = exports.TexCoordAttribute = exports.Position3Attribute = exports.Position2Attribute = exports.VertexAttribute = exports.VertexAttributeType = exports.Mesh = void 0;\nconst Shader_1 = require(\"./Shader\");\nconst WebGL_1 = require(\"./WebGL\");\nclass Mesh {\n    constructor(context, attributes, maxVertices, maxIndices) {\n        this.attributes = attributes;\n        this.verticesLength = 0;\n        this.dirtyVertices = false;\n        this.indicesLength = 0;\n        this.dirtyIndices = false;\n        this.elementsPerVertex = 0;\n        this.context =\n            context instanceof WebGL_1.ManagedWebGLRenderingContext\n                ? context\n                : new WebGL_1.ManagedWebGLRenderingContext(context);\n        this.elementsPerVertex = 0;\n        for (let i = 0; i < attributes.length; i++) {\n            this.elementsPerVertex += attributes[i].numElements;\n        }\n        this.vertices = new Float32Array(maxVertices * this.elementsPerVertex);\n        this.indices = new Uint16Array(maxIndices);\n        this.context.addRestorable(this);\n    }\n    getAttributes() {\n        return this.attributes;\n    }\n    maxVertices() {\n        return this.vertices.length / this.elementsPerVertex;\n    }\n    numVertices() {\n        return this.verticesLength / this.elementsPerVertex;\n    }\n    setVerticesLength(length) {\n        this.dirtyVertices = true;\n        this.verticesLength = length;\n    }\n    getVertices() {\n        return this.vertices;\n    }\n    maxIndices() {\n        return this.indices.length;\n    }\n    numIndices() {\n        return this.indicesLength;\n    }\n    setIndicesLength(length) {\n        this.dirtyIndices = true;\n        this.indicesLength = length;\n    }\n    getIndices() {\n        return this.indices;\n    }\n    getVertexSizeInFloats() {\n        let size = 0;\n        for (var i = 0; i < this.attributes.length; i++) {\n            let attribute = this.attributes[i];\n            size += attribute.numElements;\n        }\n        return size;\n    }\n    setVertices(vertices) {\n        this.dirtyVertices = true;\n        if (vertices.length > this.vertices.length)\n            throw Error(\"Mesh can't store more than \" + this.maxVertices() + \" vertices\");\n        this.vertices.set(vertices, 0);\n        this.verticesLength = vertices.length;\n    }\n    setIndices(indices) {\n        this.dirtyIndices = true;\n        if (indices.length > this.indices.length)\n            throw Error(\"Mesh can't store more than \" + this.maxIndices() + \" indices\");\n        this.indices.set(indices, 0);\n        this.indicesLength = indices.length;\n    }\n    draw(shader, primitiveType) {\n        this.drawWithOffset(shader, primitiveType, 0, this.indicesLength > 0\n            ? this.indicesLength\n            : this.verticesLength / this.elementsPerVertex);\n    }\n    drawWithOffset(shader, primitiveType, offset, count) {\n        let gl = this.context.gl;\n        if (this.dirtyVertices || this.dirtyIndices)\n            this.update();\n        this.bind(shader);\n        if (this.indicesLength > 0) {\n            gl.drawElements(primitiveType, count, gl.UNSIGNED_SHORT, offset * 2);\n        }\n        else {\n            gl.drawArrays(primitiveType, offset, count);\n        }\n        this.unbind(shader);\n    }\n    bind(shader) {\n        let gl = this.context.gl;\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.verticesBuffer);\n        let offset = 0;\n        for (let i = 0; i < this.attributes.length; i++) {\n            let attrib = this.attributes[i];\n            let location = shader.getAttributeLocation(attrib.name);\n            gl.enableVertexAttribArray(location);\n            gl.vertexAttribPointer(location, attrib.numElements, gl.FLOAT, false, this.elementsPerVertex * 4, offset * 4);\n            offset += attrib.numElements;\n        }\n        if (this.indicesLength > 0)\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n    }\n    unbind(shader) {\n        let gl = this.context.gl;\n        for (let i = 0; i < this.attributes.length; i++) {\n            let attrib = this.attributes[i];\n            let location = shader.getAttributeLocation(attrib.name);\n            gl.disableVertexAttribArray(location);\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n        if (this.indicesLength > 0)\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    }\n    update() {\n        let gl = this.context.gl;\n        if (this.dirtyVertices) {\n            if (!this.verticesBuffer) {\n                this.verticesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.verticesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this.vertices.subarray(0, this.verticesLength), gl.DYNAMIC_DRAW);\n            this.dirtyVertices = false;\n        }\n        if (this.dirtyIndices) {\n            if (!this.indicesBuffer) {\n                this.indicesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices.subarray(0, this.indicesLength), gl.DYNAMIC_DRAW);\n            this.dirtyIndices = false;\n        }\n    }\n    restore() {\n        this.verticesBuffer = null;\n        this.indicesBuffer = null;\n        this.update();\n    }\n    dispose() {\n        this.context.removeRestorable(this);\n        let gl = this.context.gl;\n        gl.deleteBuffer(this.verticesBuffer);\n        gl.deleteBuffer(this.indicesBuffer);\n    }\n}\nexports.Mesh = Mesh;\nvar VertexAttributeType;\n(function (VertexAttributeType) {\n    VertexAttributeType[VertexAttributeType[\"Float\"] = 0] = \"Float\";\n})(VertexAttributeType = exports.VertexAttributeType || (exports.VertexAttributeType = {}));\nclass VertexAttribute {\n    constructor(name, type, numElements) {\n        this.name = name;\n        this.type = type;\n        this.numElements = numElements;\n    }\n}\nexports.VertexAttribute = VertexAttribute;\nclass Position2Attribute extends VertexAttribute {\n    constructor() {\n        super(Shader_1.Shader.POSITION, VertexAttributeType.Float, 2);\n    }\n}\nexports.Position2Attribute = Position2Attribute;\nclass Position3Attribute extends VertexAttribute {\n    constructor() {\n        super(Shader_1.Shader.POSITION, VertexAttributeType.Float, 3);\n    }\n}\nexports.Position3Attribute = Position3Attribute;\nclass TexCoordAttribute extends VertexAttribute {\n    constructor(unit = 0) {\n        super(Shader_1.Shader.TEXCOORDS + (unit === 0 ? \"\" : unit), VertexAttributeType.Float, 2);\n    }\n}\nexports.TexCoordAttribute = TexCoordAttribute;\nclass ColorAttribute extends VertexAttribute {\n    constructor() {\n        super(Shader_1.Shader.COLOR, VertexAttributeType.Float, 4);\n    }\n}\nexports.ColorAttribute = ColorAttribute;\nclass Color2Attribute extends VertexAttribute {\n    constructor() {\n        super(Shader_1.Shader.COLOR2, VertexAttributeType.Float, 4);\n    }\n}\nexports.Color2Attribute = Color2Attribute;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}