import { Color, Disposable } from './Utils';
import { Texture } from './Texture';
import { Shader } from './Shader';
export declare class PolygonBatch implements Disposable {
    static QUAD_TRIANGLES: number[];
    private context;
    private drawCalls;
    private isDrawing;
    private mesh;
    private shader;
    private lastTexture;
    private verticesLength;
    private indicesLength;
    private srcColorBlend;
    private srcAlphaBlend;
    private dstBlend;
    private projectionValues;
    color: Color;
    twoColorTint: boolean;
    constructor(context: WebGLRenderingContext, twoColorTint?: boolean, maxVertices?: number);
    setColor(color: Color): void;
    setShader(shader: Shader): void;
    setProjection(projectionValues: Float32Array): void;
    begin(): void;
    setBlendMode(srcColorBlend: number, srcAlphaBlend: number, dstBlend: number): void;
    drawVerticesWithOffset(texture: Texture, vertices: ArrayLike<number>, offset: number, count: number): void;
    drawVertices(texture: Texture, vertices: ArrayLike<number>, indices?: Array<number>): void;
    flush(): void;
    end(): void;
    getDrawCalls(): number;
    dispose(): void;
    yDown: boolean;
    setYDown(yDown: boolean): void;
    draw(texture: Texture, x: number, y: number, width: number, height: number, originX?: number, originY?: number, rotation?: number, scaleX?: number, scaleY?: number, ou1?: number, ov1?: number, ou2?: number, ov2?: number, rotate?: boolean): void;
}
