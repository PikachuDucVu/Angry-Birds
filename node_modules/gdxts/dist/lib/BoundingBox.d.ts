import { Matrix4 } from './Matrix4';
import { Vector3 } from './Vector3';
export declare class BoundingBox {
    static tmpVector: Vector3;
    min: Vector3;
    max: Vector3;
    cnt: Vector3;
    dim: Vector3;
    getCenter(out: Vector3): Vector3;
    getCenterX(): number;
    getCenterY(): number;
    getCenterZ(): number;
    getCorner000(out: Vector3): Vector3;
    getCorner001(out: Vector3): Vector3;
    getCorner010(out: Vector3): Vector3;
    getCorner011(out: Vector3): Vector3;
    getCorner100(out: Vector3): Vector3;
    getCorner101(out: Vector3): Vector3;
    getCorner110(out: Vector3): Vector3;
    getCorner111(out: Vector3): Vector3;
    /** @param out The {@link Vector3} to receive the dimensions of this bounding box on all three axis.
     * @return The vector specified with the out argument */
    getDimensions(out: Vector3): Vector3;
    getWidth(): number;
    getHeight(): number;
    getDepth(): number;
    /** @param out The {@link Vector3} to receive the minimum values.
     * @return The vector specified with the out argument */
    getMin(out: Vector3): Vector3;
    /** @param out The {@link Vector3} to receive the maximum values.
     * @return The vector specified with the out argument */
    getMax(out: Vector3): Vector3;
    /** Constructs a new bounding box with the minimum and maximum vector set to zeros. */
    constructor();
    /** Sets the given bounding box.
     *
     * @param bounds The bounds.
     * @return This bounding box for chaining. */
    setFromBounds(bounds: BoundingBox): BoundingBox;
    /** Sets the given minimum and maximum vector.
     *
     * @param minimum The minimum vector
     * @param maximum The maximum vector
     * @return This bounding box for chaining. */
    set(minimum: Vector3, maximum: Vector3): BoundingBox;
    update(): void;
    /** Sets the bounding box minimum and maximum vector from the given points.
     *
     * @param points The points.
     * @return This bounding box for chaining. */
    setFromPoints(points: Vector3[]): BoundingBox;
    /** Sets the minimum and maximum vector to positive and negative infinity.
     *
     * @return This bounding box for chaining. */
    inf(): BoundingBox;
    /** Extends the bounding box to incorporate the given {@link Vector3}.
     * @param point The vector
     * @return This bounding box for chaining. */
    extPoint(point: Vector3): BoundingBox;
    /** Sets the minimum and maximum vector to zeros.
     * @return This bounding box for chaining. */
    clr(): BoundingBox;
    /** Returns whether this bounding box is valid. This means that {@link #max} is greater than or equal to {@link #min}.
     * @return True in case the bounding box is valid, false otherwise */
    isValid(): boolean;
    /** Extends this bounding box by the given bounding box.
     *
     * @param a_bounds The bounding box
     * @return This bounding box for chaining. */
    extBounds(a_bounds: BoundingBox): BoundingBox;
    /** Extends this bounding box by the given sphere.
     *
     * @param center Sphere center
     * @param radius Sphere radius
     * @return This bounding box for chaining. */
    extSphere(center: Vector3, radius: number): BoundingBox;
    /** Extends this bounding box by the given transformed bounding box.
     *
     * @param bounds The bounding box
     * @param transform The transformation matrix to apply to bounds, before using it to extend this bounding box.
     * @return This bounding box for chaining. */
    extTransformedBox(bounds: BoundingBox, transform: Matrix4): BoundingBox;
    /** Multiplies the bounding box by the given matrix. This is achieved by multiplying the 8 corner points and then calculating
     * the minimum and maximum vectors from the transformed points.
     *
     * @param transform The matrix
     * @return This bounding box for chaining. */
    mul(transform: Matrix4): BoundingBox;
    /** Returns whether the given bounding box is contained in this bounding box.
     * @param b The bounding box
     * @return Whether the given bounding box is contained */
    containsBounds(b: BoundingBox): boolean;
    /** Returns whether the given bounding box is intersecting this bounding box (at least one point in).
     * @param b The bounding box
     * @return Whether the given bounding box is intersected */
    intersects(b: BoundingBox): boolean;
    /** Returns whether the given vector is contained in this bounding box.
     * @param v The vector
     * @return Whether the vector is contained or not. */
    containsPoint(v: Vector3): boolean;
    /** Extends the bounding box by the given vector.
     *
     * @param x The x-coordinate
     * @param y The y-coordinate
     * @param z The z-coordinate
     * @return This bounding box for chaining. */
    ext(x: number, y: number, z: number): BoundingBox;
}
