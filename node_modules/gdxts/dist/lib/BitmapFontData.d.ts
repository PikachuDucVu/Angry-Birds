import { Glyph } from './Glyph';
import { GlyphRun } from './GlyphRun';
import { TextureRegion } from './TextureRegion';
export declare class BitmapFontData {
    name: string;
    regions: TextureRegion[];
    /** An array of the image paths, for multiple texture pages. */
    imagePaths: string[];
    fontFile: any;
    flipped: boolean;
    padTop: number;
    padRight: number;
    padBottom: number;
    padLeft: number;
    /** The distance from one line of text to the next. To set this value, use {@link #setLineHeight(float)}. */
    lineHeight: number;
    /** The distance from the top of most uppercase characters to the baseline. Since the drawing position is the cap height of
     * the first line, the cap height can be used to get the location of the baseline. */
    capHeight: number;
    /** The distance from the cap height to the top of the tallest glyph. */
    ascent: number;
    /** The distance from the bottom of the glyph that extends the lowest to the baseline. This number is negative. */
    descent: number;
    /** The distance to move down when \n is encountered. */
    down: number;
    /** Multiplier for the line height of blank lines. down * blankLineHeight is used as the distance to move down for a blank
     * line. */
    blankLineScale: number;
    scaleX: number;
    scaleY: number;
    markupEnabled: boolean;
    /** The amount to add to the glyph X position when drawing a cursor between glyphs. This field is not set by the BMFont
     * file, it needs to be set manually depending on how the glyphs are rendered on the backing textures. */
    cursorX: number;
    glyphs: {
        [key in number]: Glyph[];
    };
    /** The glyph to display for characters not in the font. May be null. */
    missingGlyph: Glyph;
    /** The width of the space character. */
    spaceXadvance: number;
    /** The x-height, which is the distance from the top of most lowercase characters to the baseline. */
    xHeight: number;
    /** Additional characters besides whitespace where text is wrapped. Eg, a hypen (-). */
    breakChars: string[];
    xChars: string[];
    capChars: string[];
    /** Creates an empty BitmapFontData for configuration before calling {@link #load(FileHandle, boolean)}, to subclass, or to
     * populate yourself, e.g. using stb-truetype or FreeType. */
    constructor(fontFile: string, flip: boolean);
    loadFont: (gl: WebGLRenderingContext) => Promise<void>;
    setGlyphRegion: (glyph: Glyph, region: TextureRegion) => void;
    /** Sets the line height, which is the distance from one line of text to the next. */
    setLineHeight: (height: number) => void;
    setGlyph: (ch: number, glyph: Glyph) => void;
    getFirstGlyph: () => Glyph | undefined;
    /** Returns true if the font has the glyph, or if the font has a {@link #missingGlyph}. */
    hasGlyph: (ch: string) => boolean;
    /** Returns the glyph for the specified character, or null if no such glyph exists. Note that
     * {@link #getGlyphs(GlyphRun, CharSequence, int, int, Glyph)} should be be used to shape a string of characters into a list
     * of glyphs. */
    getGlyph: (ch: string) => Glyph | undefined;
    /** Using the specified string, populates the glyphs and positions of the specified glyph run.
     * @param str Characters to convert to glyphs. Will not contain newline or color tags. May contain "[[" for an escaped left
     *           square bracket.
     * @param lastGlyph The glyph immediately before this run, or null if this is run is the first on a line of text. Used tp
     *           apply kerning between the specified glyph and the first glyph in this run. */
    getGlyphs: (run: GlyphRun, str: string, start: number, end: number, lastGlyph: Glyph | null) => void;
    /** Returns the first valid glyph index to use to wrap to the next line, starting at the specified start index and
     * (typically) moving toward the beginning of the glyphs array. */
    getWrapIndex: (glyphs: Glyph[], start: number) => number;
    isBreakChar: (c: string) => boolean;
    isWhitespace: (c: string) => boolean;
    /** Returns the image path for the texture page at the given index (the "id" in the BMFont file). */
    getImagePath: (index: number) => string;
    getImagePaths: () => string[];
    /** Scales the font by the specified amounts on both axes
     * <p>
     * Note that smoother scaling can be achieved if the texture backing the BitmapFont is using {@link TextureFilter#Linear}.
     * The default is Nearest, so use a BitmapFont constructor that takes a {@link TextureRegion}.
     * @throws IllegalArgumentException if scaleX or scaleY is zero. */
    setScale: (scaleX: number, scaleY: number) => void;
    /** Scales the font by the specified amount in both directions.
     * @see #setScale(float, float)
     * @throws IllegalArgumentException if scaleX or scaleY is zero. */
    setXYScale(scaleXY: number): void;
    /** Sets the font's scale relative to the current scale.
     * @see #setScale(float, float)
     * @throws IllegalArgumentException if the resulting scale is zero. */
    scale: (amount: number) => void;
}
