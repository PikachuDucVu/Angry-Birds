"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture = exports.TextureWrap = exports.TextureFilter = void 0;
var TextureFilter;
(function (TextureFilter) {
    TextureFilter[TextureFilter["Nearest"] = 9728] = "Nearest";
    TextureFilter[TextureFilter["Linear"] = 9729] = "Linear";
    TextureFilter[TextureFilter["MipMap"] = 9987] = "MipMap";
    TextureFilter[TextureFilter["MipMapNearestNearest"] = 9984] = "MipMapNearestNearest";
    TextureFilter[TextureFilter["MipMapLinearNearest"] = 9985] = "MipMapLinearNearest";
    TextureFilter[TextureFilter["MipMapNearestLinear"] = 9986] = "MipMapNearestLinear";
    TextureFilter[TextureFilter["MipMapLinearLinear"] = 9987] = "MipMapLinearLinear"; // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR
})(TextureFilter = exports.TextureFilter || (exports.TextureFilter = {}));
var TextureWrap;
(function (TextureWrap) {
    TextureWrap[TextureWrap["MirroredRepeat"] = 33648] = "MirroredRepeat";
    TextureWrap[TextureWrap["ClampToEdge"] = 33071] = "ClampToEdge";
    TextureWrap[TextureWrap["Repeat"] = 10497] = "Repeat"; // WebGLRenderingContext.REPEAT
})(TextureWrap = exports.TextureWrap || (exports.TextureWrap = {}));
class Texture {
    constructor(context, image, useMipMaps = false) {
        this.texture = null;
        this.boundUnit = 0;
        this.useMipMaps = false;
        this.width = 0;
        this.height = 0;
        this._image = image;
        this.context = context;
        this.useMipMaps = useMipMaps;
        this.restore();
        this.width = image.width;
        this.height = image.height;
    }
    getImage() {
        return this._image;
    }
    static load(gl, url, useMipmaps = false) {
        return new Promise(resolve => {
            const image = new Image();
            image.onload = () => {
                resolve(new Texture(gl, image, useMipmaps));
            };
            image.src = url;
        });
    }
    setFilters(minFilter, magFilter) {
        let gl = this.context;
        this.bind();
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, Texture.validateMagFilter(magFilter));
    }
    static validateMagFilter(magFilter) {
        switch (magFilter) {
            case TextureFilter.MipMap:
            case TextureFilter.MipMapLinearLinear:
            case TextureFilter.MipMapLinearNearest:
            case TextureFilter.MipMapNearestLinear:
            case TextureFilter.MipMapNearestNearest:
                return TextureFilter.Linear;
            default:
                return magFilter;
        }
    }
    setWraps(uWrap, vWrap) {
        let gl = this.context;
        this.bind();
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, uWrap);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, vWrap);
    }
    update(useMipMaps) {
        let gl = this.context;
        if (!this.texture)
            this.texture = this.context.createTexture();
        this.bind();
        if (Texture.DISABLE_UNPACK_PREMULTIPLIED_ALPHA_WEBGL)
            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, useMipMaps ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        if (useMipMaps)
            gl.generateMipmap(gl.TEXTURE_2D);
    }
    restore() {
        this.texture = null;
        this.update(this.useMipMaps);
    }
    bind(unit = 0) {
        let gl = this.context;
        this.boundUnit = unit;
        gl.activeTexture(gl.TEXTURE0 + unit);
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
    }
    unbind() {
        let gl = this.context;
        gl.activeTexture(gl.TEXTURE0 + this.boundUnit);
        gl.bindTexture(gl.TEXTURE_2D, null);
    }
    dispose() {
        let gl = this.context;
        gl.deleteTexture(this.texture);
    }
}
exports.Texture = Texture;
Texture.DISABLE_UNPACK_PREMULTIPLIED_ALPHA_WEBGL = false;
