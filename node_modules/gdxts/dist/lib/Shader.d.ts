import { Disposable, Restorable } from './Utils';
export declare class Shader implements Disposable, Restorable {
    private vertexShader;
    private fragmentShader;
    static MVP_MATRIX: string;
    static POSITION: string;
    static COLOR: string;
    static COLOR2: string;
    static TEXCOORDS: string;
    static SAMPLER: string;
    private context;
    private vs;
    private vsSource;
    private fs;
    private fsSource;
    private program;
    private tmp2x2;
    private tmp3x3;
    private tmp4x4;
    getProgram(): WebGLProgram;
    getVertexShader(): string;
    getFragmentShader(): string;
    getVertexShaderSource(): string;
    getFragmentSource(): string;
    constructor(context: WebGLRenderingContext, vertexShader: string, fragmentShader: string);
    private compile;
    private compileShader;
    private compileProgram;
    restore(): void;
    bind(): void;
    unbind(): void;
    setUniformi(uniform: string, value: number): void;
    setUniformf(uniform: string, value: number): void;
    setUniform2f(uniform: string, value: number, value2: number): void;
    setUniform3f(uniform: string, value: number, value2: number, value3: number): void;
    setUniform4f(uniform: string, value: number, value2: number, value3: number, value4: number): void;
    setUniform2x2f(uniform: string, value: ArrayLike<number>): void;
    setUniform3x3f(uniform: string, value: ArrayLike<number>): void;
    setUniform4x4f(uniform: string, value: ArrayLike<number>): void;
    getUniformLocation(uniform: string): WebGLUniformLocation;
    getAttributeLocation(attribute: string): number;
    dispose(): void;
    static newColoredTextured(context: WebGLRenderingContext): Shader;
    static newTwoColoredTextured(context: WebGLRenderingContext): Shader;
    static newColored(context: WebGLRenderingContext): Shader;
}
