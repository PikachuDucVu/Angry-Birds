import { BitmapFontCache } from './BitmapFontCache';
import { BitmapFontData } from './BitmapFontData';
import { PolygonBatch } from './PolygonBatcher';
import { TextureRegion } from './TextureRegion';
import { Color } from './Utils';
export declare class BitmapFont {
    data: BitmapFontData;
    regions: TextureRegion[];
    private cache;
    private flipped;
    integer: boolean;
    private ownsTexture;
    /** Constructs a new BitmapFont from the given {@link BitmapFontData} and array of {@link TextureRegion}. If the TextureRegion
     * is null or empty, the image path(s) will be read from the BitmapFontData. The dispose() method will not dispose the texture
     * of the region(s) if the regions array is != null and not empty.
     * @param integer If true, rendering positions will be at integer values to avoid filtering artifacts. */
    constructor(data: BitmapFontData, regions: TextureRegion[], integer: boolean);
    static load: (gl: WebGLRenderingContext, fontFile: string, flip?: boolean, interger?: boolean) => Promise<BitmapFont>;
    load: (data: BitmapFontData) => void;
    /** Draws text at the specified position.
     * @see BitmapFontCache#addText(CharSequence, float, float, int, int, float, int, boolean, String) */
    draw: (batch: PolygonBatch, str: string, x: number, y: number, targetWidth: number, halign?: number, wrap?: boolean, start?: number, end?: number, truncate?: string) => void;
    /** Returns the color of text drawn with this font. */
    getColor: () => Color;
    /** A convenience method for setting the font color. The color can also be set by modifying {@link #getColor()}. */
    getScaleX: () => number;
    getScaleY: () => number;
    /** Returns the array of TextureRegions that represents each texture page of glyphs.
     * @return the array of texture regions; modifying it may produce undesirable results */
    getRegions: () => TextureRegion[];
    /** Returns the texture page at the given index.
     * @return the texture page at the given index */
    getRegion: (index: number) => TextureRegion;
    /** Returns the line height, which is the distance from one line of text to the next. */
    getLineHeight: () => number;
    /** Returns the x-advance of the space character. */
    getSpaceXadvance: () => number;
    /** Returns the x-height, which is the distance from the top of most lowercase characters to the baseline. */
    getXHeight: () => number;
    /** Returns the cap height, which is the distance from the top of most uppercase characters to the baseline. Since the drawing
     * position is the cap height of the first line, the cap height can be used to get the location of the baseline. */
    getCapHeight: () => number;
    /** Returns the ascent, which is the distance from the cap height to the top of the tallest glyph. */
    getAscent: () => number;
    /** Returns the descent, which is the distance from the bottom of the glyph that extends the lowest to the baseline. This
     * number is negative. */
    getDescent: () => number;
    /** Returns true if this BitmapFont has been flipped for use with a y-down coordinate system. */
    isFlipped: () => boolean;
    /** Disposes the texture used by this BitmapFont's region IF this BitmapFont created the texture. */
    dispose: () => void;
    /** Makes the specified glyphs fixed width. This can be useful to make the numbers in a font fixed width. Eg, when horizontally
     * centering a score or loading percentage text, it will not jump around as different numbers are shown. */
    setFixedWidthGlyphs: (glyphs: string) => void;
    /** Specifies whether to use integer positions. Default is to use them so filtering doesn't kick in as badly. */
    setUseIntegerPositions: (integer: boolean) => void;
    /** Checks whether this font uses integer positions for drawing. */
    usesIntegerPositions: () => boolean;
    /** For expert usage -- returns the BitmapFontCache used by this font, for rendering to a sprite batch. This can be used, for
     * example, to manipulate glyph colors within a specific index.
     * @return the bitmap font cache used by this font */
    getCache: () => BitmapFontCache;
    /** Gets the underlying {@link BitmapFontData} for this BitmapFont. */
    getData: () => BitmapFontData;
    /** @return whether the texture is owned by the font, font disposes the texture itself if true */
    getOwnsTexture: () => boolean;
    /** Sets whether the font owns the texture. In case it does, the font will also dispose of the texture when {@link #dispose()}
     * is called. Use with care!
     * @param ownsTexture whether the font owns the texture */
    setOwnsTexture: (ownsTexture: boolean) => void;
    /** Creates a new BitmapFontCache for this font. Using this method allows the font to provide the BitmapFontCache
     * implementation to customize rendering.
     * <p>
     * Note this method is called by the BitmapFont constructors. If a subclass overrides this method, it will be called before the
     * subclass constructors. */
    newFontCache: () => BitmapFontCache;
}
