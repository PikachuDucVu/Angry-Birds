import { Disposable, Restorable } from './Utils';
import { Shader } from './Shader';
import { ManagedWebGLRenderingContext } from './WebGL';
export declare class Mesh implements Disposable, Restorable {
    private attributes;
    private context;
    private vertices;
    private verticesBuffer;
    private verticesLength;
    private dirtyVertices;
    private indices;
    private indicesBuffer;
    private indicesLength;
    private dirtyIndices;
    private elementsPerVertex;
    getAttributes(): VertexAttribute[];
    maxVertices(): number;
    numVertices(): number;
    setVerticesLength(length: number): void;
    getVertices(): Float32Array;
    maxIndices(): number;
    numIndices(): number;
    setIndicesLength(length: number): void;
    getIndices(): Uint16Array;
    getVertexSizeInFloats(): number;
    constructor(context: ManagedWebGLRenderingContext | WebGLRenderingContext, attributes: VertexAttribute[], maxVertices: number, maxIndices: number);
    setVertices(vertices: Array<number>): void;
    setIndices(indices: Array<number>): void;
    draw(shader: Shader, primitiveType: number): void;
    drawWithOffset(shader: Shader, primitiveType: number, offset: number, count: number): void;
    bind(shader: Shader): void;
    unbind(shader: Shader): void;
    private update;
    restore(): void;
    dispose(): void;
}
export declare enum VertexAttributeType {
    Float = 0
}
export declare class VertexAttribute {
    name: string;
    type: VertexAttributeType;
    numElements: number;
    constructor(name: string, type: VertexAttributeType, numElements: number);
}
export declare class Position2Attribute extends VertexAttribute {
    constructor();
}
export declare class Position3Attribute extends VertexAttribute {
    constructor();
}
export declare class TexCoordAttribute extends VertexAttribute {
    constructor(unit?: number);
}
export declare class ColorAttribute extends VertexAttribute {
    constructor();
}
export declare class Color2Attribute extends VertexAttribute {
    constructor();
}
