"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Matrix4 = exports.M33 = exports.M32 = exports.M31 = exports.M30 = exports.M23 = exports.M22 = exports.M21 = exports.M20 = exports.M13 = exports.M12 = exports.M11 = exports.M10 = exports.M03 = exports.M02 = exports.M01 = exports.M00 = void 0;
const Vector3_1 = require("./Vector3");
exports.M00 = 0;
exports.M01 = 4;
exports.M02 = 8;
exports.M03 = 12;
exports.M10 = 1;
exports.M11 = 5;
exports.M12 = 9;
exports.M13 = 13;
exports.M20 = 2;
exports.M21 = 6;
exports.M22 = 10;
exports.M23 = 14;
exports.M30 = 3;
exports.M31 = 7;
exports.M32 = 11;
exports.M33 = 15;
class Matrix4 {
    constructor() {
        this.temp = new Float32Array(16);
        this.values = new Float32Array(16);
        let v = this.values;
        v[exports.M00] = 1;
        v[exports.M11] = 1;
        v[exports.M22] = 1;
        v[exports.M33] = 1;
    }
    set(values) {
        this.values.set(values);
        return this;
    }
    transpose() {
        let t = this.temp;
        let v = this.values;
        t[exports.M00] = v[exports.M00];
        t[exports.M01] = v[exports.M10];
        t[exports.M02] = v[exports.M20];
        t[exports.M03] = v[exports.M30];
        t[exports.M10] = v[exports.M01];
        t[exports.M11] = v[exports.M11];
        t[exports.M12] = v[exports.M21];
        t[exports.M13] = v[exports.M31];
        t[exports.M20] = v[exports.M02];
        t[exports.M21] = v[exports.M12];
        t[exports.M22] = v[exports.M22];
        t[exports.M23] = v[exports.M32];
        t[exports.M30] = v[exports.M03];
        t[exports.M31] = v[exports.M13];
        t[exports.M32] = v[exports.M23];
        t[exports.M33] = v[exports.M33];
        return this.set(t);
    }
    identity() {
        let v = this.values;
        v[exports.M00] = 1;
        v[exports.M01] = 0;
        v[exports.M02] = 0;
        v[exports.M03] = 0;
        v[exports.M10] = 0;
        v[exports.M11] = 1;
        v[exports.M12] = 0;
        v[exports.M13] = 0;
        v[exports.M20] = 0;
        v[exports.M21] = 0;
        v[exports.M22] = 1;
        v[exports.M23] = 0;
        v[exports.M30] = 0;
        v[exports.M31] = 0;
        v[exports.M32] = 0;
        v[exports.M33] = 1;
        return this;
    }
    invert() {
        let v = this.values;
        let t = this.temp;
        let l_det = v[exports.M30] * v[exports.M21] * v[exports.M12] * v[exports.M03] -
            v[exports.M20] * v[exports.M31] * v[exports.M12] * v[exports.M03] -
            v[exports.M30] * v[exports.M11] * v[exports.M22] * v[exports.M03] +
            v[exports.M10] * v[exports.M31] * v[exports.M22] * v[exports.M03] +
            v[exports.M20] * v[exports.M11] * v[exports.M32] * v[exports.M03] -
            v[exports.M10] * v[exports.M21] * v[exports.M32] * v[exports.M03] -
            v[exports.M30] * v[exports.M21] * v[exports.M02] * v[exports.M13] +
            v[exports.M20] * v[exports.M31] * v[exports.M02] * v[exports.M13] +
            v[exports.M30] * v[exports.M01] * v[exports.M22] * v[exports.M13] -
            v[exports.M00] * v[exports.M31] * v[exports.M22] * v[exports.M13] -
            v[exports.M20] * v[exports.M01] * v[exports.M32] * v[exports.M13] +
            v[exports.M00] * v[exports.M21] * v[exports.M32] * v[exports.M13] +
            v[exports.M30] * v[exports.M11] * v[exports.M02] * v[exports.M23] -
            v[exports.M10] * v[exports.M31] * v[exports.M02] * v[exports.M23] -
            v[exports.M30] * v[exports.M01] * v[exports.M12] * v[exports.M23] +
            v[exports.M00] * v[exports.M31] * v[exports.M12] * v[exports.M23] +
            v[exports.M10] * v[exports.M01] * v[exports.M32] * v[exports.M23] -
            v[exports.M00] * v[exports.M11] * v[exports.M32] * v[exports.M23] -
            v[exports.M20] * v[exports.M11] * v[exports.M02] * v[exports.M33] +
            v[exports.M10] * v[exports.M21] * v[exports.M02] * v[exports.M33] +
            v[exports.M20] * v[exports.M01] * v[exports.M12] * v[exports.M33] -
            v[exports.M00] * v[exports.M21] * v[exports.M12] * v[exports.M33] -
            v[exports.M10] * v[exports.M01] * v[exports.M22] * v[exports.M33] +
            v[exports.M00] * v[exports.M11] * v[exports.M22] * v[exports.M33];
        if (l_det === 0)
            throw new Error('non-invertible matrix');
        let inv_det = 1.0 / l_det;
        t[exports.M00] =
            v[exports.M12] * v[exports.M23] * v[exports.M31] -
                v[exports.M13] * v[exports.M22] * v[exports.M31] +
                v[exports.M13] * v[exports.M21] * v[exports.M32] -
                v[exports.M11] * v[exports.M23] * v[exports.M32] -
                v[exports.M12] * v[exports.M21] * v[exports.M33] +
                v[exports.M11] * v[exports.M22] * v[exports.M33];
        t[exports.M01] =
            v[exports.M03] * v[exports.M22] * v[exports.M31] -
                v[exports.M02] * v[exports.M23] * v[exports.M31] -
                v[exports.M03] * v[exports.M21] * v[exports.M32] +
                v[exports.M01] * v[exports.M23] * v[exports.M32] +
                v[exports.M02] * v[exports.M21] * v[exports.M33] -
                v[exports.M01] * v[exports.M22] * v[exports.M33];
        t[exports.M02] =
            v[exports.M02] * v[exports.M13] * v[exports.M31] -
                v[exports.M03] * v[exports.M12] * v[exports.M31] +
                v[exports.M03] * v[exports.M11] * v[exports.M32] -
                v[exports.M01] * v[exports.M13] * v[exports.M32] -
                v[exports.M02] * v[exports.M11] * v[exports.M33] +
                v[exports.M01] * v[exports.M12] * v[exports.M33];
        t[exports.M03] =
            v[exports.M03] * v[exports.M12] * v[exports.M21] -
                v[exports.M02] * v[exports.M13] * v[exports.M21] -
                v[exports.M03] * v[exports.M11] * v[exports.M22] +
                v[exports.M01] * v[exports.M13] * v[exports.M22] +
                v[exports.M02] * v[exports.M11] * v[exports.M23] -
                v[exports.M01] * v[exports.M12] * v[exports.M23];
        t[exports.M10] =
            v[exports.M13] * v[exports.M22] * v[exports.M30] -
                v[exports.M12] * v[exports.M23] * v[exports.M30] -
                v[exports.M13] * v[exports.M20] * v[exports.M32] +
                v[exports.M10] * v[exports.M23] * v[exports.M32] +
                v[exports.M12] * v[exports.M20] * v[exports.M33] -
                v[exports.M10] * v[exports.M22] * v[exports.M33];
        t[exports.M11] =
            v[exports.M02] * v[exports.M23] * v[exports.M30] -
                v[exports.M03] * v[exports.M22] * v[exports.M30] +
                v[exports.M03] * v[exports.M20] * v[exports.M32] -
                v[exports.M00] * v[exports.M23] * v[exports.M32] -
                v[exports.M02] * v[exports.M20] * v[exports.M33] +
                v[exports.M00] * v[exports.M22] * v[exports.M33];
        t[exports.M12] =
            v[exports.M03] * v[exports.M12] * v[exports.M30] -
                v[exports.M02] * v[exports.M13] * v[exports.M30] -
                v[exports.M03] * v[exports.M10] * v[exports.M32] +
                v[exports.M00] * v[exports.M13] * v[exports.M32] +
                v[exports.M02] * v[exports.M10] * v[exports.M33] -
                v[exports.M00] * v[exports.M12] * v[exports.M33];
        t[exports.M13] =
            v[exports.M02] * v[exports.M13] * v[exports.M20] -
                v[exports.M03] * v[exports.M12] * v[exports.M20] +
                v[exports.M03] * v[exports.M10] * v[exports.M22] -
                v[exports.M00] * v[exports.M13] * v[exports.M22] -
                v[exports.M02] * v[exports.M10] * v[exports.M23] +
                v[exports.M00] * v[exports.M12] * v[exports.M23];
        t[exports.M20] =
            v[exports.M11] * v[exports.M23] * v[exports.M30] -
                v[exports.M13] * v[exports.M21] * v[exports.M30] +
                v[exports.M13] * v[exports.M20] * v[exports.M31] -
                v[exports.M10] * v[exports.M23] * v[exports.M31] -
                v[exports.M11] * v[exports.M20] * v[exports.M33] +
                v[exports.M10] * v[exports.M21] * v[exports.M33];
        t[exports.M21] =
            v[exports.M03] * v[exports.M21] * v[exports.M30] -
                v[exports.M01] * v[exports.M23] * v[exports.M30] -
                v[exports.M03] * v[exports.M20] * v[exports.M31] +
                v[exports.M00] * v[exports.M23] * v[exports.M31] +
                v[exports.M01] * v[exports.M20] * v[exports.M33] -
                v[exports.M00] * v[exports.M21] * v[exports.M33];
        t[exports.M22] =
            v[exports.M01] * v[exports.M13] * v[exports.M30] -
                v[exports.M03] * v[exports.M11] * v[exports.M30] +
                v[exports.M03] * v[exports.M10] * v[exports.M31] -
                v[exports.M00] * v[exports.M13] * v[exports.M31] -
                v[exports.M01] * v[exports.M10] * v[exports.M33] +
                v[exports.M00] * v[exports.M11] * v[exports.M33];
        t[exports.M23] =
            v[exports.M03] * v[exports.M11] * v[exports.M20] -
                v[exports.M01] * v[exports.M13] * v[exports.M20] -
                v[exports.M03] * v[exports.M10] * v[exports.M21] +
                v[exports.M00] * v[exports.M13] * v[exports.M21] +
                v[exports.M01] * v[exports.M10] * v[exports.M23] -
                v[exports.M00] * v[exports.M11] * v[exports.M23];
        t[exports.M30] =
            v[exports.M12] * v[exports.M21] * v[exports.M30] -
                v[exports.M11] * v[exports.M22] * v[exports.M30] -
                v[exports.M12] * v[exports.M20] * v[exports.M31] +
                v[exports.M10] * v[exports.M22] * v[exports.M31] +
                v[exports.M11] * v[exports.M20] * v[exports.M32] -
                v[exports.M10] * v[exports.M21] * v[exports.M32];
        t[exports.M31] =
            v[exports.M01] * v[exports.M22] * v[exports.M30] -
                v[exports.M02] * v[exports.M21] * v[exports.M30] +
                v[exports.M02] * v[exports.M20] * v[exports.M31] -
                v[exports.M00] * v[exports.M22] * v[exports.M31] -
                v[exports.M01] * v[exports.M20] * v[exports.M32] +
                v[exports.M00] * v[exports.M21] * v[exports.M32];
        t[exports.M32] =
            v[exports.M02] * v[exports.M11] * v[exports.M30] -
                v[exports.M01] * v[exports.M12] * v[exports.M30] -
                v[exports.M02] * v[exports.M10] * v[exports.M31] +
                v[exports.M00] * v[exports.M12] * v[exports.M31] +
                v[exports.M01] * v[exports.M10] * v[exports.M32] -
                v[exports.M00] * v[exports.M11] * v[exports.M32];
        t[exports.M33] =
            v[exports.M01] * v[exports.M12] * v[exports.M20] -
                v[exports.M02] * v[exports.M11] * v[exports.M20] +
                v[exports.M02] * v[exports.M10] * v[exports.M21] -
                v[exports.M00] * v[exports.M12] * v[exports.M21] -
                v[exports.M01] * v[exports.M10] * v[exports.M22] +
                v[exports.M00] * v[exports.M11] * v[exports.M22];
        v[exports.M00] = t[exports.M00] * inv_det;
        v[exports.M01] = t[exports.M01] * inv_det;
        v[exports.M02] = t[exports.M02] * inv_det;
        v[exports.M03] = t[exports.M03] * inv_det;
        v[exports.M10] = t[exports.M10] * inv_det;
        v[exports.M11] = t[exports.M11] * inv_det;
        v[exports.M12] = t[exports.M12] * inv_det;
        v[exports.M13] = t[exports.M13] * inv_det;
        v[exports.M20] = t[exports.M20] * inv_det;
        v[exports.M21] = t[exports.M21] * inv_det;
        v[exports.M22] = t[exports.M22] * inv_det;
        v[exports.M23] = t[exports.M23] * inv_det;
        v[exports.M30] = t[exports.M30] * inv_det;
        v[exports.M31] = t[exports.M31] * inv_det;
        v[exports.M32] = t[exports.M32] * inv_det;
        v[exports.M33] = t[exports.M33] * inv_det;
        return this;
    }
    determinant() {
        let v = this.values;
        return (v[exports.M30] * v[exports.M21] * v[exports.M12] * v[exports.M03] -
            v[exports.M20] * v[exports.M31] * v[exports.M12] * v[exports.M03] -
            v[exports.M30] * v[exports.M11] * v[exports.M22] * v[exports.M03] +
            v[exports.M10] * v[exports.M31] * v[exports.M22] * v[exports.M03] +
            v[exports.M20] * v[exports.M11] * v[exports.M32] * v[exports.M03] -
            v[exports.M10] * v[exports.M21] * v[exports.M32] * v[exports.M03] -
            v[exports.M30] * v[exports.M21] * v[exports.M02] * v[exports.M13] +
            v[exports.M20] * v[exports.M31] * v[exports.M02] * v[exports.M13] +
            v[exports.M30] * v[exports.M01] * v[exports.M22] * v[exports.M13] -
            v[exports.M00] * v[exports.M31] * v[exports.M22] * v[exports.M13] -
            v[exports.M20] * v[exports.M01] * v[exports.M32] * v[exports.M13] +
            v[exports.M00] * v[exports.M21] * v[exports.M32] * v[exports.M13] +
            v[exports.M30] * v[exports.M11] * v[exports.M02] * v[exports.M23] -
            v[exports.M10] * v[exports.M31] * v[exports.M02] * v[exports.M23] -
            v[exports.M30] * v[exports.M01] * v[exports.M12] * v[exports.M23] +
            v[exports.M00] * v[exports.M31] * v[exports.M12] * v[exports.M23] +
            v[exports.M10] * v[exports.M01] * v[exports.M32] * v[exports.M23] -
            v[exports.M00] * v[exports.M11] * v[exports.M32] * v[exports.M23] -
            v[exports.M20] * v[exports.M11] * v[exports.M02] * v[exports.M33] +
            v[exports.M10] * v[exports.M21] * v[exports.M02] * v[exports.M33] +
            v[exports.M20] * v[exports.M01] * v[exports.M12] * v[exports.M33] -
            v[exports.M00] * v[exports.M21] * v[exports.M12] * v[exports.M33] -
            v[exports.M10] * v[exports.M01] * v[exports.M22] * v[exports.M33] +
            v[exports.M00] * v[exports.M11] * v[exports.M22] * v[exports.M33]);
    }
    translate(x, y, z) {
        let v = this.values;
        v[exports.M03] += x;
        v[exports.M13] += y;
        v[exports.M23] += z;
        return this;
    }
    copy() {
        return new Matrix4().set(this.values);
    }
    projection(near, far, fovy, aspectRatio) {
        this.identity();
        let l_fd = 1.0 / Math.tan((fovy * (Math.PI / 180)) / 2.0);
        let l_a1 = (far + near) / (near - far);
        let l_a2 = (2 * far * near) / (near - far);
        let v = this.values;
        v[exports.M00] = l_fd / aspectRatio;
        v[exports.M10] = 0;
        v[exports.M20] = 0;
        v[exports.M30] = 0;
        v[exports.M01] = 0;
        v[exports.M11] = l_fd;
        v[exports.M21] = 0;
        v[exports.M31] = 0;
        v[exports.M02] = 0;
        v[exports.M12] = 0;
        v[exports.M22] = l_a1;
        v[exports.M32] = -1;
        v[exports.M03] = 0;
        v[exports.M13] = 0;
        v[exports.M23] = l_a2;
        v[exports.M33] = 0;
        return this;
    }
    ortho2d(x, y, width, height) {
        return this.ortho(x, x + width, y, y + height, 0, 1);
    }
    ortho(left, right, bottom, top, near, far) {
        this.identity();
        let x_orth = 2 / (right - left);
        let y_orth = 2 / (top - bottom);
        let z_orth = -2 / (far - near);
        let tx = -(right + left) / (right - left);
        let ty = -(top + bottom) / (top - bottom);
        let tz = -(far + near) / (far - near);
        let v = this.values;
        v[exports.M00] = x_orth;
        v[exports.M10] = 0;
        v[exports.M20] = 0;
        v[exports.M30] = 0;
        v[exports.M01] = 0;
        v[exports.M11] = y_orth;
        v[exports.M21] = 0;
        v[exports.M31] = 0;
        v[exports.M02] = 0;
        v[exports.M12] = 0;
        v[exports.M22] = z_orth;
        v[exports.M32] = 0;
        v[exports.M03] = tx;
        v[exports.M13] = ty;
        v[exports.M23] = tz;
        v[exports.M33] = 1;
        return this;
    }
    multiply(matrix) {
        let t = this.temp;
        let v = this.values;
        let m = matrix.values;
        t[exports.M00] = v[exports.M00] * m[exports.M00] + v[exports.M01] * m[exports.M10] + v[exports.M02] * m[exports.M20] + v[exports.M03] * m[exports.M30];
        t[exports.M01] = v[exports.M00] * m[exports.M01] + v[exports.M01] * m[exports.M11] + v[exports.M02] * m[exports.M21] + v[exports.M03] * m[exports.M31];
        t[exports.M02] = v[exports.M00] * m[exports.M02] + v[exports.M01] * m[exports.M12] + v[exports.M02] * m[exports.M22] + v[exports.M03] * m[exports.M32];
        t[exports.M03] = v[exports.M00] * m[exports.M03] + v[exports.M01] * m[exports.M13] + v[exports.M02] * m[exports.M23] + v[exports.M03] * m[exports.M33];
        t[exports.M10] = v[exports.M10] * m[exports.M00] + v[exports.M11] * m[exports.M10] + v[exports.M12] * m[exports.M20] + v[exports.M13] * m[exports.M30];
        t[exports.M11] = v[exports.M10] * m[exports.M01] + v[exports.M11] * m[exports.M11] + v[exports.M12] * m[exports.M21] + v[exports.M13] * m[exports.M31];
        t[exports.M12] = v[exports.M10] * m[exports.M02] + v[exports.M11] * m[exports.M12] + v[exports.M12] * m[exports.M22] + v[exports.M13] * m[exports.M32];
        t[exports.M13] = v[exports.M10] * m[exports.M03] + v[exports.M11] * m[exports.M13] + v[exports.M12] * m[exports.M23] + v[exports.M13] * m[exports.M33];
        t[exports.M20] = v[exports.M20] * m[exports.M00] + v[exports.M21] * m[exports.M10] + v[exports.M22] * m[exports.M20] + v[exports.M23] * m[exports.M30];
        t[exports.M21] = v[exports.M20] * m[exports.M01] + v[exports.M21] * m[exports.M11] + v[exports.M22] * m[exports.M21] + v[exports.M23] * m[exports.M31];
        t[exports.M22] = v[exports.M20] * m[exports.M02] + v[exports.M21] * m[exports.M12] + v[exports.M22] * m[exports.M22] + v[exports.M23] * m[exports.M32];
        t[exports.M23] = v[exports.M20] * m[exports.M03] + v[exports.M21] * m[exports.M13] + v[exports.M22] * m[exports.M23] + v[exports.M23] * m[exports.M33];
        t[exports.M30] = v[exports.M30] * m[exports.M00] + v[exports.M31] * m[exports.M10] + v[exports.M32] * m[exports.M20] + v[exports.M33] * m[exports.M30];
        t[exports.M31] = v[exports.M30] * m[exports.M01] + v[exports.M31] * m[exports.M11] + v[exports.M32] * m[exports.M21] + v[exports.M33] * m[exports.M31];
        t[exports.M32] = v[exports.M30] * m[exports.M02] + v[exports.M31] * m[exports.M12] + v[exports.M32] * m[exports.M22] + v[exports.M33] * m[exports.M32];
        t[exports.M33] = v[exports.M30] * m[exports.M03] + v[exports.M31] * m[exports.M13] + v[exports.M32] * m[exports.M23] + v[exports.M33] * m[exports.M33];
        return this.set(this.temp);
    }
    multiplyLeft(matrix) {
        let t = this.temp;
        let v = this.values;
        let m = matrix.values;
        t[exports.M00] = m[exports.M00] * v[exports.M00] + m[exports.M01] * v[exports.M10] + m[exports.M02] * v[exports.M20] + m[exports.M03] * v[exports.M30];
        t[exports.M01] = m[exports.M00] * v[exports.M01] + m[exports.M01] * v[exports.M11] + m[exports.M02] * v[exports.M21] + m[exports.M03] * v[exports.M31];
        t[exports.M02] = m[exports.M00] * v[exports.M02] + m[exports.M01] * v[exports.M12] + m[exports.M02] * v[exports.M22] + m[exports.M03] * v[exports.M32];
        t[exports.M03] = m[exports.M00] * v[exports.M03] + m[exports.M01] * v[exports.M13] + m[exports.M02] * v[exports.M23] + m[exports.M03] * v[exports.M33];
        t[exports.M10] = m[exports.M10] * v[exports.M00] + m[exports.M11] * v[exports.M10] + m[exports.M12] * v[exports.M20] + m[exports.M13] * v[exports.M30];
        t[exports.M11] = m[exports.M10] * v[exports.M01] + m[exports.M11] * v[exports.M11] + m[exports.M12] * v[exports.M21] + m[exports.M13] * v[exports.M31];
        t[exports.M12] = m[exports.M10] * v[exports.M02] + m[exports.M11] * v[exports.M12] + m[exports.M12] * v[exports.M22] + m[exports.M13] * v[exports.M32];
        t[exports.M13] = m[exports.M10] * v[exports.M03] + m[exports.M11] * v[exports.M13] + m[exports.M12] * v[exports.M23] + m[exports.M13] * v[exports.M33];
        t[exports.M20] = m[exports.M20] * v[exports.M00] + m[exports.M21] * v[exports.M10] + m[exports.M22] * v[exports.M20] + m[exports.M23] * v[exports.M30];
        t[exports.M21] = m[exports.M20] * v[exports.M01] + m[exports.M21] * v[exports.M11] + m[exports.M22] * v[exports.M21] + m[exports.M23] * v[exports.M31];
        t[exports.M22] = m[exports.M20] * v[exports.M02] + m[exports.M21] * v[exports.M12] + m[exports.M22] * v[exports.M22] + m[exports.M23] * v[exports.M32];
        t[exports.M23] = m[exports.M20] * v[exports.M03] + m[exports.M21] * v[exports.M13] + m[exports.M22] * v[exports.M23] + m[exports.M23] * v[exports.M33];
        t[exports.M30] = m[exports.M30] * v[exports.M00] + m[exports.M31] * v[exports.M10] + m[exports.M32] * v[exports.M20] + m[exports.M33] * v[exports.M30];
        t[exports.M31] = m[exports.M30] * v[exports.M01] + m[exports.M31] * v[exports.M11] + m[exports.M32] * v[exports.M21] + m[exports.M33] * v[exports.M31];
        t[exports.M32] = m[exports.M30] * v[exports.M02] + m[exports.M31] * v[exports.M12] + m[exports.M32] * v[exports.M22] + m[exports.M33] * v[exports.M32];
        t[exports.M33] = m[exports.M30] * v[exports.M03] + m[exports.M31] * v[exports.M13] + m[exports.M32] * v[exports.M23] + m[exports.M33] * v[exports.M33];
        return this.set(this.temp);
    }
    lookAt(position, direction, up) {
        Matrix4.initTemps();
        let xAxis = Matrix4.xAxis, yAxis = Matrix4.yAxis, zAxis = Matrix4.zAxis;
        zAxis.setFrom(direction).normalize();
        xAxis.setFrom(direction).normalize();
        xAxis.cross(up).normalize();
        yAxis.setFrom(xAxis).cross(zAxis).normalize();
        this.identity();
        let val = this.values;
        val[exports.M00] = xAxis.x;
        val[exports.M01] = xAxis.y;
        val[exports.M02] = xAxis.z;
        val[exports.M10] = yAxis.x;
        val[exports.M11] = yAxis.y;
        val[exports.M12] = yAxis.z;
        val[exports.M20] = -zAxis.x;
        val[exports.M21] = -zAxis.y;
        val[exports.M22] = -zAxis.z;
        Matrix4.tmpMatrix.identity();
        Matrix4.tmpMatrix.values[exports.M03] = -position.x;
        Matrix4.tmpMatrix.values[exports.M13] = -position.y;
        Matrix4.tmpMatrix.values[exports.M23] = -position.z;
        this.multiply(Matrix4.tmpMatrix);
        return this;
    }
    static initTemps() {
        if (Matrix4.xAxis === null)
            Matrix4.xAxis = new Vector3_1.Vector3();
        if (Matrix4.yAxis === null)
            Matrix4.yAxis = new Vector3_1.Vector3();
        if (Matrix4.zAxis === null)
            Matrix4.zAxis = new Vector3_1.Vector3();
    }
}
exports.Matrix4 = Matrix4;
Matrix4.xAxis = null;
Matrix4.yAxis = null;
Matrix4.zAxis = null;
Matrix4.tmpMatrix = new Matrix4();
