"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vector3 = void 0;
const Matrix4_1 = require("./Matrix4");
class Vector3 {
    constructor(x = 0, y = 0, z = 0) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.x = x;
        this.y = y;
        this.z = z;
    }
    setFrom(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        return this;
    }
    set(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    add(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this;
    }
    sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this;
    }
    scale(s) {
        this.x *= s;
        this.y *= s;
        this.z *= s;
        return this;
    }
    normalize() {
        let len = this.length();
        if (len === 0)
            return this;
        len = 1 / len;
        this.x *= len;
        this.y *= len;
        this.z *= len;
        return this;
    }
    cross(v) {
        return this.set(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
    }
    multiply(matrix) {
        let l_mat = matrix.values;
        return this.set(this.x * l_mat[Matrix4_1.M00] + this.y * l_mat[Matrix4_1.M01] + this.z * l_mat[Matrix4_1.M02] + l_mat[Matrix4_1.M03], this.x * l_mat[Matrix4_1.M10] + this.y * l_mat[Matrix4_1.M11] + this.z * l_mat[Matrix4_1.M12] + l_mat[Matrix4_1.M13], this.x * l_mat[Matrix4_1.M20] + this.y * l_mat[Matrix4_1.M21] + this.z * l_mat[Matrix4_1.M22] + l_mat[Matrix4_1.M23]);
    }
    project(matrix) {
        let l_mat = matrix.values;
        let l_w = 1 / (this.x * l_mat[Matrix4_1.M30] + this.y * l_mat[Matrix4_1.M31] + this.z * l_mat[Matrix4_1.M32] + l_mat[Matrix4_1.M33]);
        return this.set((this.x * l_mat[Matrix4_1.M00] + this.y * l_mat[Matrix4_1.M01] + this.z * l_mat[Matrix4_1.M02] + l_mat[Matrix4_1.M03]) * l_w, (this.x * l_mat[Matrix4_1.M10] + this.y * l_mat[Matrix4_1.M11] + this.z * l_mat[Matrix4_1.M12] + l_mat[Matrix4_1.M13]) * l_w, (this.x * l_mat[Matrix4_1.M20] + this.y * l_mat[Matrix4_1.M21] + this.z * l_mat[Matrix4_1.M22] + l_mat[Matrix4_1.M23]) * l_w);
    }
    unproject(output, invMatrix, viewX, viewY, viewWidth, viewHeight) {
        let { x, y, z } = this;
        x = x - viewX;
        y = viewHeight - y - 1;
        y = y - viewY;
        output.set((2 * x) / viewWidth - 1, (2 * y) / viewHeight - 1, 2 * z - 1);
        output.project(invMatrix);
        return output;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    distance(v) {
        let a = v.x - this.x;
        let b = v.y - this.y;
        let c = v.z - this.z;
        return Math.sqrt(a * a + b * b + c * c);
    }
}
exports.Vector3 = Vector3;
