import { BitmapFont } from './BitmapFont';
import { GlyphRun } from './GlyphRun';
import { Color, Pool, Poolable } from './Utils';
export declare class GlyphLayout implements Poolable {
    epsilon: number;
    glyphRunPool: Pool<GlyphRun>;
    colorStack: number[];
    runs: GlyphRun[];
    colors: number[];
    glyphCount: number;
    width: number;
    height: number;
    constructor(font: BitmapFont, str: string, start: number, end: number, color: Color, targetWidth: number, hAlign: number, wrap: boolean, truncate?: string);
    setText: (font: BitmapFont, str: string, start: number, end: number, color: Color, targetWidth: number, hAlign: number, wrap: boolean, truncate?: string) => void;
    private calculateWidths;
    private alignRuns;
    /** @param truncate May be empty string. */
    private truncate;
    /** Breaks a run into two runs at the specified wrapIndex.
     * @return May be null if second run is all whitespace. */
    private wrap;
    /** Sets the xadvance of the last glyph to use its width instead of xadvance. */
    private setLastGlyphXAdvance;
    /** Returns the distance from the glyph's drawing position to the right edge of the glyph. */
    private getGlyphWidth;
    /** Returns an X offset for the first glyph so when drawn, none of it is left of the line's drawing position. */
    private getLineOffset;
    reset: () => void;
}
