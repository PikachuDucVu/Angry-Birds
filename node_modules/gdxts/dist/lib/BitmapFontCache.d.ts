import { BitmapFont } from './BitmapFont';
import { GlyphLayout } from './GlyphLayout';
import { PolygonBatch } from './PolygonBatcher';
import { Color } from './Utils';
export declare class BitmapFontCache {
    private tempColor;
    private drawingTexts;
    private font;
    private integer;
    private layouts;
    private pooledLayouts;
    private glyphCount;
    private x;
    private y;
    private color;
    private currentTint;
    /** Vertex data per page. */
    private pageVertices;
    /** Number of vertex data entries per page. */
    private idx;
    /** For each page, an array with a value for each glyph from that page, where the value is the index of the character in the
     * full text being cached. */
    private pageGlyphIndices;
    /** Used internally to ensure a correct capacity for multi-page font vertex data. */
    private tempGlyphCount;
    /** @param integer If true, rendering positions will be at integer values to avoid filtering artifacts. */
    constructor(font: BitmapFont, integer: boolean);
    /** Sets the position of the text, relative to the position when the cached text was created.
     * @param x The x coordinate
     * @param y The y coordinate */
    setPosition: (x: number, y: number) => void;
    /** Sets the position of the text, relative to its current position.
     * @param xAmount The amount in x to move the text
     * @param yAmount The amount in y to move the text */
    translate: (xAmount: number, yAmount: number) => void;
    /** Tints all text currently in the cache. Does not affect subsequently added text. */
    /** Sets the alpha component of all text currently in the cache. Does not affect subsequently added text. */
    setColors: (r: number, g: number, b: number, a: number) => void;
    /** Returns the color used for subsequently added text. Modifying the color affects text subsequently added to the cache, but
     * does not affect existing text currently in the cache. */
    getColor: () => Color;
    /** A convenience method for setting the cache color. The color can also be set by modifying {@link #getColor()}. */
    setColor: (r: number, g: number, b: number, a: number) => void;
    draw(batch: PolygonBatch): void;
    /** Removes all glyphs in the cache. */
    clear: () => void;
    private requireGlyphs;
    private requirePageGlyphs;
    private setPageCount;
    private addToCache;
    private addGlyph;
    setText: (str: string, x: number, y: number, start: number, end: number, targetWidth: number, halign: number, wrap: boolean, truncate?: string) => GlyphLayout;
    setTextToCache: (layout: GlyphLayout, x: number, y: number) => void;
    addText: (str: string, x: number, y: number, start: number, end: number, targetWidth: number, halign: number, wrap: boolean, truncate?: string) => GlyphLayout;
    addTextToCache: (layout: GlyphLayout, x: number, y: number) => void;
    /** Returns the x position of the cached string, relative to the position when the string was cached. */
    getX: () => number;
    /** Returns the y position of the cached string, relative to the position when the string was cached. */
    getY: () => number;
    getFont: () => BitmapFont;
    setUseIntegerPositions: (use: boolean) => void;
    /** @return whether this font uses integer positions for drawing. */
    usesIntegerPositions: () => boolean;
    getVertices: (page: number) => number[];
    getVertexCount: (page: number) => number;
    getLayouts: () => GlyphLayout[];
}
