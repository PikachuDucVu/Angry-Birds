"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextureRegion = void 0;
class TextureRegion {
    constructor(tex, x, y, width, height, extraData, invTexWidth, invTexHeight, rotate = false) {
        this.name = null;
        this.index = 0;
        this.texture = null;
        this.regionX = 0;
        this.regionY = 0;
        this.width = 0;
        this.height = 0;
        this.invTexWidth = 0;
        this.invTexHeight = 0;
        this.originalWidth = 0;
        this.originalHeight = 0;
        this.offsetX = 0;
        this.offsetY = 0;
        this.u = 0;
        this.v = 0;
        this.u2 = 0;
        this.v2 = 0;
        this.rotated = false;
        if (!invTexWidth || !invTexHeight) {
            invTexWidth = 1 / tex.width;
            invTexHeight = 1 / tex.height;
        }
        const u = x * invTexWidth;
        const v = (y + height) * invTexHeight;
        const u2 = (x + width) * invTexWidth;
        const v2 = y * invTexHeight;
        this.texture = tex;
        this.regionX = x;
        this.regionY = y;
        this.width = width;
        this.height = height;
        this.originalWidth = width;
        this.originalHeight = height;
        this.offsetX = 0;
        this.offsetY = 0;
        this.u = u;
        this.v = v;
        this.u2 = u2;
        this.v2 = v2;
        this.rotated = rotate;
        for (let key in extraData) {
            this[key] = extraData[key];
        }
    }
    static splitTexture(texture, cols, rows) {
        const { width, height } = texture;
        const regionWidth = width / cols;
        const regionHeight = height / rows;
        const regions = [];
        for (let y = 0; y < rows; y++) {
            for (let x = 0; x < cols; x++) {
                regions.push(new TextureRegion(texture, x * regionWidth, y * regionHeight, regionWidth, regionHeight, {}));
            }
        }
        return regions;
    }
    draw(batch, x, y, width, height, originX = 0, originY = 0, rotation = 0, scaleX = 1, scaleY = 1) {
        const { originalWidth, originalHeight, offsetX, offsetY, width: regionWidth, height: regionHeight } = this;
        const xRatio = width / originalWidth;
        const yRatio = height / originalHeight;
        const drawWidth = regionWidth * xRatio;
        const drawHeight = regionHeight * yRatio;
        const drawX = x + offsetX * xRatio;
        let drawY = 0;
        if (batch.yDown) {
            drawY = y + height - offsetY * yRatio - drawHeight;
        }
        else {
            drawY = y + offsetY * yRatio;
        }
        originX = originX - (drawX - x);
        originY = originY - (drawY - y);
        batch.draw(this.texture, drawX, drawY, drawWidth, drawHeight, originX, originY, rotation, scaleX, scaleY, this.u, this.v, this.u2, this.v2, this.rotated);
    }
}
exports.TextureRegion = TextureRegion;
