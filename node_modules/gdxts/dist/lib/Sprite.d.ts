import { PolygonBatch } from './PolygonBatcher';
import { TextureRegion } from './TextureRegion';
import { Color, Rectangle } from './Utils';
import { Vector2 } from './Vector2';
/**
 * An unoptimized version of Sprite. Always calculate all vertices, never update partially. Will improve later after refactoring the SpriteBatch.
 */
export declare class Sprite {
    region: TextureRegion;
    dirty: boolean;
    position: Vector2;
    size: Vector2;
    origin: Vector2;
    scale: Vector2;
    color: Color;
    rotation: number;
    vertices: Float32Array;
    constructor(region: TextureRegion);
    set(sprite: Sprite): void;
    setBounds(x: number, y: number, width: number, height: number): void;
    setSize(width: number, height: number): void;
    setPosition(x: number, y: number): void;
    setOriginBasedPosition(x: number, y: number): void;
    setX(x: number): void;
    setY(y: number): void;
    /** Sets the x position so that it is centered on the given x parameter */
    setCenterX(x: number): void;
    /** Sets the y position so that it is centered on the given y parameter */
    setCenterY(y: number): void;
    /** Sets the position so that the sprite is centered on (x, y) */
    setCenter(x: number, y: number): void;
    /** Sets the x position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are
     * changed, it is slightly more efficient to translate after those operations. */
    translateX(xAmount: number): void;
    /** Sets the y position relative to the current position where the sprite will be drawn. If origin, rotation, or scale are
     * changed, it is slightly more efficient to translate after those operations. */
    translateY(yAmount: number): void;
    translate(xAmount: number, yAmount: number): void;
    /** Sets the color used to tint this sprite. Default is {@link Color#WHITE}. */
    setColor(tint: Color): void;
    /** Sets the alpha portion of the color used to tint this sprite. */
    setAlpha(a: number): void;
    /** Sets the origin in relation to the sprite's position for scaling and rotation. */
    setOrigin(originX: number, originY: number): void;
    /** Place origin in the center of the sprite */
    setOriginCenter(): void;
    setRotation(rad: number): void;
    getRotation(): number;
    rotate(rad: number): void;
    /** Sets the sprite's scale for both X and Y. The sprite scales out from the origin. This will not affect the values returned
     * by {@link #getWidth()} and {@link #getHeight()} */
    setScale(scaleX: number, scaleY: number): void;
    /** Sets the sprite's scale relative to the current scale. for example: original scale 2 -> sprite.scale(4) -> final scale 6.
     * The sprite scales out from the origin. This will not affect the values returned by {@link #getWidth()} and
     * {@link #getHeight()} */
    applyScale(amount: number): void;
    /** Returns the packed vertices, colors, and texture coordinates for this sprite. */
    getVertices(yDown?: boolean): Float32Array;
    bounds: Rectangle;
    /** Returns the bounding axis aligned {@link Rectangle} that bounds this sprite. The rectangles x and y coordinates describe
     * its bottom left corner. If you change the position or size of the sprite, you have to fetch the triangle again for it to be
     * recomputed.
     *
     * @return the bounding Rectangle */
    getBoundingRectangle(): Rectangle;
    draw(batch: PolygonBatch): void;
    drawWithAlpha(batch: PolygonBatch, alphaModulation: number): void;
    getX(): number;
    getY(): number;
    /** @return the width of the sprite, not accounting for scale. */
    getWidth(): number;
    /** @return the height of the sprite, not accounting for scale. */
    getHeight(): number;
    /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of
     * scaling {@link #setScale(float, float)} */
    getOriginX(): number;
    /** The origin influences {@link #setPosition(float, float)}, {@link #setRotation(float)} and the expansion direction of
     * scaling {@link #setScale(float, float)} */
    getOriginY(): number;
    /** X scale of the sprite, independent of size set by {@link #setSize(float, float)} */
    getScaleX(): number;
    /** Y scale of the sprite, independent of size set by {@link #setSize(float, float)} */
    getScaleY(): number;
    /** Returns the color of this sprite. If the returned instance is manipulated, {@link #setColor(Color)} must be called
     * afterward. */
    getColor(): Color;
}
