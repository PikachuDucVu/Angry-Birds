"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewportInputHandler = void 0;
const InputHandler_1 = require("./InputHandler");
const Vector2_1 = require("./Vector2");
const createViewportAwareInputListener = (handler, viewport) => {
    return (x, y) => {
        const { x: vX, y: vY, pixelRatio } = viewport.getViewportInfo();
        x = x * pixelRatio - vX;
        y = y * pixelRatio - vY;
        handler(x, y);
    };
};
class ViewportInputHandler {
    constructor(viewport) {
        this.screenCoord = new Vector2_1.Vector2();
        this.worldCoord = new Vector2_1.Vector2();
        this.viewport = viewport;
        this.canvas = viewport.getCanvas();
        this.inputHandler = new InputHandler_1.InputHandler(this.canvas);
    }
    isTouched() {
        return this.inputHandler.isTouched();
    }
    cleanup() {
        this.inputHandler.cleanup();
    }
    addEventListener(event, listener) {
        this.inputHandler.addEventListener(event, createViewportAwareInputListener(listener, this.viewport));
    }
    getX() {
        const { x: vX, pixelRatio } = this.viewport.getViewportInfo();
        return this.inputHandler.getX() * pixelRatio - vX;
    }
    getY() {
        const { y: vY, pixelRatio } = this.viewport.getViewportInfo();
        return this.inputHandler.getY() * pixelRatio - vY;
    }
    getTouchedWorldCoord(camera) {
        if (!camera) {
            camera = this.viewport.getCamera();
        }
        this.screenCoord.set(this.getX(), this.getY());
        camera.unprojectVector2(this.worldCoord, this.screenCoord);
        return this.worldCoord;
    }
}
exports.ViewportInputHandler = ViewportInputHandler;
