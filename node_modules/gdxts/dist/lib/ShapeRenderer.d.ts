import { Disposable, Color } from './Utils';
import { ManagedWebGLRenderingContext } from './WebGL';
export declare enum ShapeType {
    Point = 0,
    Line = 1,
    Filled = 4
}
export declare class ShapeRenderer implements Disposable {
    private context;
    private isDrawing;
    private mesh;
    private shapeType;
    private color;
    private shader;
    private vertexIndex;
    private tmp;
    private srcColorBlend;
    private srcAlphaBlend;
    private dstBlend;
    projectionValues: Float32Array;
    constructor(context: ManagedWebGLRenderingContext | WebGLRenderingContext, maxVertices?: number);
    setProjection(projectionValues: Float32Array): void;
    begin(): void;
    setBlendMode(srcColorBlend: number, srcAlphaBlend: number, dstBlend: number): void;
    setColor(color: Color): void;
    setColorWith(r: number, g: number, b: number, a: number): void;
    point(x: number, y: number, color?: Color): void;
    line(x: number, y: number, x2: number, y2: number, color?: Color): void;
    triangle(filled: boolean, x: number, y: number, x2: number, y2: number, x3: number, y3: number, color?: Color, color2?: Color, color3?: Color): void;
    quad(filled: boolean, x: number, y: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number, color?: Color, color2?: Color, color3?: Color, color4?: Color): void;
    rect(filled: boolean, x: number, y: number, width: number, height: number, color?: Color): void;
    rectLine(filled: boolean, x1: number, y1: number, x2: number, y2: number, width: number, color?: Color): void;
    x(x: number, y: number, size: number): void;
    polygon(polygonVertices: ArrayLike<number>, offset: number, count: number, color?: Color): void;
    circle(filled: boolean, x: number, y: number, radius: number, color?: Color, segments?: number): void;
    curve(x1: number, y1: number, cx1: number, cy1: number, cx2: number, cy2: number, x2: number, y2: number, segments: number, color?: Color): void;
    private vertex;
    end(): void;
    private flush;
    private check;
    dispose(): void;
}
