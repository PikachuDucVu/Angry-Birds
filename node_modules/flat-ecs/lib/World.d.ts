import FastBitSet from 'fastbitset';
import { Component } from './Component';
import { Archetype } from './Archetype';
import { System } from './System';
import { ComponentMapper } from './ComponentMapper';
export default class World {
    private index;
    mappers: {
        [key: number]: ComponentMapper<any>;
    };
    private componentBitsMap;
    private getNewId;
    createEntity(): number;
    getComponentBits(entityId: number): FastBitSet;
    getMapper<T>(type: new (...args: any[]) => T): ComponentMapper<T>;
    getMapperByIndex<T>(typeIndex: number): ComponentMapper<T>;
    private componentIndices;
    private currentComponentIndex;
    getComponentIndex(type: new (...args: any[]) => any): number;
    createEntityByArchetype(archetype: Archetype): number;
    addComponent<T extends Component>(entityId: number, component: T, updateComponentBits?: boolean): T;
    getComponent<T>(entityId: number, type: new (...args: any[]) => T): T;
    getEntities(componentBits: FastBitSet, iterator: (entityId: number) => void): void;
    activeSystems: System[];
    passiveSystems: System[];
    addSystem(system: System, active?: boolean): void;
    injectMapper(system: any): void;
    private injectionRegistry;
    register(name: string, value: any): void;
    inject(object: any): void;
    dispose(): void;
    delta: number;
    setDelta(delta: number): void;
    processActiveSystem(): void;
    processPassiveSystem(): void;
    deleteEntity(entityId: number): void;
    isEntityActive(entityId: number): boolean;
}
